{
  "research_question_4": "For stages in parallel, fail-fast feature is used for what type of operations(stage names)? When it is used/unused, what are the operations running in parallel?",
  "parallel_stages_analysis": [
    {
      "outer_stage_name": "test",
      "fail_fast": false,
      "parallel_stages": [
        "Branch A",
        "Branch B"
      ]
    },
    {
      "outer_stage_name": "build",
      "fail_fast": false,
      "parallel_stages": [
        "Build",
        "error"
      ]
    },
    {
      "outer_stage_name": "parallel stage",
      "fail_fast": false,
      "parallel_stages": [
        "Update Service",
        "Deploy an application"
      ]
    },
    {
      "outer_stage_name": "build",
      "fail_fast": false,
      "parallel_stages": [
        "Build",
        "error"
      ]
    },
    {
      "outer_stage_name": "parallel stage",
      "fail_fast": false,
      "parallel_stages": [
        "Update Service",
        "Deploy an application"
      ]
    },
    {
      "outer_stage_name": "deploy alpha",
      "fail_fast": false,
      "parallel_stages": [
        "us-west-2-lab",
        "Print Env Variables"
      ]
    },
    {
      "outer_stage_name": "build",
      "fail_fast": true,
      "parallel_stages": [
        "mvn clean install in parallel"
      ]
    },
    {
      "outer_stage_name": "platform tests",
      "fail_fast": false,
      "parallel_stages": [
        "CentOS7",
        "Debian",
        "Local extension tests",
        "Digital Ocean"
      ]
    },
    {
      "outer_stage_name": "publication",
      "fail_fast": false,
      "parallel_stages": [
        "Docker Hub",
        "Maven publication"
      ]
    },
    {
      "outer_stage_name": "incremental build",
      "fail_fast": false,
      "parallel_stages": [
        "Linux",
        "Windows"
      ]
    },
    {
      "outer_stage_name": "full build",
      "fail_fast": false,
      "parallel_stages": [
        "Linux",
        "Windows"
      ]
    },
    {
      "outer_stage_name": "security analysis",
      "fail_fast": false,
      "parallel_stages": [
        "Owasp",
        "NodeJsSecurity"
      ]
    },
    {
      "outer_stage_name": "quality analysis",
      "fail_fast": false,
      "parallel_stages": [
        "SonarCloud",
        "Coverity",
        "Codecov"
      ]
    },
    {
      "outer_stage_name": "build/test",
      "fail_fast": false,
      "parallel_stages": [
        "Linux Full Build",
        "Windows Full Build",
        "Linux PR Build",
        "Windows PR Build"
      ]
    },
    {
      "outer_stage_name": "security analysis",
      "fail_fast": false,
      "parallel_stages": [
        "OWASP",
        "nodeJsSecurity"
      ]
    },
    {
      "outer_stage_name": "quality analysis",
      "fail_fast": false,
      "parallel_stages": [
        "SonarCloud",
        "Coverity"
      ]
    },
    {
      "outer_stage_name": "incremental build",
      "fail_fast": false,
      "parallel_stages": [
        "Linux",
        "Windows"
      ]
    },
    {
      "outer_stage_name": "full build",
      "fail_fast": false,
      "parallel_stages": [
        "Linux",
        "Windows"
      ]
    },
    {
      "outer_stage_name": "security analysis",
      "fail_fast": false,
      "parallel_stages": [
        "Owasp",
        "NodeJsSecurity"
      ]
    },
    {
      "outer_stage_name": "quality analysis",
      "fail_fast": false,
      "parallel_stages": [
        "SonarCloud",
        "Coverity",
        "Codecov"
      ]
    },
    {
      "outer_stage_name": "local tests",
      "fail_fast": false,
      "parallel_stages": [
        "Curl http_code",
        "Curl total_time",
        "Curl size_download"
      ]
    },
    {
      "outer_stage_name": "dev tests",
      "fail_fast": false,
      "parallel_stages": [
        "Curl http_code",
        "Curl total_time",
        "Curl size_download"
      ]
    },
    {
      "outer_stage_name": "staging tests",
      "fail_fast": false,
      "parallel_stages": [
        "Curl http_code",
        "Curl total_time",
        "Curl size_download"
      ]
    },
    {
      "outer_stage_name": "production tests",
      "fail_fast": false,
      "parallel_stages": [
        "Curl http_code",
        "Curl total_time",
        "Curl size_download"
      ]
    },
    {
      "outer_stage_name": "local tests",
      "fail_fast": false,
      "parallel_stages": [
        "Curl http_code",
        "Curl total_time",
        "Curl size_download"
      ]
    },
    {
      "outer_stage_name": "dev tests",
      "fail_fast": false,
      "parallel_stages": [
        "Curl http_code",
        "Curl total_time",
        "Curl size_download"
      ]
    },
    {
      "outer_stage_name": "staging tests",
      "fail_fast": false,
      "parallel_stages": [
        "Curl http_code",
        "Curl total_time",
        "Curl size_download"
      ]
    },
    {
      "outer_stage_name": "production tests",
      "fail_fast": false,
      "parallel_stages": [
        "Curl http_code",
        "Curl total_time",
        "Curl size_download"
      ]
    },
    {
      "outer_stage_name": "local tests",
      "fail_fast": false,
      "parallel_stages": [
        "Curl http_code",
        "Curl total_time",
        "Curl size_download"
      ]
    },
    {
      "outer_stage_name": "dev tests",
      "fail_fast": false,
      "parallel_stages": [
        "Curl http_code",
        "Curl total_time",
        "Curl size_download"
      ]
    },
    {
      "outer_stage_name": "staging tests",
      "fail_fast": false,
      "parallel_stages": [
        "Curl http_code",
        "Curl total_time",
        "Curl size_download"
      ]
    },
    {
      "outer_stage_name": "production tests",
      "fail_fast": false,
      "parallel_stages": [
        "Curl http_code",
        "Curl total_time",
        "Curl size_download"
      ]
    },
    {
      "outer_stage_name": "ps1",
      "fail_fast": false,
      "parallel_stages": [
        "ps1",
        "bat"
      ]
    },
    {
      "outer_stage_name": "create vms",
      "fail_fast": false,
      "parallel_stages": [
        "Create VM in RG 01",
        "Create VM in RG 02"
      ]
    }
  ],
  "valid_jenkinsfiles_scanned": 37,
  "project_details": [
    {
      "full_repo_name": "prachikhadke/jenkins-pipeline",
      "repo_url": "https://github.com/prachikhadke/jenkins-pipeline",
      "html_url_jenkinsfile": "https://github.com/prachikhadke/jenkins-pipeline/blob/dd366f6d38487bcc5eee39891820450305a375a7/jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/88538451/git/blobs/d2c133e534e313881ff025f45514f6294e3cf84f",
      "jenkins_pipeline": [
        {
          "error": "unexpected token: * @ line 9, column 2."
        }
      ]
    },
    {
      "full_repo_name": "troydai/azure-cli-perf",
      "repo_url": "https://github.com/troydai/azure-cli-perf",
      "html_url_jenkinsfile": "https://github.com/troydai/azure-cli-perf/blob/020869c90ead3b5feccb5d18477c848d7ceb2031/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/87769048/git/blobs/018e31887c965378854ad3317bf3bb2898963324",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Build",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "Building ..."
                          }
                        }
                      ]
                    },
                    {
                      "name": "sleep",
                      "arguments": [
                        {
                          "key": "time",
                          "value": {
                            "isLiteral": true,
                            "value": 1
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "agent": {
                "type": "any"
              }
            },
            {
              "name": "Test",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "Testing ..."
                          }
                        }
                      ]
                    },
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def modules = ['keyvault', 'batch', 'acs']\n          parallel keyvaule: { node { echo \"Test Keyvault\"} }, acs: { node { echo \"Test ACS\"} }, failFast: false"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "agent": {
                "type": "any"
              }
            }
          ],
          "agent": {
            "type": "none"
          }
        }
      }
    },
    {
      "full_repo_name": "strokyl/jenkinstest",
      "repo_url": "https://github.com/strokyl/jenkinstest",
      "html_url_jenkinsfile": "https://github.com/strokyl/jenkinstest/blob/5098725204dbc0b1f7d78cae20e28c0a8c67ce92/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/114625832/git/blobs/1be03b8625b403f65c90e448c9e3b26e2c83dd03",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "build",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "mvn -B clean package -DskipTests"
                          }
                        }
                      ]
                    },
                    {
                      "name": "stash",
                      "arguments": [
                        {
                          "key": "name",
                          "value": {
                            "isLiteral": true,
                            "value": "build"
                          }
                        },
                        {
                          "key": "includes",
                          "value": {
                            "isLiteral": true,
                            "value": "pom.xml, src/, target/"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "test",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def splits = splitTests parallelism: [$class: 'CountDrivenParallelism', size: 4], generateInclusions: true\n          def testGroups = [:]\n          for (int i = 0; i < splits.size(); i++) {\n            def j = i\n            def split = splits[j]\n\n            testGroups[\"split-${j}\"] = {\n              node {\n                unstash 'build'\n                def mavenTest = 'mvn -B test -Dmaven.test.failure.ignore'\n\n                if (split.list.size() > 0) {\n                  if (split.includes) {\n                    def includes = split.list.join(\"\\n\")\n                    sh \"echo \\\"${includes}\\\" >> target/parallel-test-includes-${j}.txt\"\n\n                    mavenTest += \" -DincludesFile=target/parallel-test-includes-${j}.txt\"\n                  } else {\n                    def excludes = split.list.join(\"\\n\")\n                    sh \"echo \\\"${excludes}\\\" >> target/parallel-test-excludes-${j}.txt\"\n\n                    mavenTest += \" -DexcludesFile=target/parallel-test-excludes-${j}.txt\"\n                  }\n                }\n\n                sh mavenTest\n\n                sh \"find . -name TEST-*.xml\"\n                //stash name: \"report-${j}\", includes: '**/*.java'\n              }\n            }\n          }\n\n          parallel testGroups\n\n          for (int i = 0; i < splits.size(); i++) {\n            //unstash \"report-${i}\"\n          }\n\n          sh \"find . -name TEST-*.xml\"\n          step([$class: \"JUnitResultArchiver\", testResults: '**/target/surefire-reports/TEST-*.xml'])"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "agent": {
            "type": "docker",
            "arguments": [
              {
                "key": "image",
                "value": {
                  "isLiteral": true,
                  "value": "maven:3.5.2-jdk-8"
                }
              },
              {
                "key": "args",
                "value": {
                  "isLiteral": true,
                  "value": "-v /root/.m2:/root/.m2"
                }
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "jakew02/pipeline-pof",
      "repo_url": "https://github.com/jakew02/pipeline-pof",
      "html_url_jenkinsfile": "https://github.com/jakew02/pipeline-pof/blob/98533bb7fc77cb4a5209d019379e82b079bf77a8/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/91018959/git/blobs/d5fe624ff1677d0136d8179f32dcad2372f8e1e0",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Sync",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "for (x in labels) {\n                        def label = x\n\n                        builders[label] = {\n                            node(label) {\n                                dir(path: '/home/build/omni-7.1') {\n                                    //sh 'repo sync -j48 -cdf --force-sync'\n                                    sh 'echo syncing..'\n                                }\n                            }\n                        }\n                    }\n\n                    parallel builders"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Build",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "for (int i = 0; i < devices.size(); i++) {\n                        def device = devices.get(i)\n                        def stepName = \"${device}\"\n\n                        stepsForParallel[stepName] = transformIntoStep(device)\n                    }\n\n                    parallel stepsForParallel"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "agent": {
                "type": "any"
              }
            }
          ],
          "agent": {
            "type": "none"
          }
        }
      }
    },
    {
      "full_repo_name": "elifesciences/builder",
      "repo_url": "https://github.com/elifesciences/builder",
      "html_url_jenkinsfile": "https://github.com/elifesciences/builder/blob/a6b0c1c2a868d350c1acff46a0b4c249b1d60726/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/56778863/git/blobs/d55a39e5b94fa9fbc078ffb7c9d65a296dc87304",
      "jenkins_pipeline": [
        {
          "error": "Jenkinsfile content 'elifePipeline {\n\n    def commit\n    stage 'Checkout', {\n        checkout scm\n        commit = elifeGitRevision()\n        // temporary\n        elifeNotifyAtomist 'STARTED', 'STARTED'\n    }\n\n    stage 'Update', {\n        sh './update.sh --exclude virtualbox vagrant ssh-credentials ssh-agent vault'\n        sh 'rm -rf .tox'\n    }\n\n    stage 'Scrub', {\n        withCommitStatus({\n            sh './.ci-scrub.sh'\n        }, 'scrub', commit)\n    }\n\n    stage 'Static checking', {\n        elifeLocalTests()\n    }\n\n    lock('builder') {\n        def pythons = ['py27', 'py35']\n        def actions = [:]\n        for (int i = 0; i < pythons.size(); i++) {\n            def python = pythons.get(i)\n            actions[\"Test ${python}\"] = {\n                withCommitStatus({\n                    try {\n                        sh \"tox -e ${python}\"\n                    } finally {\n                        step([$class: \"JUnitResultArchiver\", testResults: \"build/pytest-${python}.xml\"])\n                    }\n                }, python, commit)\n            }\n        }\n        // currently unstable due to CloudFormation rate limiting\n        //parallel actions\n        stage \"Test py27\", {\n            actions[\"Test py27\"]() \n        }\n        stage \"Test py35\", {\n            actions[\"Test py35\"]() \n        }\n    }\n\n    // temporary\n    elifeNotifyAtomist 'SUCCESS'\n}\n' did not contain the 'pipeline' step"
        }
      ]
    },
    {
      "full_repo_name": "linux-xiayun/Pipeline",
      "repo_url": "https://github.com/linux-xiayun/Pipeline",
      "html_url_jenkinsfile": "https://github.com/linux-xiayun/Pipeline/blob/5878bf77be7d3761cc0569d9bf1e7f8a884cf77b/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/119650935/git/blobs/5985bdc7a32dbe73357e6c209a07a750a39d241b",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Maven Build",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "Hello, Maven"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "mvn --version"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "agent": {
                "type": "docker",
                "argument": {
                  "isLiteral": true,
                  "value": "maven:3-alpine"
                }
              },
              "options": {
                "options": [
                  {
                    "name": "retry",
                    "arguments": [
                      {
                        "isLiteral": true,
                        "value": 3
                      }
                    ]
                  },
                  {
                    "name": "timeout",
                    "arguments": [
                      {
                        "key": "time",
                        "value": {
                          "isLiteral": true,
                          "value": 10
                        }
                      },
                      {
                        "key": "unit",
                        "value": {
                          "isLiteral": true,
                          "value": "MINUTES"
                        }
                      }
                    ]
                  }
                ]
              }
            },
            {
              "name": "Aborted",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": false,
                            "value": "\"Hello, ${PERSON}, nice to meet you.\""
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "input": {
                "message": {
                  "isLiteral": true,
                  "value": "Should we continue?"
                },
                "ok": {
                  "isLiteral": true,
                  "value": "Yes, we should."
                },
                "parameters": {
                  "parameters": [
                    {
                      "name": "string",
                      "arguments": [
                        {
                          "key": "name",
                          "value": {
                            "isLiteral": true,
                            "value": "PERSON"
                          }
                        },
                        {
                          "key": "defaultValue",
                          "value": {
                            "isLiteral": true,
                            "value": "Mr XiaYun"
                          }
                        },
                        {
                          "key": "description",
                          "value": {
                            "isLiteral": true,
                            "value": "Who should I say hello to?"
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            },
            {
              "name": "Java Build",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "Hello, JDK"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "java -version"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "agent": {
                "type": "docker",
                "argument": {
                  "isLiteral": true,
                  "value": "openjdk:8-jre"
                }
              },
              "options": {
                "options": [
                  {
                    "name": "retry",
                    "arguments": [
                      {
                        "isLiteral": true,
                        "value": 3
                      }
                    ]
                  },
                  {
                    "name": "timeout",
                    "arguments": [
                      {
                        "key": "time",
                        "value": {
                          "isLiteral": true,
                          "value": 10
                        }
                      },
                      {
                        "key": "unit",
                        "value": {
                          "isLiteral": true,
                          "value": "MINUTES"
                        }
                      }
                    ]
                  }
                ]
              }
            },
            {
              "name": "Test",
              "parallel": [
                {
                  "name": "Branch A",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "echo",
                          "arguments": [
                            {
                              "key": "message",
                              "value": {
                                "isLiteral": true,
                                "value": "On Branch A"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "Branch B",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "echo",
                          "arguments": [
                            {
                              "key": "message",
                              "value": {
                                "isLiteral": true,
                                "value": "On Branch B"
                              }
                            }
                          ]
                        },
                        {
                          "name": "script",
                          "arguments": [
                            {
                              "key": "scriptBlock",
                              "value": {
                                "isLiteral": true,
                                "value": "def browsers = ['chrome', 'firefox']\n\t\t\t\t\t\tfor (int i = 0; i < browsers.size(); ++i) {\n\t\t\t\t\t\t    echo \"Testing the ${browsers[i]} browser\"\n\t\t\t\t\t\t\t}"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Finished",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": false,
                            "value": "\"Hello ${params.PERSON}, It's finished successfully!\""
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "post": {
            "conditions": [
              {
                "condition": "success",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "Well Done!"
                          }
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "condition": "failure",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "sorry failed!"
                          }
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "condition": "unstable",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "en...unstable!"
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          },
          "agent": {
            "type": "none"
          },
          "parameters": {
            "parameters": [
              {
                "name": "string",
                "arguments": [
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "PERSON"
                    }
                  },
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": true,
                      "value": "Mr Xiayun"
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "Who should I say hello to?"
                    }
                  }
                ]
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "andrewhaeffner/px4-modded",
      "repo_url": "https://github.com/andrewhaeffner/px4-modded",
      "html_url_jenkinsfile": "https://github.com/andrewhaeffner/px4-modded/blob/8f26f1e231a995cc76bba5bf0b6b2fd26eb15c43/platforms/nuttx/NuttX/nuttx/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/132657082/git/blobs/b20fda3690aa7c99ff25f7e8efb3af9a799a8927",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Build",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def builds = [:]\n\n          def docker_nuttx = \"px4io/px4-dev-nuttx:2017-12-30\"\n\n          // stm32f4discovery\n          // TODO: cxxtest, ipv6, netnsh, nxlines, rndis, testlibcxx, uavcan, usbmsc, winbuild\n          for (def option in [\"canard\", \"elf\", \"kostest\", \"nsh\", \"pm\", \"posix_spawn\", \"pseudoterm\", \"usbnsh\", \"xen1210\"]) {\n            def node_name = \"stm32f4discovery/${option}\"\n            builds[node_name] = createBuildNode(docker_nuttx, \"stm32f4discovery\", option)\n          }\n\n          // stm32f103-minimum\n          // TODO: jlx12864g\n          for (def option in [\"audio_tone\", \"buttons\", \"mcp2515\", \"nsh\", \"rfid-rc522\", \"rgbled\", \"usbnsh\", \"userled\", \"veml6070\"]) {\n            def node_name = \"stm32f103-minimum/${option}\"\n            builds[node_name] = createBuildNode(docker_nuttx, \"stm32f103-minimum\", option)\n          }\n\n          // stm32f769i-disco\n          for (def option in [\"nsh\", \"nsh-ethernet\"]) {\n            def node_name = \"stm32f769i-disco/${option}\"\n            builds[node_name] = createBuildNode(docker_nuttx, \"stm32f769i-disco\", option)\n          }\n\n          parallel builds"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "environment": [
            {
              "key": "CCACHE_DIR",
              "value": {
                "isLiteral": true,
                "value": "/tmp/ccache"
              }
            }
          ],
          "agent": {
            "type": "none"
          },
          "options": {
            "options": [
              {
                "name": "buildDiscarder",
                "arguments": [
                  {
                    "name": "logRotator",
                    "arguments": [
                      {
                        "key": "numToKeepStr",
                        "value": {
                          "isLiteral": true,
                          "value": "5"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "name": "timeout",
                "arguments": [
                  {
                    "key": "time",
                    "value": {
                      "isLiteral": true,
                      "value": 60
                    }
                  },
                  {
                    "key": "unit",
                    "value": {
                      "isLiteral": true,
                      "value": "MINUTES"
                    }
                  }
                ]
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "yuzp1996/hello-world",
      "repo_url": "https://github.com/yuzp1996/hello-world",
      "html_url_jenkinsfile": "https://github.com/yuzp1996/hello-world/blob/ecdb616161633f899ab1bdba6e59d25bf70bb1a2/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/130826080/git/blobs/d95a9c8098aaeb9508d3ddd2accbb31d411ce802",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Build",
              "parallel": [
                {
                  "name": "Build",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "alaudaStartBuild",
                          "arguments": [
                            {
                              "key": "buildConfigName",
                              "value": {
                                "isLiteral": true,
                                "value": "hello-world"
                              }
                            },
                            {
                              "key": "async",
                              "value": {
                                "isLiteral": true,
                                "value": true
                              }
                            },
                            {
                              "key": "branch",
                              "value": {
                                "isLiteral": true,
                                "value": "master"
                              }
                            },
                            {
                              "key": "commitID",
                              "value": {
                                "isLiteral": true,
                                "value": "4dbbebb1a2e3234d7cfec1e1485d4463fcd3020d"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "error",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "echo XXXXX"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Parallel Stage",
              "parallel": [
                {
                  "name": "Update Service",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "Update the service..."
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "Deploy an application",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "Deploy an application..."
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "branch",
                    "arguments": {
                      "isLiteral": true,
                      "value": "master"
                    }
                  }
                ]
              }
            },
            {
              "name": "Deploy - Staging",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "./deploy staging"
                          }
                        }
                      ]
                    },
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "./run-smoke-tests"
                          }
                        }
                      ]
                    },
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def browsers = ['chrome', 'firefox', 'opera']\n          for (int i = 0; i < browsers.size(); ++i) {\n            echo \"Testing the ${browsers[i]} browser\"\n          }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Sanity check",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "input",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "Does the staging environment look ok?"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Deploy - Production",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "./deploy production"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "expression",
                    "arguments": [
                      {
                        "key": "scriptBlock",
                        "value": {
                          "isLiteral": true,
                          "value": "currentBuild.result == null || currentBuild.result == 'SUCCESS'"
                        }
                      }
                    ]
                  }
                ]
              }
            }
          ],
          "post": {
            "conditions": [
              {
                "condition": "always",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "One way or another, I have finished"
                          }
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "condition": "success",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "I am successed!"
                          }
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "condition": "unstable",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "I am unstable :/"
                          }
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "condition": "failure",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "I am failed :("
                          }
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "condition": "aborted",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "I am aborted..."
                          }
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "condition": "changed",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "Things were different before..."
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          },
          "environment": [
            {
              "key": "DEPLOY_TO",
              "value": {
                "isLiteral": true,
                "value": "production"
              }
            }
          ],
          "agent": {
            "type": "any"
          },
          "options": {
            "options": [
              {
                "name": "timeout",
                "arguments": [
                  {
                    "key": "time",
                    "value": {
                      "isLiteral": true,
                      "value": 1
                    }
                  },
                  {
                    "key": "unit",
                    "value": {
                      "isLiteral": true,
                      "value": "HOURS"
                    }
                  }
                ]
              }
            ]
          },
          "parameters": {
            "parameters": [
              {
                "name": "string",
                "arguments": [
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "person"
                    }
                  },
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": true,
                      "value": "sywang"
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "Who should I say hello to?"
                    }
                  }
                ]
              },
              {
                "name": "string",
                "arguments": [
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "repoUrl"
                    }
                  },
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": true,
                      "value": "https://github.com/sniperyen/hello-world"
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "gitä»£ç è·¯å¾"
                    }
                  }
                ]
              },
              {
                "name": "string",
                "arguments": [
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "repoBranch"
                    }
                  },
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": true,
                      "value": "master"
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "gitåæ¯åç§°"
                    }
                  }
                ]
              },
              {
                "name": "string",
                "arguments": [
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "dockerfilePath"
                    }
                  },
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": true,
                      "value": "Dockerfile"
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "ç¸å¯¹è·¯å¾"
                    }
                  }
                ]
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "andrewhaeffner/px4-modded",
      "repo_url": "https://github.com/andrewhaeffner/px4-modded",
      "html_url_jenkinsfile": "https://github.com/andrewhaeffner/px4-modded/blob/8f26f1e231a995cc76bba5bf0b6b2fd26eb15c43/build/aerofc-v1_default/NuttX/nuttx/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/132657082/git/blobs/b20fda3690aa7c99ff25f7e8efb3af9a799a8927",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Build",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def builds = [:]\n\n          def docker_nuttx = \"px4io/px4-dev-nuttx:2017-12-30\"\n\n          // stm32f4discovery\n          // TODO: cxxtest, ipv6, netnsh, nxlines, rndis, testlibcxx, uavcan, usbmsc, winbuild\n          for (def option in [\"canard\", \"elf\", \"kostest\", \"nsh\", \"pm\", \"posix_spawn\", \"pseudoterm\", \"usbnsh\", \"xen1210\"]) {\n            def node_name = \"stm32f4discovery/${option}\"\n            builds[node_name] = createBuildNode(docker_nuttx, \"stm32f4discovery\", option)\n          }\n\n          // stm32f103-minimum\n          // TODO: jlx12864g\n          for (def option in [\"audio_tone\", \"buttons\", \"mcp2515\", \"nsh\", \"rfid-rc522\", \"rgbled\", \"usbnsh\", \"userled\", \"veml6070\"]) {\n            def node_name = \"stm32f103-minimum/${option}\"\n            builds[node_name] = createBuildNode(docker_nuttx, \"stm32f103-minimum\", option)\n          }\n\n          // stm32f769i-disco\n          for (def option in [\"nsh\", \"nsh-ethernet\"]) {\n            def node_name = \"stm32f769i-disco/${option}\"\n            builds[node_name] = createBuildNode(docker_nuttx, \"stm32f769i-disco\", option)\n          }\n\n          parallel builds"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "environment": [
            {
              "key": "CCACHE_DIR",
              "value": {
                "isLiteral": true,
                "value": "/tmp/ccache"
              }
            }
          ],
          "agent": {
            "type": "none"
          },
          "options": {
            "options": [
              {
                "name": "buildDiscarder",
                "arguments": [
                  {
                    "name": "logRotator",
                    "arguments": [
                      {
                        "key": "numToKeepStr",
                        "value": {
                          "isLiteral": true,
                          "value": "5"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "name": "timeout",
                "arguments": [
                  {
                    "key": "time",
                    "value": {
                      "isLiteral": true,
                      "value": 60
                    }
                  },
                  {
                    "key": "unit",
                    "value": {
                      "isLiteral": true,
                      "value": "MINUTES"
                    }
                  }
                ]
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "mrm1ck/azureCLI",
      "repo_url": "https://github.com/mrm1ck/azureCLI",
      "html_url_jenkinsfile": "https://github.com/mrm1ck/azureCLI/blob/30c98a75c36c02a657f1753ff5c48502dc7f7933/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/107491009/git/blobs/9a7a60e3e7cb9ba28680846052ae77839260a416",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Build",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "checkout",
                      "arguments": [
                        {
                          "key": "scm",
                          "value": {
                            "isLiteral": false,
                            "value": "${scm}"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "./scripts/jenkins_build.sh"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "./scripts/jenkins_archive.sh"
                          }
                        }
                      ]
                    },
                    {
                      "name": "deleteDir",
                      "arguments": []
                    }
                  ]
                }
              ],
              "agent": {
                "type": "label",
                "argument": {
                  "isLiteral": true,
                  "value": "linux-build"
                }
              },
              "post": {
                "conditions": [
                  {
                    "condition": "always",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "deleteDir",
                          "arguments": []
                        }
                      ]
                    }
                  }
                ]
              }
            },
            {
              "name": "Test",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def test_tasks = [:]\n\n          // Add live test tasks\n          def modules = ['acs', 'keyvault', 'storage', 'sql', 'role', 'vm', 'network']\n          for (int i = 0; i < modules.size(); ++i) {\n            def name = modules.get(i)\n            test_tasks[\"Live Test: ${name}\"] = {\n              node('linux-build') {\n                checkout scm\n                withCredentials([[$class: 'UsernamePasswordMultiBinding', \n                                  credentialsId: 'AzureSDKADGraph2',\n                                  usernameVariable: 'AZURE_CLI_TEST_DEV_SP_NAME', \n                                  passwordVariable: 'AZURE_CLI_TEST_DEV_SP_PASSWORD']]) {\n                withCredentials([string(credentialsId: 'AzureSDKADGraph2_Tenant',\n                                        variable: 'AZURE_CLI_TEST_DEV_SP_TENANT')]) {\n                  sh \"./scripts/jenkins_live_test.sh ${name}\"\n                }}\n              }\n            }\n          }\n\n          // Add performance test tasks\n          def platforms = ['perf-ubuntu-a0', 'perf-ubuntu-ds1']\n          for (int i = 0; i < platforms.size(); i++) {\n            platform = platforms.get(i)\n            test_tasks[\"Performance Test: ${platform}\"] = perf_closure(platform)\n          }\n\n          test_tasks.failFast = false\n          parallel test_tasks"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "agent": {
            "type": "none"
          },
          "triggers": {
            "triggers": [
              {
                "name": "cron",
                "arguments": [
                  {
                    "isLiteral": true,
                    "value": "0 3 * * *"
                  }
                ]
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "tikalk/parallel-maven-test",
      "repo_url": "https://github.com/tikalk/parallel-maven-test",
      "html_url_jenkinsfile": "https://github.com/tikalk/parallel-maven-test/blob/403a80a7624dbbceb4ce397bb6b9cdc644c0c01e/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/122335064/git/blobs/9e50441ed60f9cfe306eb0f862b9935b963eeab8",
      "jenkins_pipeline": [
        {
          "error": [
            "Tool type \"maven\" does not have an install of \"mvn350\" configured - did you mean \"Jenkins_maven\"? @ line 9, column 15.",
            "Tool type \"jdk\" does not have an install of \"jdk8u131\" configured - did you mean \"null\"? @ line 10, column 13."
          ]
        }
      ]
    },
    {
      "full_repo_name": "PX4-NuttX/nuttx",
      "repo_url": "https://github.com/PX4-NuttX/nuttx",
      "html_url_jenkinsfile": "https://github.com/PX4-NuttX/nuttx/blob/65b87d092a6d5f776ab5f9dbb095d31e45861789/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/39532678/git/blobs/b20fda3690aa7c99ff25f7e8efb3af9a799a8927",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Build",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def builds = [:]\n\n          def docker_nuttx = \"px4io/px4-dev-nuttx:2017-12-30\"\n\n          // stm32f4discovery\n          // TODO: cxxtest, ipv6, netnsh, nxlines, rndis, testlibcxx, uavcan, usbmsc, winbuild\n          for (def option in [\"canard\", \"elf\", \"kostest\", \"nsh\", \"pm\", \"posix_spawn\", \"pseudoterm\", \"usbnsh\", \"xen1210\"]) {\n            def node_name = \"stm32f4discovery/${option}\"\n            builds[node_name] = createBuildNode(docker_nuttx, \"stm32f4discovery\", option)\n          }\n\n          // stm32f103-minimum\n          // TODO: jlx12864g\n          for (def option in [\"audio_tone\", \"buttons\", \"mcp2515\", \"nsh\", \"rfid-rc522\", \"rgbled\", \"usbnsh\", \"userled\", \"veml6070\"]) {\n            def node_name = \"stm32f103-minimum/${option}\"\n            builds[node_name] = createBuildNode(docker_nuttx, \"stm32f103-minimum\", option)\n          }\n\n          // stm32f769i-disco\n          for (def option in [\"nsh\", \"nsh-ethernet\"]) {\n            def node_name = \"stm32f769i-disco/${option}\"\n            builds[node_name] = createBuildNode(docker_nuttx, \"stm32f769i-disco\", option)\n          }\n\n          parallel builds"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "environment": [
            {
              "key": "CCACHE_DIR",
              "value": {
                "isLiteral": true,
                "value": "/tmp/ccache"
              }
            }
          ],
          "agent": {
            "type": "none"
          },
          "options": {
            "options": [
              {
                "name": "buildDiscarder",
                "arguments": [
                  {
                    "name": "logRotator",
                    "arguments": [
                      {
                        "key": "numToKeepStr",
                        "value": {
                          "isLiteral": true,
                          "value": "5"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "name": "timeout",
                "arguments": [
                  {
                    "key": "time",
                    "value": {
                      "isLiteral": true,
                      "value": 60
                    }
                  },
                  {
                    "key": "unit",
                    "value": {
                      "isLiteral": true,
                      "value": "MINUTES"
                    }
                  }
                ]
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "sniperyen/hello-world",
      "repo_url": "https://github.com/sniperyen/hello-world",
      "html_url_jenkinsfile": "https://github.com/sniperyen/hello-world/blob/69298465aca38ab6810cf291ac3702f99d65741d/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/102568413/git/blobs/d95a9c8098aaeb9508d3ddd2accbb31d411ce802",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Build",
              "parallel": [
                {
                  "name": "Build",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "alaudaStartBuild",
                          "arguments": [
                            {
                              "key": "buildConfigName",
                              "value": {
                                "isLiteral": true,
                                "value": "hello-world"
                              }
                            },
                            {
                              "key": "async",
                              "value": {
                                "isLiteral": true,
                                "value": true
                              }
                            },
                            {
                              "key": "branch",
                              "value": {
                                "isLiteral": true,
                                "value": "master"
                              }
                            },
                            {
                              "key": "commitID",
                              "value": {
                                "isLiteral": true,
                                "value": "4dbbebb1a2e3234d7cfec1e1485d4463fcd3020d"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "error",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "echo XXXXX"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Parallel Stage",
              "parallel": [
                {
                  "name": "Update Service",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "Update the service..."
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "Deploy an application",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "Deploy an application..."
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "branch",
                    "arguments": {
                      "isLiteral": true,
                      "value": "master"
                    }
                  }
                ]
              }
            },
            {
              "name": "Deploy - Staging",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "./deploy staging"
                          }
                        }
                      ]
                    },
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "./run-smoke-tests"
                          }
                        }
                      ]
                    },
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def browsers = ['chrome', 'firefox', 'opera']\n          for (int i = 0; i < browsers.size(); ++i) {\n            echo \"Testing the ${browsers[i]} browser\"\n          }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Sanity check",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "input",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "Does the staging environment look ok?"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Deploy - Production",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "./deploy production"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "expression",
                    "arguments": [
                      {
                        "key": "scriptBlock",
                        "value": {
                          "isLiteral": true,
                          "value": "currentBuild.result == null || currentBuild.result == 'SUCCESS'"
                        }
                      }
                    ]
                  }
                ]
              }
            }
          ],
          "post": {
            "conditions": [
              {
                "condition": "always",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "One way or another, I have finished"
                          }
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "condition": "success",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "I am successed!"
                          }
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "condition": "unstable",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "I am unstable :/"
                          }
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "condition": "failure",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "I am failed :("
                          }
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "condition": "aborted",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "I am aborted..."
                          }
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "condition": "changed",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "Things were different before..."
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          },
          "environment": [
            {
              "key": "DEPLOY_TO",
              "value": {
                "isLiteral": true,
                "value": "production"
              }
            }
          ],
          "agent": {
            "type": "any"
          },
          "options": {
            "options": [
              {
                "name": "timeout",
                "arguments": [
                  {
                    "key": "time",
                    "value": {
                      "isLiteral": true,
                      "value": 1
                    }
                  },
                  {
                    "key": "unit",
                    "value": {
                      "isLiteral": true,
                      "value": "HOURS"
                    }
                  }
                ]
              }
            ]
          },
          "parameters": {
            "parameters": [
              {
                "name": "string",
                "arguments": [
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "person"
                    }
                  },
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": true,
                      "value": "sywang"
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "Who should I say hello to?"
                    }
                  }
                ]
              },
              {
                "name": "string",
                "arguments": [
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "repoUrl"
                    }
                  },
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": true,
                      "value": "https://github.com/sniperyen/hello-world"
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "gitä»£ç è·¯å¾"
                    }
                  }
                ]
              },
              {
                "name": "string",
                "arguments": [
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "repoBranch"
                    }
                  },
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": true,
                      "value": "master"
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "gitåæ¯åç§°"
                    }
                  }
                ]
              },
              {
                "name": "string",
                "arguments": [
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "dockerfilePath"
                    }
                  },
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": true,
                      "value": "Dockerfile"
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "ç¸å¯¹è·¯å¾"
                    }
                  }
                ]
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "gulshanksingla/jenkingBlueOceanPractice",
      "repo_url": "https://github.com/gulshanksingla/jenkingBlueOceanPractice",
      "html_url_jenkinsfile": "https://github.com/gulshanksingla/jenkingBlueOceanPractice/blob/a06eaaf334e9c1eef5cdac70ca16c62c2239c882/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/132594989/git/blobs/32bd1dad369850afd94b446a177e7cff94d82c6f",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Stage1",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "Stage 1 started"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sleep",
                      "arguments": [
                        {
                          "key": "time",
                          "value": {
                            "isLiteral": true,
                            "value": 2
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Run Script",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "Hello World"
                          }
                        }
                      ]
                    },
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def browsers = ['chrome', 'firefox']\n          for (int i = 0; i < browsers.size(); ++i) {\n            echo \"Testing the ${browsers[i]} browser\"\n          }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Deploy alpha",
              "parallel": [
                {
                  "name": "us-west-2-lab",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "echo",
                          "arguments": [
                            {
                              "key": "message",
                              "value": {
                                "isLiteral": true,
                                "value": "Stage: Deploy alpha us-west-2-lab started"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "Print Env Variables",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "echo ${env}"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Get Input",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": false,
                            "value": "\"Hello, ${PERSON}, nice to meet you.\""
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "input": {
                "message": {
                  "isLiteral": true,
                  "value": "Should we continue?"
                },
                "id": {
                  "isLiteral": true,
                  "value": "Yes, we should."
                },
                "parameters": {
                  "parameters": [
                    {
                      "name": "string",
                      "arguments": [
                        {
                          "key": "name",
                          "value": {
                            "isLiteral": true,
                            "value": "PERSON"
                          }
                        },
                        {
                          "key": "defaultValue",
                          "value": {
                            "isLiteral": true,
                            "value": "Mr Jenkins"
                          }
                        },
                        {
                          "key": "description",
                          "value": {
                            "isLiteral": true,
                            "value": "Who should I say hello to?"
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            }
          ],
          "agent": {
            "type": "any"
          }
        }
      }
    },
    {
      "full_repo_name": "ahmedelnably/newCreate",
      "repo_url": "https://github.com/ahmedelnably/newCreate",
      "html_url_jenkinsfile": "https://github.com/ahmedelnably/newCreate/blob/ae8e32d516034aa5da93047720402b32362d7126/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/119572463/git/blobs/9a7a60e3e7cb9ba28680846052ae77839260a416",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Build",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "checkout",
                      "arguments": [
                        {
                          "key": "scm",
                          "value": {
                            "isLiteral": false,
                            "value": "${scm}"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "./scripts/jenkins_build.sh"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "./scripts/jenkins_archive.sh"
                          }
                        }
                      ]
                    },
                    {
                      "name": "deleteDir",
                      "arguments": []
                    }
                  ]
                }
              ],
              "agent": {
                "type": "label",
                "argument": {
                  "isLiteral": true,
                  "value": "linux-build"
                }
              },
              "post": {
                "conditions": [
                  {
                    "condition": "always",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "deleteDir",
                          "arguments": []
                        }
                      ]
                    }
                  }
                ]
              }
            },
            {
              "name": "Test",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def test_tasks = [:]\n\n          // Add live test tasks\n          def modules = ['acs', 'keyvault', 'storage', 'sql', 'role', 'vm', 'network']\n          for (int i = 0; i < modules.size(); ++i) {\n            def name = modules.get(i)\n            test_tasks[\"Live Test: ${name}\"] = {\n              node('linux-build') {\n                checkout scm\n                withCredentials([[$class: 'UsernamePasswordMultiBinding', \n                                  credentialsId: 'AzureSDKADGraph2',\n                                  usernameVariable: 'AZURE_CLI_TEST_DEV_SP_NAME', \n                                  passwordVariable: 'AZURE_CLI_TEST_DEV_SP_PASSWORD']]) {\n                withCredentials([string(credentialsId: 'AzureSDKADGraph2_Tenant',\n                                        variable: 'AZURE_CLI_TEST_DEV_SP_TENANT')]) {\n                  sh \"./scripts/jenkins_live_test.sh ${name}\"\n                }}\n              }\n            }\n          }\n\n          // Add performance test tasks\n          def platforms = ['perf-ubuntu-a0', 'perf-ubuntu-ds1']\n          for (int i = 0; i < platforms.size(); i++) {\n            platform = platforms.get(i)\n            test_tasks[\"Performance Test: ${platform}\"] = perf_closure(platform)\n          }\n\n          test_tasks.failFast = false\n          parallel test_tasks"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "agent": {
            "type": "none"
          },
          "triggers": {
            "triggers": [
              {
                "name": "cron",
                "arguments": [
                  {
                    "isLiteral": true,
                    "value": "0 3 * * *"
                  }
                ]
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "derekbekoe/azure-cli-scratch",
      "repo_url": "https://github.com/derekbekoe/azure-cli-scratch",
      "html_url_jenkinsfile": "https://github.com/derekbekoe/azure-cli-scratch/blob/178aed0b71be724e94217d22ed335fe40af6d82c/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/95806334/git/blobs/9a7a60e3e7cb9ba28680846052ae77839260a416",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Build",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "checkout",
                      "arguments": [
                        {
                          "key": "scm",
                          "value": {
                            "isLiteral": false,
                            "value": "${scm}"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "./scripts/jenkins_build.sh"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "./scripts/jenkins_archive.sh"
                          }
                        }
                      ]
                    },
                    {
                      "name": "deleteDir",
                      "arguments": []
                    }
                  ]
                }
              ],
              "agent": {
                "type": "label",
                "argument": {
                  "isLiteral": true,
                  "value": "linux-build"
                }
              },
              "post": {
                "conditions": [
                  {
                    "condition": "always",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "deleteDir",
                          "arguments": []
                        }
                      ]
                    }
                  }
                ]
              }
            },
            {
              "name": "Test",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def test_tasks = [:]\n\n          // Add live test tasks\n          def modules = ['acs', 'keyvault', 'storage', 'sql', 'role', 'vm', 'network']\n          for (int i = 0; i < modules.size(); ++i) {\n            def name = modules.get(i)\n            test_tasks[\"Live Test: ${name}\"] = {\n              node('linux-build') {\n                checkout scm\n                withCredentials([[$class: 'UsernamePasswordMultiBinding', \n                                  credentialsId: 'AzureSDKADGraph2',\n                                  usernameVariable: 'AZURE_CLI_TEST_DEV_SP_NAME', \n                                  passwordVariable: 'AZURE_CLI_TEST_DEV_SP_PASSWORD']]) {\n                withCredentials([string(credentialsId: 'AzureSDKADGraph2_Tenant',\n                                        variable: 'AZURE_CLI_TEST_DEV_SP_TENANT')]) {\n                  sh \"./scripts/jenkins_live_test.sh ${name}\"\n                }}\n              }\n            }\n          }\n\n          // Add performance test tasks\n          def platforms = ['perf-ubuntu-a0', 'perf-ubuntu-ds1']\n          for (int i = 0; i < platforms.size(); i++) {\n            platform = platforms.get(i)\n            test_tasks[\"Performance Test: ${platform}\"] = perf_closure(platform)\n          }\n\n          test_tasks.failFast = false\n          parallel test_tasks"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "agent": {
            "type": "none"
          },
          "triggers": {
            "triggers": [
              {
                "name": "cron",
                "arguments": [
                  {
                    "isLiteral": true,
                    "value": "0 3 * * *"
                  }
                ]
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "monostream/helmi",
      "repo_url": "https://github.com/monostream/helmi",
      "html_url_jenkinsfile": "https://github.com/monostream/helmi/blob/d9c6208b155d7b03e614a50e65566cfce7165553/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/126194239/git/blobs/c60799bdeee5d9bb2201041a08ce2c3f741bf5a3",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Checkout",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "gitCheckout",
                      "arguments": []
                    },
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "versionNumber = VersionNumber(skipFailedBuilds: true, versionNumberString: '${BUILD_DATE_FORMATTED, \\\"yy\\\"}.${BUILD_WEEK}.${BUILDS_THIS_WEEK}')\n                    gitCommit = gitCommit()\n                    shortCommit = gitCommit.take(7)\n                    gitCommitMessage = sh returnStdout: true, script: 'git log -1 --pretty=%B HEAD | xargs echo -n'\n                    currentBuild.displayName = versionNumber\n                    if (gitCommitMessage) {\n                        currentBuild.description = gitCommitMessage\n                    } else {\n                        currentBuild.description = BRANCH_NAME + ' / ' + shortCommit\n                    }"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": false,
                            "value": "\"echo 'Branch=${BRANCH_NAME}' >> version.properties\""
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": false,
                            "value": "\"echo 'SHA1=${gitCommit}' >> version.properties\""
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": false,
                            "value": "\"echo 'Version=${versionNumber}' >> version.properties\""
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Build",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "retry",
                      "arguments": {
                        "isLiteral": true,
                        "value": 2
                      },
                      "children": [
                        {
                          "name": "script",
                          "arguments": [
                            {
                              "key": "scriptBlock",
                              "value": {
                                "isLiteral": true,
                                "value": "helmiImage = docker.build('helmi', \"--label 'com.monostream.image.branch=${BRANCH_NAME}' --label 'com.monostream.image.sha1=${gitCommit}' --label 'com.monostream.image.version=${versionNumber}' --no-cache --pull --squash .\")"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Unit Test",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "docker.image('golang:alpine').inside(\"-v '${WORKSPACE}:/go/src/github.com/monostream/helmi/' -u root\") {\n                        sh 'apk add --no-cache --update git'\n                        sh '''\n                        cd /go/src/github.com/monostream/helmi/\n                        go get github.com/jstemmer/go-junit-report\n                        go test -v ./pkg/* | go-junit-report > report.xml\n                        '''\n                    }"
                          }
                        }
                      ]
                    },
                    {
                      "name": "junit",
                      "arguments": [
                        {
                          "key": "testResults",
                          "value": {
                            "isLiteral": true,
                            "value": "report.xml"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Push to ECR",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "retry",
                      "arguments": {
                        "isLiteral": true,
                        "value": 2
                      },
                      "children": [
                        {
                          "name": "script",
                          "arguments": [
                            {
                              "key": "scriptBlock",
                              "value": {
                                "isLiteral": true,
                                "value": "docker.image('monostream/helmi') {\n                            parallel(\n                                    \"${BRANCH_NAME}\": {\n                                        if (BRANCH_NAME == 'develop') {\n                                            helmiImage.push(\"${versionNumber}-dev\")\n                                        }\n                                        if (BRANCH_NAME == 'master') {\n                                            helmiImage.push(\"${versionNumber}\")\n                                        }\n                                    },\n                                    'latest': {\n                                        helmiImage.push()\n                                    },\n                                    failFast: true\n                            )\n                        }"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "expression",
                    "arguments": [
                      {
                        "key": "scriptBlock",
                        "value": {
                          "isLiteral": true,
                          "value": "BRANCH_NAME == 'master' || BRANCH_NAME == 'develop'"
                        }
                      }
                    ]
                  }
                ]
              }
            },
            {
              "name": "Artefact",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def Artefacts = ['catalog', 'helm', 'helmi']\n                    helmiImage.inside {\n                        for (int i = 0; i < Artefacts.size(); ++i) {\n                            sh \"cp -rf /app/${Artefacts[i]} ${WORKSPACE}\"\n                            archive \"${Artefacts[i]}\"\n                        }\n                    }\n                    archive \"version.properties\""
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "post": {
            "conditions": [
              {
                "condition": "always",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "withChownWorkspace",
                      "arguments": []
                    },
                    {
                      "name": "deleteDir",
                      "arguments": []
                    }
                  ]
                }
              }
            ]
          },
          "agent": {
            "type": "node",
            "arguments": [
              {
                "key": "label",
                "value": {
                  "isLiteral": true,
                  "value": "docker"
                }
              }
            ]
          },
          "options": {
            "options": [
              {
                "name": "buildDiscarder",
                "arguments": [
                  {
                    "name": "logRotator",
                    "arguments": [
                      {
                        "key": "numToKeepStr",
                        "value": {
                          "isLiteral": true,
                          "value": "15"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "name": "skipDefaultCheckout",
                "arguments": []
              },
              {
                "name": "skipStagesAfterUnstable",
                "arguments": []
              },
              {
                "name": "timeout",
                "arguments": [
                  {
                    "key": "time",
                    "value": {
                      "isLiteral": true,
                      "value": 10
                    }
                  },
                  {
                    "key": "unit",
                    "value": {
                      "isLiteral": true,
                      "value": "MINUTES"
                    }
                  }
                ]
              },
              {
                "name": "timestamps",
                "arguments": []
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "tikalk/tikal-pipelib-touchstone",
      "repo_url": "https://github.com/tikalk/tikal-pipelib-touchstone",
      "html_url_jenkinsfile": "https://github.com/tikalk/tikal-pipelib-touchstone/blob/9702e3e00656ff10c371313c86ef8c5ce7cf5b70/examples/pipelineForce/starWarsSequence/parallelMavenTests/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/108547217/git/blobs/2b0ae8ead5ab964594bb663e64ee2e8aed9f98d9",
      "jenkins_pipeline": [
        {
          "error": "Invalid option type \"ansiColor\". Valid option types: [authorizationMatrix, buildDiscarder, catchError, checkoutToSubdirectory, disableConcurrentBuilds, disableResume, durabilityHint, gitLabConnection, gitlabBuilds, gitlabCommitStatus, overrideIndexTriggers, retry, script, skipDefaultCheckout, skipStagesAfterUnstable, timeout, timestamps, waitUntil, withContext, withCredentials, withEnv, ws] @ line 6, column 9."
        }
      ]
    },
    {
      "full_repo_name": "de-jcup/eclipse-jenkins-editor",
      "repo_url": "https://github.com/de-jcup/eclipse-jenkins-editor",
      "html_url_jenkinsfile": "https://github.com/de-jcup/eclipse-jenkins-editor/blob/14b2170be62e4ed94f1673a7171b1e3bfdbd7814/jenkins-editor-other/testscripts/declarative-full/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/104872758/git/blobs/476d36de3384d917aa8c1cea23a1b337a58620d1",
      "jenkins_pipeline": [
        {
          "error": [
            "No steps specified for branch @ line 192, column 18.",
            "No steps specified for branch @ line 196, column 18.",
            "No steps specified for branch @ line 200, column 12.",
            "No steps specified for branch @ line 204, column 19.",
            "No steps specified for branch @ line 208, column 18.",
            "Tool type \"maven\" does not have an install of \"apache-maven-3.0.1\" configured - did you mean \"Jenkins_maven\"? @ line 29, column 16."
          ]
        }
      ]
    },
    {
      "full_repo_name": "santech-org/studio",
      "repo_url": "https://github.com/santech-org/studio",
      "html_url_jenkinsfile": "https://github.com/santech-org/studio/blob/1cef42c5d39a1662ba70a519b8f97b26bed0eb09/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/131020760/git/blobs/bd5d3aedebb351f9d5d7899ffc5664eceb63cacf",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "pull build image",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "notify('INPROGRESS')\n          imgNode.pull()"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Checkout",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "checkout",
                      "arguments": [
                        {
                          "key": "scm",
                          "value": {
                            "isLiteral": false,
                            "value": "${scm}"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "build in docker",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def deps = [\n            \"core\",\n            \"common\",\n            \"websocket\",\n            \"angular-analytics\",\n            \"angular-platform\",\n            \"angular-common\",\n            \"angular-websocket\",\n            \"angular-i18n\",\n            \"analytics-core\",\n            \"analytics-integration\"]\n\n          imgNode.inside(\"--privileged --cpus=3\") {\n            withCredentials([[\n              $class: 'StringBinding',\n              credentialsId: 'npm-santechdev',\n              variable: 'NPM_TOKEN'\n            ]]) {\n\n              stage('prepare npm') {\n                configFileProvider([configFile(fileId: 'npmrc', variable: 'NPMRC')]) {\n                  sh 'cp $NPMRC ~/.npmrc'\n                }\n              }\n\n              stage('install') {\n                ansiColor('xterm') {\n                  sh \"yarn\"\n                }\n              }\n\n              stage('lint') {\n                ansiColor('xterm') {\n                  sh \"yarn run lint\"\n                }\n                if('UNSTABLE' == currentBuild?.result) {\n                  notify('FAILED')\n                }\n              }\n\n              stage('build') {\n                ansiColor('xterm') {\n                  sh \"yarn run build\"\n                }\n                if('UNSTABLE' == currentBuild?.result) {\n                  notify('FAILED')\n                }\n              }\n\n              stage('test') {\n                ansiColor('xterm') {\n                  sh \"yarn run test\"\n                }\n                if('UNSTABLE' == currentBuild?.result) {\n                  notify('FAILED')\n                }\n              }\n\n              stage('publish') {\n                if (env.BRANCH_NAME == 'master') {\n                  runParallel(deps, '../../scripts/publish.sh')\n                } else {\n                  echo 'skipping publish as not on master'\n                }\n              }\n            }\n          }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "post": {
            "conditions": [
              {
                "condition": "always",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "deleteDir",
                      "arguments": []
                    }
                  ]
                }
              }
            ]
          },
          "environment": [
            {
              "key": "NPM_CONFIG_LOGLEVEL",
              "value": {
                "isLiteral": true,
                "value": "warn"
              }
            }
          ],
          "agent": {
            "type": "any"
          },
          "options": {
            "options": [
              {
                "name": "disableConcurrentBuilds",
                "arguments": []
              },
              {
                "name": "timeout",
                "arguments": [
                  {
                    "key": "time",
                    "value": {
                      "isLiteral": true,
                      "value": 30
                    }
                  },
                  {
                    "key": "unit",
                    "value": {
                      "isLiteral": true,
                      "value": "MINUTES"
                    }
                  }
                ]
              },
              {
                "name": "buildDiscarder",
                "arguments": [
                  {
                    "name": "logRotator",
                    "arguments": [
                      {
                        "key": "numToKeepStr",
                        "value": {
                          "isLiteral": true,
                          "value": "5"
                        }
                      },
                      {
                        "key": "artifactNumToKeepStr",
                        "value": {
                          "isLiteral": true,
                          "value": "5"
                        }
                      }
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "aag09/azurecli",
      "repo_url": "https://github.com/aag09/azurecli",
      "html_url_jenkinsfile": "https://github.com/aag09/azurecli/blob/30c98a75c36c02a657f1753ff5c48502dc7f7933/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/107339850/git/blobs/9a7a60e3e7cb9ba28680846052ae77839260a416",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Build",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "checkout",
                      "arguments": [
                        {
                          "key": "scm",
                          "value": {
                            "isLiteral": false,
                            "value": "${scm}"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "./scripts/jenkins_build.sh"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "./scripts/jenkins_archive.sh"
                          }
                        }
                      ]
                    },
                    {
                      "name": "deleteDir",
                      "arguments": []
                    }
                  ]
                }
              ],
              "agent": {
                "type": "label",
                "argument": {
                  "isLiteral": true,
                  "value": "linux-build"
                }
              },
              "post": {
                "conditions": [
                  {
                    "condition": "always",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "deleteDir",
                          "arguments": []
                        }
                      ]
                    }
                  }
                ]
              }
            },
            {
              "name": "Test",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def test_tasks = [:]\n\n          // Add live test tasks\n          def modules = ['acs', 'keyvault', 'storage', 'sql', 'role', 'vm', 'network']\n          for (int i = 0; i < modules.size(); ++i) {\n            def name = modules.get(i)\n            test_tasks[\"Live Test: ${name}\"] = {\n              node('linux-build') {\n                checkout scm\n                withCredentials([[$class: 'UsernamePasswordMultiBinding', \n                                  credentialsId: 'AzureSDKADGraph2',\n                                  usernameVariable: 'AZURE_CLI_TEST_DEV_SP_NAME', \n                                  passwordVariable: 'AZURE_CLI_TEST_DEV_SP_PASSWORD']]) {\n                withCredentials([string(credentialsId: 'AzureSDKADGraph2_Tenant',\n                                        variable: 'AZURE_CLI_TEST_DEV_SP_TENANT')]) {\n                  sh \"./scripts/jenkins_live_test.sh ${name}\"\n                }}\n              }\n            }\n          }\n\n          // Add performance test tasks\n          def platforms = ['perf-ubuntu-a0', 'perf-ubuntu-ds1']\n          for (int i = 0; i < platforms.size(); i++) {\n            platform = platforms.get(i)\n            test_tasks[\"Performance Test: ${platform}\"] = perf_closure(platform)\n          }\n\n          test_tasks.failFast = false\n          parallel test_tasks"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "agent": {
            "type": "none"
          },
          "triggers": {
            "triggers": [
              {
                "name": "cron",
                "arguments": [
                  {
                    "isLiteral": true,
                    "value": "0 3 * * *"
                  }
                ]
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "DonaldSimpson/demo",
      "repo_url": "https://github.com/DonaldSimpson/demo",
      "html_url_jenkinsfile": "https://github.com/DonaldSimpson/demo/blob/49218a9cbf2d3a890b04d9e6f2dd65c1114870c1/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/111399834/git/blobs/a75069ad30a63cb8b58e1c479d3a7ae75f148c65",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "first stage",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "sleep 10"
                          }
                        }
                      ]
                    },
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "We're not doing anything particularly special here."
                          }
                        }
                      ]
                    },
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "Hello World etc."
                          }
                        }
                      ]
                    },
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": false,
                            "value": "\"FOO is ${FOO}\""
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "sleep 5"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "post": {
                "conditions": [
                  {
                    "condition": "success",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "echo",
                          "arguments": [
                            {
                              "key": "message",
                              "value": {
                                "isLiteral": true,
                                "value": "Only when we haven't failed running the first stage"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  },
                  {
                    "condition": "failure",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "echo",
                          "arguments": [
                            {
                              "key": "message",
                              "value": {
                                "isLiteral": true,
                                "value": "Only when we fail running the first stage."
                              }
                            }
                          ]
                        }
                      ]
                    }
                  }
                ]
              }
            },
            {
              "name": "second stage",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "This time, we could do something more interesting than a quick sleep..."
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "sleep 5"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "printenv"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "sleep 5"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "third stage",
              "branches": [
                {
                  "name": "one",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "I'm on the first branch!"
                          }
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "two",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "I'm on the second branch!"
                          }
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "three",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "I'm on the third branch!"
                          }
                        }
                      ]
                    },
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "But you probably guessed that already."
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "testing",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def browsers = ['chrome', 'firefox', 'vivaldi', 'safari', 'tor']\n                    for (int i = 0; i < browsers.size(); ++i) {\n                        echo \"Testing the ${browsers[i]} browser\"\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "post": {
            "conditions": [
              {
                "condition": "always",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "deleteDir",
                      "arguments": []
                    }
                  ]
                }
              },
              {
                "condition": "success",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "echo Yay for this, sending an email..."
                          }
                        }
                      ]
                    },
                    {
                      "name": "mail",
                      "arguments": [
                        {
                          "key": "from",
                          "value": {
                            "isLiteral": true,
                            "value": "donaldsimpson@gmail.com"
                          }
                        },
                        {
                          "key": "to",
                          "value": {
                            "isLiteral": true,
                            "value": "jpikoulas@technasthai.co.uk"
                          }
                        },
                        {
                          "key": "subject",
                          "value": {
                            "isLiteral": false,
                            "value": "\"Build ${BUILD_NUMBER} of the ${JOB_NAME} job has passed.\""
                          }
                        },
                        {
                          "key": "body",
                          "value": {
                            "isLiteral": true,
                            "value": "Nothing to see here, but there could be some really interesting info."
                          }
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "condition": "failure",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "echo Boo to that, sending an email..."
                          }
                        }
                      ]
                    },
                    {
                      "name": "mail",
                      "arguments": [
                        {
                          "key": "from",
                          "value": {
                            "isLiteral": true,
                            "value": "donaldsimpson@gmail.com"
                          }
                        },
                        {
                          "key": "to",
                          "value": {
                            "isLiteral": true,
                            "value": "jpikoulas@technasthai.co.uk"
                          }
                        },
                        {
                          "key": "subject",
                          "value": {
                            "isLiteral": false,
                            "value": "\"Build ${BUILD_NUMBER} of the ${JOB_NAME} job has failed.\""
                          }
                        },
                        {
                          "key": "body",
                          "value": {
                            "isLiteral": true,
                            "value": "Nothing to see here, but an error message may be useful."
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          },
          "environment": [
            {
              "key": "FOO",
              "value": {
                "isLiteral": true,
                "value": "BAR"
              }
            }
          ],
          "agent": {
            "type": "label",
            "argument": {
              "isLiteral": true,
              "value": ""
            }
          },
          "options": {
            "options": [
              {
                "name": "buildDiscarder",
                "arguments": [
                  {
                    "name": "logRotator",
                    "arguments": [
                      {
                        "key": "numToKeepStr",
                        "value": {
                          "isLiteral": true,
                          "value": "10"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "name": "retry",
                "arguments": [
                  {
                    "isLiteral": true,
                    "value": 3
                  }
                ]
              },
              {
                "name": "timeout",
                "arguments": [
                  {
                    "key": "time",
                    "value": {
                      "isLiteral": true,
                      "value": 60
                    }
                  },
                  {
                    "key": "unit",
                    "value": {
                      "isLiteral": true,
                      "value": "MINUTES"
                    }
                  }
                ]
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "wkonsek/jenkins-declarative-pipeline",
      "repo_url": "https://github.com/wkonsek/jenkins-declarative-pipeline",
      "html_url_jenkinsfile": "https://github.com/wkonsek/jenkins-declarative-pipeline/blob/1bda1450bc9a07c1aa49630c01bb3d83625c0cdc/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/120599874/git/blobs/c18f3aeb5fe2d095e7fc0097895999293c183523",
      "jenkins_pipeline": [
        {
          "error": "unable to resolve class slack.Slack\n @ line 1, column 1."
        }
      ]
    },
    {
      "full_repo_name": "LCNetworks/LC_AP_AuthAPI",
      "repo_url": "https://github.com/LCNetworks/LC_AP_AuthAPI",
      "html_url_jenkinsfile": "https://github.com/LCNetworks/LC_AP_AuthAPI/blob/c2adf7dc45e04f28ddcc56ea4918a2b4395a6db5/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/130298564/git/blobs/08507c39fefe32c3e84398240e32b901a30393b4",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Checkout",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def gitPreCommit = checkoutProject()\n                    // custom build display name, add git commit reversion\n                    currentBuild.displayName = displayName()\n                    echo \"Start to build ${currentBuild.displayName}\"\n\n                    javaModules = ['config-server']"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "agent": {
                "type": "any"
              }
            },
            {
              "name": "Build",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "echo \"Start to excute gradlew.sh \"\n                        if (javaModules.size() > 0) {\n                            sh \"gradle\"\n                        }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "agent": {
                "type": "any"
              }
            },
            {
              "name": "Docker",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "buildDockerImg(javaModules, env.project)"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "agent": {
                "type": "any"
              },
              "when": {
                "conditions": [
                  {
                    "name": "anyOf",
                    "children": [
                      {
                        "name": "branch",
                        "arguments": {
                          "isLiteral": true,
                          "value": "master"
                        }
                      },
                      {
                        "name": "branch",
                        "arguments": {
                          "isLiteral": true,
                          "value": "release"
                        }
                      }
                    ]
                  }
                ]
              }
            },
            {
              "name": "Artifact",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "archiveArtifacts",
                      "arguments": [
                        {
                          "key": "artifacts",
                          "value": {
                            "isLiteral": true,
                            "value": "*.yml"
                          }
                        }
                      ]
                    },
                    {
                      "name": "artifactBuildResults",
                      "arguments": [
                        {
                          "isLiteral": false,
                          "value": "${javaModules}"
                        },
                        {
                          "isLiteral": false,
                          "value": "${[]}"
                        }
                      ]
                    }
                  ]
                }
              ],
              "agent": {
                "type": "any"
              },
              "when": {
                "conditions": [
                  {
                    "name": "branch",
                    "arguments": {
                      "isLiteral": true,
                      "value": "master"
                    }
                  }
                ]
              }
            },
            {
              "name": "Deploy",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def host = env.devSvrHost\n                    def pass = env.devSvrPasswd\n                    def user = env.devSvrUser\n                    def names = javaModules.join(' ')\n                    if (!names.isEmpty()) {\n                        echo \"Deploy services ${names}\"\n                        sh \"sshpass -p '${pass}' ssh ${user}@${host} 'cd /mnt/elements&&sudo docker-compose pull --parallel ${names}'\"\n                        sh \"sshpass -p '${pass}' ssh ${user}@${host} 'cd /mnt/elements&&sudo docker-compose up --no-deps -d ${names}'\"\n                        slackSend message: \"$JOB_NAME: Restarting ${names} on test.smartfleet.cloud.\"\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "agent": {
                "type": "label",
                "argument": {
                  "isLiteral": true,
                  "value": "office.j3r0lin.com"
                }
              },
              "when": {
                "conditions": [
                  {
                    "name": "branch",
                    "arguments": {
                      "isLiteral": true,
                      "value": "release"
                    }
                  }
                ]
              }
            },
            {
              "name": "Jira",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "step",
                      "arguments": [
                        {
                          "key": "delegate",
                          "value": {
                            "isLiteral": false,
                            "value": "[$class       : 'hudson.plugins.jira.JiraIssueUpdater',\n                      issueSelector: [$class: 'hudson.plugins.jira.selector.DefaultIssueSelector'],\n                      scm          : scm]"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "agent": {
                "type": "node",
                "arguments": [
                  {
                    "key": "label",
                    "value": {
                      "isLiteral": true,
                      "value": "office.j3r0lin.com"
                    }
                  },
                  {
                    "key": "customWorkspace",
                    "value": {
                      "isLiteral": true,
                      "value": "/usr/local/elements"
                    }
                  }
                ]
              },
              "when": {
                "conditions": [
                  {
                    "name": "branch",
                    "arguments": {
                      "isLiteral": true,
                      "value": "develop"
                    }
                  }
                ]
              }
            }
          ],
          "post": {
            "conditions": [
              {
                "condition": "always",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "build done"
                          }
                        }
                      ]
                    },
                    {
                      "name": "slackMessage",
                      "arguments": []
                    }
                  ]
                }
              }
            ]
          },
          "environment": [
            {
              "key": "version",
              "value": {
                "isLiteral": true,
                "value": "v1.0.0"
              }
            },
            {
              "key": "devSvrPasswd",
              "value": {
                "isLiteral": true,
                "value": "64391099@inhand"
              }
            },
            {
              "key": "devSvrHost",
              "value": {
                "isLiteral": true,
                "value": "10.5.16.213"
              }
            },
            {
              "key": "devSvrUser",
              "value": {
                "isLiteral": true,
                "value": "inhand"
              }
            },
            {
              "key": "project",
              "value": {
                "isLiteral": true,
                "value": "elements"
              }
            }
          ],
          "agent": {
            "type": "none"
          },
          "options": {
            "options": [
              {
                "name": "disableConcurrentBuilds",
                "arguments": []
              },
              {
                "name": "skipDefaultCheckout",
                "arguments": []
              },
              {
                "name": "buildDiscarder",
                "arguments": [
                  {
                    "name": "logRotator",
                    "arguments": [
                      {
                        "key": "numToKeepStr",
                        "value": {
                          "isLiteral": true,
                          "value": "5"
                        }
                      }
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "cscart/docs",
      "repo_url": "https://github.com/cscart/docs",
      "html_url_jenkinsfile": "https://github.com/cscart/docs/blob/c276f075be849348a6acbe01af5f8c86969adf61/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/46800289/git/blobs/4e97d55b18430d92b1b5c215d96ff48153f36921",
      "jenkins_pipeline": [
        {
          "error": "Jenkinsfile content '/**\n * The pipeline to automate the process of building documents with Sphinx and deploying them to the server.\n *\n * The repository where documents are stored is to have the specific structure.\n *\n *     Single language (English) documents:\n *     /\n *     âââ document_1.rst\n *     âââ ...\n *     âââ document_n.rst\n *     âââ .hostinfo\n *     âââ conf.py\n *\n *     Multi-language documents:\n *     /\n *     âââ language_1\n *     â   âââ document_1.rst\n *     â   âââ ...\n *     â   âââ document_n.rst\n *     â   âââ .hostinfo\n *     â   âââ conf.py\n *     âââ ...\n *     âââ language_n\n *         âââ document_1.rst\n *         âââ ...\n *         âââ document_n.rst\n *         âââ .hostinfo\n *         âââ conf.py\n *\n * Special files:\n *     conf.py   - Sphinx configuration file. Only directories containing this file will be built.\n *     .hostinfo - Deployment information file. It contains SSH connection and deployment details in the form of\n *                     hostname[:port]\n *                     [deployment directory]\n *                 When no `port` is specified, 22 will be used.\n *                 When no `deployment directory` is specified, /var/www/html/hostname will be used.\n *                 E.g.:\n *                     1. Content of /en/.hostinfo is\n *                            docs.example.com:35022\n *                        Documents from /en/ directory will be uploaded to docs.example.com,\n *                        port 35022 will be used to connect via SSH,\n *                        documents will be deployed to /var/www/html/docs.example.com.\n *                     2. Content of /de/.hostinfo is\n *                            docs.example.de\n *                        Documents from /de/ directory will be uploaded to docs.example.de,\n *                        port 22 will be used to connect via SSH,\n *                        documents will be deployed to /var/www/html/docs.example.de.\n *                     3. Content of /no/.hostinfo is \n *                            docs.example.no\n *                            /var/www/html/example.no/documents\n *                        Documents from /no/ directory will be uploaded to docs.example.no,\n *                        port 22 will be used to connect via SSH,\n *                        documents will be deployed to /var/www/html/example.no/documents.\n *\n *                 Credentials have to be configured in Jenkins to deploy documents to the host:\n *                     -- SSH Agent Plugin (http://wiki.jenkins-ci.org/display/JENKINS/SSH+Agent+Plugin) has to be installed.\n *                     -- Credentials' Kind has to be set to `SSH Username with private key`.\n *                     -- Credentials' ID   has to be set to `deploy-docs`.\n */\nnode {\n\n    /**\n     * @var String sphinxConfFile Name of the Sphinx configuration file\n     */\n    def sphinxConfFile = 'conf.py'\n\n    /**\n     * @var ArrayList languages Languages in the current branch to build documents for\n     */\n    def languages = []\n\n    /**\n     * @var Map actionsToParallel Closures to build single languages\n     */\n    def actionsToParallel = [:]\n\n    stage('Checking out latest changes') {\n\n        checkout scm\n    }\n\n    stage('Collecting languages to build') {\n\n        // Based on the used branch, documents are stored\n        // either in the root or in the %langCode% directories\n        if (fileExists(sphinxConfFile)) {\n            languages << [\n                langCode: 'en',\n                srcDir: '.'\n            ]\n        } else {\n            def repoDirs = getDirsList(env.WORKSPACE)\n            for (i = 0; i < repoDirs.size(); i++) {\n                // check against sphinx config file\n                if (fileExists(\"${repoDirs[i]}/${sphinxConfFile}\")) {\n                    languages << [\n                        langCode: repoDirs[i],\n                        srcDir: repoDirs[i]\n                    ]\n                }\n            }\n        }\n    }\n\n    stage('Building languages') {\n\n        for (i = 0; i < languages.size(); i++) {\n            actionsToParallel[languages[i].langCode] = getBuildLanguageClosure(languages[i], env.WORKSPACE, env.BRANCH_NAME)\n        }\n\n        parallel(actionsToParallel)\n    }\n}\n\n/**\n * Gets directories in a directory.\n *\n * @param String dirToList Directory to list directories from\n *\n * @return ArrayList\n */\ndef getDirsList(dirToList) {\n\n    def dirsList = []\n\n    dir(dirToList) {\n\n        dirsList = sh(\n            script: \"ls -1d */ | cut -d'/' -f1\",\n            returnStdout: true\n        ).trim().split(\"\\n\")\n    }\n\n    return dirsList\n}\n\n/**\n * Provides the closure to build single language.\n *\n * @param Map    language     Language info\n * @param String workspaceDir Primary workspace directory\n * @param String branchName   Branch where build is performing\n *\n * @return Closure\n */\ndef getBuildLanguageClosure(language, workspaceDir, branchName) {\n\n    return {\n        node {\n            def buildDir       = \"_build/${language.langCode}/${branchName}\"\n            def artifactName   = \"${language.langCode}-${branchName}.tgz\"\n            def authIdentifier = 'deploy-docs'\n            def options        = '-aEq'\n\n            dir(\"${workspaceDir}/${language.srcDir}\") {\n\n                if (language.langCode == \"ru\") {\n                    options = '-b unihtml -aEq'\n                }\n                // build and compress\n                sh(\n                    script: \"sphinx-build ${options} . ${buildDir}\"\n                )\n                sh(\n                    script: \"tar -czf ${artifactName} ${buildDir}/*\"\n                )\n\n                archiveArtifacts \"${artifactName}\"\n\n                // deploy to remote host\n                if (fileExists('.hostinfo')) {\n                    def hostInfo = getHostInfo('.hostinfo')\n\n                    deployArtifactToHost(artifactName, hostInfo, authIdentifier)\n                }\n\n                // delete directory where docs were built\n                dir(buildDir) {\n                    deleteDir()\n                }\n            }\n        }\n    }\n}\n\n/**\n * Provides a host connection and deployment information.\n *\n * @param String infoFile File with host information\n *\n * @return Map Hostname, port, deploy directory\n */\ndef getHostInfo(infoFile) {\n\n    def hostAndDir = readFile(infoFile).trim().split(\"[\\\\r\\\\n]+\")\n    def hostAndPort = hostAndDir[0].trim().split(':')\n    \n    def hostInfo = [\n        name: hostAndPort[0],\n        port: 22,\n        dir: \"/var/www/html/${hostAndPort[0]}\"\n    ]\n\n    if (hostAndDir.size() > 1) {\n        hostInfo.dir = hostAndDir[1]\n    }\n\n    if (hostAndPort.size() > 1) {\n        hostInfo.port = hostAndPort[1]\n    }\n\n    return hostInfo\n}\n\n/**\n * Uploads and unpacks artifact to the remote host.\n *\n * @param String artifactName   Archive with an artifact\n * @param Map    hostInfo       Host connection and deployment information\n * @param String authIdentifier Auth credentials for remote host specified in ssh-agent plugin\n */\ndef deployArtifactToHost(artifactName, hostInfo, authIdentifier) {\n\n    def tmpDir = '/tmp'\n    def ssh = \"ssh ${hostInfo.name} -p ${hostInfo.port}\"\n    \n    sshagent(credentials: [authIdentifier]) {\n\n        sh(\n            script: \"scp -P ${hostInfo.port} ${artifactName} ${hostInfo.name}:${tmpDir}\"\n        )\n        sh(\n            script: \"${ssh} mkdir -p ${hostInfo.dir}\"\n        )\n        sh(\n            script: \"${ssh} tar --strip-components 2 -xzf ${tmpDir}/${artifactName} -C ${hostInfo.dir}\"\n        )\n        sh(\n            script: \"${ssh} rm ${tmpDir}/${artifactName}\"\n        )\n    }\n}\n' did not contain the 'pipeline' step"
        }
      ]
    },
    {
      "full_repo_name": "tsadoklf/use-jenkins-library",
      "repo_url": "https://github.com/tsadoklf/use-jenkins-library",
      "html_url_jenkinsfile": "https://github.com/tsadoklf/use-jenkins-library/blob/d27ab8f12f30a892994be754292ddd1f9902347b/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/126946665/git/blobs/00d82170f2319d92284510122288ea14e0737648",
      "jenkins_pipeline": [
        {
          "error": "unable to resolve class com.momentum.Utilities\n @ line 2, column 1."
        }
      ]
    },
    {
      "full_repo_name": "zhangcl2002/cicdfactory20170813",
      "repo_url": "https://github.com/zhangcl2002/cicdfactory20170813",
      "html_url_jenkinsfile": "https://github.com/zhangcl2002/cicdfactory20170813/blob/917768feb3b734af5e38e220c1bbaade9dde9cf9/aegonthtf-cicd-factory2/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/100170244/git/blobs/b4aa4fe2454e1fa8cb5caf79219e7ed929a9035c",
      "jenkins_pipeline": [
        {
          "error": "${params.BRANCH} cannot be used as a value directly. Did you mean \"${params.BRANCH}\"? @ line 20, column 18."
        }
      ]
    },
    {
      "full_repo_name": "Raag007/JenkinsCI-CD",
      "repo_url": "https://github.com/Raag007/JenkinsCI-CD",
      "html_url_jenkinsfile": "https://github.com/Raag007/JenkinsCI-CD/blob/c44726286cfe472aa868e4d4b67e50cb0d9652ab/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/129139339/git/blobs/378b7ddf066dce52e2036bcd7a2cc7bedb760b04",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Build with unit testing",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "echo 'Pulling...' + env.BRANCH_NAME\n                    def mvnHome = tool 'Maven 3.3.9'\n                    if (isUnix()) {\n                        def targetVersion = getDevVersion()\n                        print 'target build version...'\n                        print targetVersion\n                        sh \"'${mvnHome}/bin/mvn' -Dintegration-tests.skip=true -Dbuild.number=${targetVersion} clean package\"\n                        def pom = readMavenPom file: 'pom.xml'\n                        // get the current development version \n                        developmentArtifactVersion = \"${pom.version}-${targetVersion}\"\n                        print pom.version\n                        // execute the unit testing and collect the reports\n                        junit '**//*target/surefire-reports/TEST-*.xml'\n                        archive 'target*//*.jar'\n                    } else {\n                        bat(/\"${mvnHome}\\bin\\mvn\" -Dintegration-tests.skip=true clean package/)\n                        def pom = readMavenPom file: 'pom.xml'\n                        print pom.version\n                        junit '**//*target/surefire-reports/TEST-*.xml'\n                        archive 'target*//*.jar'\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Integration tests",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def mvnHome = tool 'Maven 3.3.9'\n                    if (isUnix()) {\n                        // just to trigger the integration test without unit testing\n                        sh \"'${mvnHome}/bin/mvn'  verify -Dunit-tests.skip=true\"\n                    } else {\n                        bat(/\"${mvnHome}\\bin\\mvn\" verify -Dunit-tests.skip=true/)\n                    }"
                          }
                        }
                      ]
                    },
                    {
                      "name": "cucumber",
                      "arguments": [
                        {
                          "key": "buildStatus",
                          "value": {
                            "isLiteral": true,
                            "value": null
                          }
                        },
                        {
                          "key": "fileIncludePattern",
                          "value": {
                            "isLiteral": true,
                            "value": "**/cucumber.json"
                          }
                        },
                        {
                          "key": "jsonReportDirectory",
                          "value": {
                            "isLiteral": true,
                            "value": "target"
                          }
                        },
                        {
                          "key": "sortingMethod",
                          "value": {
                            "isLiteral": true,
                            "value": "ALPHABETICAL"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Sonar scan execution",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def mvnHome = tool 'Maven 3.3.9'\n                    withSonarQubeEnv {\n                     \n                        sh \"'${mvnHome}/bin/mvn'  verify sonar:sonar -Dintegration-tests.skip=true -Dmaven.test.failure.ignore=true\"\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Sonar scan result check",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "timeout",
                      "arguments": [
                        {
                          "key": "time",
                          "value": {
                            "isLiteral": true,
                            "value": 2
                          }
                        },
                        {
                          "key": "unit",
                          "value": {
                            "isLiteral": true,
                            "value": "MINUTES"
                          }
                        }
                      ],
                      "children": [
                        {
                          "name": "retry",
                          "arguments": {
                            "isLiteral": true,
                            "value": 3
                          },
                          "children": [
                            {
                              "name": "script",
                              "arguments": [
                                {
                                  "key": "scriptBlock",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "def qg = waitForQualityGate()\n                            if (qg.status != 'OK') {\n                                error \"Pipeline aborted due to quality gate failure: ${qg.status}\"\n                            }"
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Development deploy approval and deployment",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "if (currentBuild.result == null || currentBuild.result == 'SUCCESS') {\n                        timeout(time: 3, unit: 'MINUTES') {\n                            // you can use the commented line if u have specific user group who CAN ONLY approve\n                            //input message:'Approve deployment?', submitter: 'it-ops'\n                            input message: 'Approve deployment?'\n                        }\n                        timeout(time: 2, unit: 'MINUTES') {\n                            //\n                            if (developmentArtifactVersion != null && !developmentArtifactVersion.isEmpty()) {\n                                // replace it with your application name or make it easily loaded from pom.xml\n                                def jarName = \"application-${developmentArtifactVersion}.jar\"\n                                echo \"the application is deploying ${jarName}\"\n                                // NOTE : CREATE your deployemnt JOB, where it can take parameters whoch is the jar name to fetch from jenkins workspace\n                                build job: 'ApplicationToDev', parameters: [[$class: 'StringParameterValue', name: 'jarName', value: jarName]]\n                                echo 'the application is deployed !'\n                            } else {\n                                error 'the application is not  deployed as development version is null!'\n                            }\n\n                        }\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "DEV sanity check",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sleep",
                      "arguments": [
                        {
                          "key": "time",
                          "value": {
                            "isLiteral": true,
                            "value": 45
                          }
                        }
                      ]
                    },
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "if (currentBuild.result == null || currentBuild.result == 'SUCCESS') {\n                        timeout(time: 1, unit: 'MINUTES') {\n                            script {\n                                def mvnHome = tool 'Maven 3.3.9'\n                                //NOTE : if u change the sanity test class name , change it here as well\n                                sh \"'${mvnHome}/bin/mvn' -Dtest=ApplicationSanityCheck_ITT surefire:test\"\n                            }\n\n                        }\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Release and publish artifact",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def mvnHome = tool 'Maven 3.3.9' //\n                    if (currentBuild.result == null || currentBuild.result == 'SUCCESS') {\n                        def v = getReleaseVersion()\n                        releasedVersion = v;\n                        if (v) {\n                            echo \"Building version ${v} - so released version is ${releasedVersion}\"\n                        }\n                        // jenkins user credentials ID which is transparent to the user and password change\n                        sshagent(['0000000-3b5a-454e-a8e6-c6b6114d36000']) {\n                            sh \"git tag -f v${v}\"\n                            sh \"git push -f --tags\"\n                        }\n                        sh \"'${mvnHome}/bin/mvn' -Dmaven.test.skip=true  versions:set  -DgenerateBackupPoms=false -DnewVersion=${v}\"\n                        sh \"'${mvnHome}/bin/mvn' -Dmaven.test.skip=true clean deploy\"\n\n                    } else {\n                        error \"Release is not possible. as build is not successful\"\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "branch",
                    "arguments": {
                      "isLiteral": true,
                      "value": "master"
                    }
                  }
                ]
              }
            },
            {
              "name": "Deploy to Acceptance",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "if (currentBuild.result == null || currentBuild.result == 'SUCCESS') {\n                        timeout(time: 3, unit: 'MINUTES') {\n                            //input message:'Approve deployment?', submitter: 'it-ops'\n                            input message: 'Approve deployment to UAT?'\n                        }\n                        timeout(time: 3, unit: 'MINUTES') {\n                            //  deployment job which will take the relasesed version\n                            if (releasedVersion != null && !releasedVersion.isEmpty()) {\n                                // make the applciation name for the jar configurable\n                                def jarName = \"application-${releasedVersion}.jar\"\n                                echo \"the application is deploying ${jarName}\"\n                                // NOTE : DO NOT FORGET to create your UAT deployment jar , check Job AlertManagerToUAT in Jenkins for reference\n                                // the deployemnt should be based into Nexus repo\n                                build job: 'AApplicationToACC', parameters: [[$class: 'StringParameterValue', name: 'jarName', value: jarName], [$class: 'StringParameterValue', name: 'appVersion', value: releasedVersion]]\n                                echo 'the application is deployed !'\n                            } else {\n                                error 'the application is not  deployed as released version is null!'\n                            }\n\n                        }\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "branch",
                    "arguments": {
                      "isLiteral": true,
                      "value": "master"
                    }
                  }
                ]
              }
            },
            {
              "name": "ACC E2E tests",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sleep",
                      "arguments": [
                        {
                          "key": "time",
                          "value": {
                            "isLiteral": true,
                            "value": 45
                          }
                        }
                      ]
                    },
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "if (currentBuild.result == null || currentBuild.result == 'SUCCESS') {\n                        timeout(time: 1, unit: 'MINUTES') {\n\n                            script {\n                                def mvnHome = tool 'Maven 3.3.9'\n                                // NOTE : if you change the test class name change it here as well\n                                sh \"'${mvnHome}/bin/mvn' -Dtest=ApplicationE2E surefire:test\"\n                            }\n\n                        }\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "branch",
                    "arguments": {
                      "isLiteral": true,
                      "value": "master"
                    }
                  }
                ]
              }
            }
          ],
          "post": {
            "conditions": [
              {
                "condition": "always",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "deleteDir",
                      "arguments": []
                    }
                  ]
                }
              },
              {
                "condition": "success",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sendEmail",
                      "arguments": {
                        "isLiteral": true,
                        "value": "Successful"
                      }
                    }
                  ]
                }
              },
              {
                "condition": "unstable",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sendEmail",
                      "arguments": {
                        "isLiteral": true,
                        "value": "Unstable"
                      }
                    }
                  ]
                }
              },
              {
                "condition": "failure",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sendEmail",
                      "arguments": {
                        "isLiteral": true,
                        "value": "Failed"
                      }
                    }
                  ]
                }
              }
            ]
          },
          "environment": [
            {
              "key": "EMAIL_RECIPIENTS",
              "value": {
                "isLiteral": true,
                "value": "mahmoud.romeh@test.com"
              }
            }
          ],
          "agent": {
            "type": "label",
            "argument": {
              "isLiteral": true,
              "value": "java8"
            }
          },
          "options": {
            "options": [
              {
                "name": "buildDiscarder",
                "arguments": [
                  {
                    "name": "logRotator",
                    "arguments": [
                      {
                        "key": "numToKeepStr",
                        "value": {
                          "isLiteral": true,
                          "value": "5"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "name": "timeout",
                "arguments": [
                  {
                    "key": "time",
                    "value": {
                      "isLiteral": true,
                      "value": 25
                    }
                  },
                  {
                    "key": "unit",
                    "value": {
                      "isLiteral": true,
                      "value": "MINUTES"
                    }
                  }
                ]
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "jhnotammake202015/raw-mvn",
      "repo_url": "https://github.com/jhnotammake202015/raw-mvn",
      "html_url_jenkinsfile": "https://github.com/jhnotammake202015/raw-mvn/blob/d9bfb3c4775f877aa1e643f590adb2a45a39c2f9/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/107461846/git/blobs/6d08f1e2d0f930d91b71c90c117ad8ea4d405b5c",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Init",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "header",
                      "arguments": {
                        "isLiteral": false,
                        "value": "\"Running ${env.BUILD_ID}, number ${env.BUILD_NUMBER} - ${env.BUILD_DISPLAY_NAME}\""
                      }
                    },
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": false,
                            "value": "${sh(script: 'env|sort', returnStdout: true)}"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Build",
              "parallel": [
                {
                  "name": "mvn clean install in parallel",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "header",
                          "arguments": {
                            "isLiteral": true,
                            "value": "Parallel running in vms slaves..."
                          }
                        },
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "uname -a"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ],
                  "agent": {
                    "type": "label",
                    "argument": {
                      "isLiteral": true,
                      "value": "vms"
                    }
                  }
                }
              ],
              "failFast": true
            },
            {
              "name": "Test",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "header",
                      "arguments": {
                        "isLiteral": true,
                        "value": "Testing.."
                      }
                    }
                  ]
                }
              ]
            },
            {
              "name": "Deploy",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "header",
                      "arguments": {
                        "isLiteral": true,
                        "value": "Deploying...."
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "post": {
            "conditions": [
              {
                "condition": "always",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "Finished"
                          }
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "condition": "failure",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": false,
                            "value": "\"with failure! ${currentBuild.result} | ${currentBuild.description}\""
                          }
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "condition": "success",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "Successful!"
                          }
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "condition": "unstable",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": false,
                            "value": "\"Unstable! ${currentBuild.result} | ${currentBuild.description}\""
                          }
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "condition": "aborted",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": false,
                            "value": "\"Aborted! ${currentBuild.result} | ${currentBuild.description}\""
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          },
          "agent": {
            "type": "any"
          }
        }
      }
    },
    {
      "full_repo_name": "godsake/dashboard",
      "repo_url": "https://github.com/godsake/dashboard",
      "html_url_jenkinsfile": "https://github.com/godsake/dashboard/blob/47acf863f8dfdb7188a34260f2ad1ccf72394043/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/106436923/git/blobs/831f0b277d47af982a19b4236eabebd73ac9ebda",
      "jenkins_pipeline": [
        {
          "error": [
            "Tool type \"jdk\" does not have an install of \"jdk8\" configured - did you mean \"null\"? @ line 92, column 21.",
            "Tool type \"maven\" does not have an install of \"Maven 3.5.0\" configured - did you mean \"Jenkins_maven\"? @ line 13, column 15.",
            "Tool type \"jdk\" does not have an install of \"jdk7\" configured - did you mean \"null\"? @ line 14, column 13."
          ]
        }
      ]
    },
    {
      "full_repo_name": "kangaroo-server/kangaroo",
      "repo_url": "https://github.com/kangaroo-server/kangaroo",
      "html_url_jenkinsfile": "https://github.com/kangaroo-server/kangaroo/blob/eb94d7399e41bf9b1c9b8a1330e09aa41d356e9f/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/56342003/git/blobs/800d71539b5a400bbf77f0a82557fe60d2d80f89",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "init",
              "branches": [
                {
                  "name": "install",
                  "steps": [
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "\n                                mvn clean install                                     -DskipTests=true                                     -Dcheckstyle.skip=true                                     -Dpmd.skip=true                                     -Dcpdskip=true\n                                mvn dependency:go-offline\n                            "
                          }
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "stat",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "sh 'env'\n                                sh 'mvn --version'"
                          }
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "vars",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "gitCommit = sh(returnStdout: true, script: 'git rev-parse HEAD').trim()\n                                jdbc_mariadb = \"jdbc:mariadb://127.0.0.1:3306/\" +\n                                        \"test_${gitCommit.substring(0, 16)}\" +\n                                        \"?useUnicode=yes\""
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "kangaroo-common",
              "branches": [
                {
                  "name": "pmd",
                  "steps": [
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "mvn pmd:check -pl kangaroo-common "
                          }
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "checkstyle",
                  "steps": [
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "mvn checkstyle:check -pl kangaroo-common"
                          }
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "unit-h2",
                  "steps": [
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "\n                            mvn test                                 -Dcheckstyle.skip=true                                 -Dpmd.skip=true                                 -Dcpdskip=true                                 -DskipTests.integration=true                                 -pl kangaroo-common                                 -Ph2                                 -Dtarget-directory=target-h2\n                        "
                          }
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "unit-mariadb",
                  "steps": [
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": false,
                            "value": "\"\"\"\n                            mvn test \\\n                                -Dcheckstyle.skip=true \\\n                                -Dpmd.skip=true \\\n                                -Dcpdskip=true \\\n                                -DskipTests.integration=true \\\n                                -pl kangaroo-common \\\n                                -Pmariadb \\\n                                -Dtarget-directory=target-mariadb \\\n                                -Dhibernate.connection.url=${jdbc_mariadb}\n                        \"\"\""
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "kangaroo-server-authz",
              "branches": [
                {
                  "name": "pmd",
                  "steps": [
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "mvn pmd:check -pl kangaroo-server-authz "
                          }
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "checkstyle",
                  "steps": [
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "mvn checkstyle:check -pl kangaroo-server-authz"
                          }
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "unit-h2",
                  "steps": [
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "\n                            mvn test                                 -Dcheckstyle.skip=true                                 -Dpmd.skip=true                                 -Dcpdskip=true                                 -DskipTests.integration=true                                 -pl kangaroo-server-authz                                 -Ph2                                 -Dtarget-directory=target-h2\n                        "
                          }
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "unit-mariadb",
                  "steps": [
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": false,
                            "value": "\"\"\"\n                            mvn test \\\n                                -Dcheckstyle.skip=true \\\n                                -Dpmd.skip=true \\\n                                -Dcpdskip=true \\\n                                -DskipTests.integration=true \\\n                                -pl kangaroo-server-authz \\\n                                -Pmariadb \\\n                                -Dtarget-directory=target-mariadb \\\n                                -Dhibernate.connection.url=${jdbc_mariadb}\n                        \"\"\""
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "integration",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "\n                    mvn integration-test verify                         -Dcheckstyle.skip=true                         -Dpmd.skip=true                         -Dcpdskip=true                         -DskipTests.unit=true                         -Ph2\n                "
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "post": {
            "conditions": [
              {
                "condition": "changed",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "notifySlack(currentBuild.currentResult)"
                          }
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "condition": "always",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "archive",
                      "arguments": [
                        {
                          "key": "includes",
                          "value": {
                            "isLiteral": true,
                            "value": "**/target/screenshots/*.png"
                          }
                        }
                      ]
                    },
                    {
                      "name": "step",
                      "arguments": [
                        {
                          "key": "delegate",
                          "value": {
                            "isLiteral": false,
                            "value": "[\n                    $class                    : 'JacocoPublisher',\n                    minimumInstructionCoverage: '100',\n                    minimumBranchCoverage     : '100',\n                    minimumComplexityCoverage : '100',\n                    minimumLineCoverage       : '100',\n                    minimumMethodCoverage     : '100',\n                    minimumClassCoverage      : '100',\n                    changeBuildStatus         : true\n            ]"
                          }
                        }
                      ]
                    },
                    {
                      "name": "junit",
                      "arguments": [
                        {
                          "key": "testResults",
                          "value": {
                            "isLiteral": true,
                            "value": "**/target-*/surefire-reports/*.xml"
                          }
                        }
                      ]
                    },
                    {
                      "name": "checkstyle",
                      "arguments": [
                        {
                          "key": "canComputeNew",
                          "value": {
                            "isLiteral": true,
                            "value": true
                          }
                        },
                        {
                          "key": "canRunOnFailed",
                          "value": {
                            "isLiteral": true,
                            "value": true
                          }
                        },
                        {
                          "key": "defaultEncoding",
                          "value": {
                            "isLiteral": true,
                            "value": ""
                          }
                        },
                        {
                          "key": "failedTotalHigh",
                          "value": {
                            "isLiteral": true,
                            "value": "0"
                          }
                        },
                        {
                          "key": "failedTotalLow",
                          "value": {
                            "isLiteral": true,
                            "value": "0"
                          }
                        },
                        {
                          "key": "failedTotalNormal",
                          "value": {
                            "isLiteral": true,
                            "value": "0"
                          }
                        },
                        {
                          "key": "healthy",
                          "value": {
                            "isLiteral": true,
                            "value": "100"
                          }
                        },
                        {
                          "key": "pattern",
                          "value": {
                            "isLiteral": true,
                            "value": "**/target-*/checkstyle-result.xml"
                          }
                        },
                        {
                          "key": "unHealthy",
                          "value": {
                            "isLiteral": true,
                            "value": "100"
                          }
                        },
                        {
                          "key": "unstableTotalAll",
                          "value": {
                            "isLiteral": true,
                            "value": "0"
                          }
                        },
                        {
                          "key": "unstableTotalHigh",
                          "value": {
                            "isLiteral": true,
                            "value": "0"
                          }
                        },
                        {
                          "key": "unstableTotalLow",
                          "value": {
                            "isLiteral": true,
                            "value": "0"
                          }
                        },
                        {
                          "key": "unstableTotalNormal",
                          "value": {
                            "isLiteral": true,
                            "value": "0"
                          }
                        }
                      ]
                    },
                    {
                      "name": "pmd",
                      "arguments": [
                        {
                          "key": "pattern",
                          "value": {
                            "isLiteral": true,
                            "value": "**/target-*/pmd.xml"
                          }
                        },
                        {
                          "key": "unstableTotalAll",
                          "value": {
                            "isLiteral": true,
                            "value": "0"
                          }
                        }
                      ]
                    },
                    {
                      "name": "cleanWs",
                      "arguments": [
                        {
                          "key": "deleteDirs",
                          "value": {
                            "isLiteral": true,
                            "value": true
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          },
          "environment": [
            {
              "key": "KANGAROO_FB_APP",
              "value": {
                "name": "credentials",
                "arguments": [
                  {
                    "isLiteral": true,
                    "value": "jenkins_facebook_app"
                  }
                ]
              }
            },
            {
              "key": "KANGAROO_GITHUB_APP",
              "value": {
                "name": "credentials",
                "arguments": [
                  {
                    "isLiteral": true,
                    "value": "jenkins_github_app"
                  }
                ]
              }
            },
            {
              "key": "KANGAROO_GITHUB_ACCOUNT",
              "value": {
                "name": "credentials",
                "arguments": [
                  {
                    "isLiteral": true,
                    "value": "jenkins_github_account"
                  }
                ]
              }
            },
            {
              "key": "KANGAROO_GOOGLE_APP",
              "value": {
                "name": "credentials",
                "arguments": [
                  {
                    "isLiteral": true,
                    "value": "jenkins_google_app"
                  }
                ]
              }
            },
            {
              "key": "KANGAROO_GOOGLE_ACCOUNT",
              "value": {
                "name": "credentials",
                "arguments": [
                  {
                    "isLiteral": true,
                    "value": "jenkins_google_account"
                  }
                ]
              }
            }
          ],
          "agent": {
            "type": "label",
            "argument": {
              "isLiteral": true,
              "value": "worker"
            }
          },
          "options": {
            "options": [
              {
                "name": "buildDiscarder",
                "arguments": [
                  {
                    "name": "logRotator",
                    "arguments": [
                      {
                        "key": "numToKeepStr",
                        "value": {
                          "isLiteral": true,
                          "value": "5"
                        }
                      }
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "Romeh/spring-boot-sample-app",
      "repo_url": "https://github.com/Romeh/spring-boot-sample-app",
      "html_url_jenkinsfile": "https://github.com/Romeh/spring-boot-sample-app/blob/d50dd995e5613c5e56991334ea6dd8b88c322b4a/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/112953040/git/blobs/f0a33547f6bd64bb96c71ac8f2f65daa563750da",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Build with unit testing",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "echo 'Pulling...' + env.BRANCH_NAME\n                    def mvnHome = tool 'Maven 3.3.9'\n                    if (isUnix()) {\n                        def targetVersion = getDevVersion()\n                        print 'target build version...'\n                        print targetVersion\n                        sh \"'${mvnHome}/bin/mvn' -Dintegration-tests.skip=true -Dbuild.number=${targetVersion} clean package\"\n                        def pom = readMavenPom file: 'pom.xml'\n                        // get the current development version\n                        developmentArtifactVersion = \"${pom.version}-${targetVersion}\"\n                        print pom.version\n                        // execute the unit testing and collect the reports\n                        junit '**//*target/surefire-reports/TEST-*.xml'\n                        archive 'target*//*.jar'\n                    } else {\n                        bat(/\"${mvnHome}\\bin\\mvn\" -Dintegration-tests.skip=true clean package/)\n                        def pom = readMavenPom file: 'pom.xml'\n                        print pom.version\n                        junit '**//*target/surefire-reports/TEST-*.xml'\n                        archive 'target*//*.jar'\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Integration tests",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def mvnHome = tool 'Maven 3.3.9'\n                    if (isUnix()) {\n                        // just to trigger the integration test without unit testing\n                        sh \"'${mvnHome}/bin/mvn'  verify -Dunit-tests.skip=true\"\n                    } else {\n                        bat(/\"${mvnHome}\\bin\\mvn\" verify -Dunit-tests.skip=true/)\n                    }"
                          }
                        }
                      ]
                    },
                    {
                      "name": "cucumber",
                      "arguments": [
                        {
                          "key": "buildStatus",
                          "value": {
                            "isLiteral": true,
                            "value": null
                          }
                        },
                        {
                          "key": "fileIncludePattern",
                          "value": {
                            "isLiteral": true,
                            "value": "**/cucumber.json"
                          }
                        },
                        {
                          "key": "jsonReportDirectory",
                          "value": {
                            "isLiteral": true,
                            "value": "target"
                          }
                        },
                        {
                          "key": "sortingMethod",
                          "value": {
                            "isLiteral": true,
                            "value": "ALPHABETICAL"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Sonar scan execution",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def mvnHome = tool 'Maven 3.3.9'\n                    withSonarQubeEnv {\n\n                        sh \"'${mvnHome}/bin/mvn'  verify sonar:sonar -Dintegration-tests.skip=true -Dmaven.test.failure.ignore=true\"\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Sonar scan result check",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "timeout",
                      "arguments": [
                        {
                          "key": "time",
                          "value": {
                            "isLiteral": true,
                            "value": 2
                          }
                        },
                        {
                          "key": "unit",
                          "value": {
                            "isLiteral": true,
                            "value": "MINUTES"
                          }
                        }
                      ],
                      "children": [
                        {
                          "name": "retry",
                          "arguments": {
                            "isLiteral": true,
                            "value": 3
                          },
                          "children": [
                            {
                              "name": "script",
                              "arguments": [
                                {
                                  "key": "scriptBlock",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "def qg = waitForQualityGate()\n                            if (qg.status != 'OK') {\n                                error \"Pipeline aborted due to quality gate failure: ${qg.status}\"\n                            }"
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Development deploy approval and deployment",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "if (currentBuild.result == null || currentBuild.result == 'SUCCESS') {\n                        timeout(time: 3, unit: 'MINUTES') {\n                            // you can use the commented line if u have specific user group who CAN ONLY approve\n                            //input message:'Approve deployment?', submitter: 'it-ops'\n                            input message: 'Approve deployment?'\n                        }\n                        timeout(time: 2, unit: 'MINUTES') {\n                            //\n                            if (developmentArtifactVersion != null && !developmentArtifactVersion.isEmpty()) {\n                                // replace it with your application name or make it easily loaded from pom.xml\n                                def jarName = \"application-${developmentArtifactVersion}.jar\"\n                                echo \"the application is deploying ${jarName}\"\n                                // NOTE : CREATE your deployemnt JOB, where it can take parameters whoch is the jar name to fetch from jenkins workspace\n                                build job: 'ApplicationToDev', parameters: [[$class: 'StringParameterValue', name: 'jarName', value: jarName]]\n                                echo 'the application is deployed !'\n                            } else {\n                                error 'the application is not  deployed as development version is null!'\n                            }\n\n                        }\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "DEV sanity check",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sleep",
                      "arguments": [
                        {
                          "key": "time",
                          "value": {
                            "isLiteral": true,
                            "value": 45
                          }
                        }
                      ]
                    },
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "if (currentBuild.result == null || currentBuild.result == 'SUCCESS') {\n                        timeout(time: 1, unit: 'MINUTES') {\n                            script {\n                                def mvnHome = tool 'Maven 3.3.9'\n                                //NOTE : if u change the sanity test class name , change it here as well\n                                sh \"'${mvnHome}/bin/mvn' -Dtest=ApplicationSanityCheck_ITT surefire:test\"\n                            }\n\n                        }\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Release and publish artifact",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def mvnHome = tool 'Maven 3.3.9' //\n                    if (currentBuild.result == null || currentBuild.result == 'SUCCESS') {\n                        def v = getReleaseVersion()\n                        releasedVersion = v;\n                        if (v) {\n                            echo \"Building version ${v} - so released version is ${releasedVersion}\"\n                        }\n                        // jenkins user credentials ID which is transparent to the user and password change\n                        sshagent(['0000000-3b5a-454e-a8e6-c6b6114d36000']) {\n                            sh \"git tag -f v${v}\"\n                            sh \"git push -f --tags\"\n                        }\n                        sh \"'${mvnHome}/bin/mvn' -Dmaven.test.skip=true  versions:set  -DgenerateBackupPoms=false -DnewVersion=${v}\"\n                        sh \"'${mvnHome}/bin/mvn' -Dmaven.test.skip=true clean deploy\"\n\n                    } else {\n                        error \"Release is not possible. as build is not successful\"\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "branch",
                    "arguments": {
                      "isLiteral": true,
                      "value": "master"
                    }
                  }
                ]
              }
            },
            {
              "name": "Deploy to Acceptance",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "if (currentBuild.result == null || currentBuild.result == 'SUCCESS') {\n                        timeout(time: 3, unit: 'MINUTES') {\n                            //input message:'Approve deployment?', submitter: 'it-ops'\n                            input message: 'Approve deployment to UAT?'\n                        }\n                        timeout(time: 3, unit: 'MINUTES') {\n                            //  deployment job which will take the relasesed version\n                            if (releasedVersion != null && !releasedVersion.isEmpty()) {\n                                // make the applciation name for the jar configurable\n                                def jarName = \"application-${releasedVersion}.jar\"\n                                echo \"the application is deploying ${jarName}\"\n                                // NOTE : DO NOT FORGET to create your UAT deployment jar , check Job AlertManagerToUAT in Jenkins for reference\n                                // the deployemnt should be based into Nexus repo\n                                build job: 'AApplicationToACC', parameters: [[$class: 'StringParameterValue', name: 'jarName', value: jarName], [$class: 'StringParameterValue', name: 'appVersion', value: releasedVersion]]\n                                echo 'the application is deployed !'\n                            } else {\n                                error 'the application is not  deployed as released version is null!'\n                            }\n\n                        }\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "branch",
                    "arguments": {
                      "isLiteral": true,
                      "value": "master"
                    }
                  }
                ]
              }
            },
            {
              "name": "ACC E2E tests",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sleep",
                      "arguments": [
                        {
                          "key": "time",
                          "value": {
                            "isLiteral": true,
                            "value": 45
                          }
                        }
                      ]
                    },
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "if (currentBuild.result == null || currentBuild.result == 'SUCCESS') {\n                        timeout(time: 1, unit: 'MINUTES') {\n\n                            script {\n                                def mvnHome = tool 'Maven 3.3.9'\n                                // NOTE : if you change the test class name change it here as well\n                                sh \"'${mvnHome}/bin/mvn' -Dtest=ApplicationE2E surefire:test\"\n                            }\n\n                        }\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "branch",
                    "arguments": {
                      "isLiteral": true,
                      "value": "master"
                    }
                  }
                ]
              }
            }
          ],
          "post": {
            "conditions": [
              {
                "condition": "always",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "deleteDir",
                      "arguments": []
                    }
                  ]
                }
              },
              {
                "condition": "success",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sendEmail",
                      "arguments": {
                        "isLiteral": true,
                        "value": "Successful"
                      }
                    }
                  ]
                }
              },
              {
                "condition": "unstable",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sendEmail",
                      "arguments": {
                        "isLiteral": true,
                        "value": "Unstable"
                      }
                    }
                  ]
                }
              },
              {
                "condition": "failure",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sendEmail",
                      "arguments": {
                        "isLiteral": true,
                        "value": "Failed"
                      }
                    }
                  ]
                }
              }
            ]
          },
          "environment": [
            {
              "key": "EMAIL_RECIPIENTS",
              "value": {
                "isLiteral": true,
                "value": "mahmoud.romeh@test.com"
              }
            }
          ],
          "agent": {
            "type": "label",
            "argument": {
              "isLiteral": true,
              "value": "java8"
            }
          },
          "options": {
            "options": [
              {
                "name": "buildDiscarder",
                "arguments": [
                  {
                    "name": "logRotator",
                    "arguments": [
                      {
                        "key": "numToKeepStr",
                        "value": {
                          "isLiteral": true,
                          "value": "5"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "name": "timeout",
                "arguments": [
                  {
                    "key": "time",
                    "value": {
                      "isLiteral": true,
                      "value": 25
                    }
                  },
                  {
                    "key": "unit",
                    "value": {
                      "isLiteral": true,
                      "value": "MINUTES"
                    }
                  }
                ]
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "arthur657834/test-tools",
      "repo_url": "https://github.com/arthur657834/test-tools",
      "html_url_jenkinsfile": "https://github.com/arthur657834/test-tools/blob/8e0b92626c08a8fca82ce6c43bf594a1ea99fa6c/jenkins/pipline_example.md",
      "api_url_jenkinsfile": "https://api.github.com/repositories/49949043/git/blobs/f2151eb6e4b353a2a9c29059487ccb1227caf544",
      "jenkins_pipeline": [
        {
          "error": "unexpected char: '#' @ line 2, column 3."
        }
      ]
    },
    {
      "full_repo_name": "eleanordare/cucumber-openshift-jenkins",
      "repo_url": "https://github.com/eleanordare/cucumber-openshift-jenkins",
      "html_url_jenkinsfile": "https://github.com/eleanordare/cucumber-openshift-jenkins/blob/f43508456571e3a3ab8564c004c69e62fcd57f7e/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/94480552/git/blobs/572f0e81a500c634cc6884d4195db3e6b8c53123",
      "jenkins_pipeline": [
        {
          "error": "Jenkinsfile content 'print \"==========================================================\"\r\nprint \"                    Cucumber Testing\"\r\nprint \"==========================================================\"\r\n\r\nnode('jenkins-agent'){\r\n\r\n  workspace = pwd()   // Set the main workspace in your Jenkins agent\r\n\r\n  authToken = \"\"      // Get your user auth token for OpenShift\r\n  apiURL = \"\"         // URL for your OpenShift cluster API\r\n\r\n  gitUser = \"\"        // Set your Git username\r\n  gitPass = \"\"        // Set your Git password\r\n  gitURL = \"\"         // Set the URL of your test suite repo\r\n  gitName = \"\"        // Set the name of your test suite repo\r\n  gitBranch = \"\"      // Set the branch of your test suite repo\r\n\r\n  jenkinsUser = \"\"    // Set username for Jenkins\r\n  jenkinsPass = \"\"    // Set API token for Jenkins\r\n\r\n  // Set location of OpenShift objects in workspace\r\n  buildConfigPath = \"${workspace}/${gitName}/build-config.yaml\"\r\n  imageStreamPath = \"${workspace}/${gitName}/image-stream.yaml\"\r\n  jobTemplatePath = \"${workspace}/${gitName}/job-template.yaml\"\r\n\r\n  project = \"\"    // Set the OpenShift project you're working in\r\n  testSuiteName = \"cucumber-test-suite\"   // Name of the job/build/imagestream\r\n\r\n  // Login to the OpenShift cluster\r\n  sh \"\"\"\r\n      set +x\r\n      oc login --insecure-skip-tls-verify=true \\\r\n        --token=${authToken} ${apiURL}\r\n  \"\"\"\r\n\r\n  // Checkout the test suite repo into your Jenkins agent workspace\r\n  int slashIdx = gitURL.indexOf(\"://\")\r\n  String urlWithCreds = gitURL.substring(0, slashIdx + 3) +\r\n          \"\\\"${gitUser}:${gitPass}\\\"@\" + gitURL.substring(slashIdx + 3);\r\n\r\n  sh \"\"\"\r\n    rm -rf ${workspace}/${gitName}\r\n    git clone -b ${gitBranch} ${urlWithCreds} ${gitName}\r\n    echo `pwd && ls -l`\r\n  \"\"\"\r\n\r\n  // Create your ImageStream and BuildConfig in OpenShift\r\n  // Then start the build for the test suite image\r\n  sh \"\"\"\r\n    oc apply -f ${imageStreamPath} -n ${project}\r\n    oc apply -f ${buildConfigPath} -n ${project}\r\n    oc start-build ${testSuiteName} -n ${project} --follow\r\n  \"\"\"\r\n\r\n  // Get test suite image from correct cluster & project\r\n  String imageURL = sh (\r\n    script:\"\"\"\r\n      oc get is/${testSuiteName} -n ${project} \\\r\n        --output=jsonpath={.status.dockerImageRepository}\r\n      \"\"\",\r\n    returnStdout: true\r\n  )\r\n\r\n  // Set the return URL for the Jenkins input step\r\n  inputURL = env.BUILD_URL + \"input/Cucumber/proceedEmpty\"\r\n\r\n  // Delete existing test suite job for previous test run\r\n  // Create new test suite job with latest image\r\n  // Pass in input URL, Jenkins username/password, and image\r\n  sh \"\"\"\r\n  oc delete job/${testSuiteName} -n ${project} --ignore-not-found=true\r\n  oc process -f ${jobTemplatePath} -p \\\r\n    JENKINS_PIPELINE_RETURN_URL=${inputURL} \\\r\n    USER_NAME=${jenkinsUser} \\\r\n    PASSWORD=${jenkinsPass} \\\r\n    IMAGE=${imageURL}:latest \\\r\n    -n ${project} | oc create -f - -n ${project}\r\n  \"\"\"\r\n\r\n  // Get list of all running pods in your OpenShift project\r\n  String podResults = sh (\r\n       script:\"\"\"\r\n         oc get pods -n ${project} --output=name\r\n       \"\"\",\r\n       returnStdout: true\r\n  )\r\n\r\n  // Get job logs and exit upon job completion\r\n  // If job pod hasn't spun up yet, waits 5s and tries again\r\n  // If job pod hasn't spun up after 10 tries, fails\r\n  numTry = 0\r\n  podList = podResults.split('\\n')\r\n  for (int x = 0; x < podList.size(); x++){\r\n   String pod = podList[x]\r\n   // Look for running test suite job and not the build pod\r\n   if(pod.contains(\"${testSuiteName}\") && !pod.contains(\"build\")){\r\n     while(numTry < 10){\r\n       try {\r\n         sh \"\"\"\r\n           sleep 5s\r\n           oc logs ${pod} -n ${project}\r\n         \"\"\"\r\n         numTry = 11\r\n       } catch(e) {\r\n           print e\r\n           numTry++\r\n           print \"Checking if job container is up and running...\"\r\n       }\r\n     }\r\n     if(numTry == 10) {\r\n       error(\"Job did not spin up in ${project}.\")\r\n     }\r\n     jobPod = pod\r\n   }\r\n  }\r\n\r\n  // Get succinct pod name\r\n  jobPod = jobPod.replaceAll(\"pod/\",\"\")\r\n\r\n  // Print a link to the test suite job in OpenShift\r\n  print \"Watch the test suite logs as they run here:\"\r\n  print \"${apiURL}/console/project/${project}/browse/pods/${jobPod}?tab=logs\"\r\n\r\n  // Run two branches in parallel:\r\n  //  - one waits for the job to return and gets the test results\r\n  //  - the other follows the logs of the test suite pod\r\n  def testingBranches = [:]\r\n\r\n  testingBranches[\"input\"] = {\r\n\r\n    // Create an input step that will be called by the test suite job\r\n    // This will let Jenkins know that it's time to retrieve the Cucumber results\r\n    print \"Please don't click Proceed.\"\r\n    print \"The OpenShift pod will call Jenkins when the tests have completed.\"\r\n    input id: \"Cucumber\", message: \"Waiting for testing to finish...\"\r\n\r\n    // Copy the results folder from the test suite pod to the Jenkins agent\r\n    print \"Retrieving Cucumber results files from pod...\"\r\n    sh \"\"\"\r\n      oc rsync ${jobPod}:/tmp/src/reports . -n ${project}\r\n    \"\"\"\r\n\r\n    print \"==========================================================\"\r\n    print \"                    Cucumber Reports\"\r\n    print \"==========================================================\"\r\n\r\n    // Cucumber Reports Plugin parses the JSON files\r\n    // Uses \"reports\" directory copied from test suite pod\r\n    step([$class: 'CucumberReportPublisher',\r\n           jenkinsBasePath: '',\r\n           fileIncludePattern: '',\r\n           fileExcludePattern: '',\r\n           jsonReportDirectory: 'reports',\r\n           ignoreFailedTests: true,\r\n           missingFails: false,\r\n           pendingFails: false,\r\n           skippedFails: false,\r\n           undefinedFails: false,\r\n           parallelTesting: false])\r\n\r\n    // Cucumber Reports Plugin charts/graphs at this link\r\n    print \"Cucumber test results available here:\"\r\n    def intTestURL = env.BUILD_URL + \"cucumber-html-reports/overview-features.html\"\r\n    print intTestURL\r\n\r\n  } // branch for input\r\n\r\n  testingBranches[\"logs\"] = {\r\n\r\n    print \"==========================================================\"\r\n    print \"                     Test Suite Logs\"\r\n    print \"==========================================================\"\r\n\r\n    // Print test suite logs as they happen\r\n    // This branch will exit after the \"sleep 1m\" in runjob.sh\r\n    sh \"\"\"\r\n      oc logs -f ${jobPod} -n ${project}\r\n    \"\"\"\r\n\r\n  } // branch for logs\r\n\r\n  // Runs the two branches in parallel\r\n  parallel testingBranches\r\n\r\n} // node\r\n' did not contain the 'pipeline' step"
        }
      ]
    },
    {
      "full_repo_name": "CyanZero/first",
      "repo_url": "https://github.com/CyanZero/first",
      "html_url_jenkinsfile": "https://github.com/CyanZero/first/blob/7c9c39dafb6681d4cbfbe81e4e0055f2a9939ad1/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/96007123/git/blobs/49b2518d1c5922218182269ef802a89d8361f359",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Build with unit testing",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "echo 'Pulling...' + env.BRANCH_NAME\n                    def mvnHome = tool 'Maven3'\n                    if (isUnix()) {\n                        def targetVersion = getDevVersion()\n                        print 'target build version...'\n                        print targetVersion\n                        sh \"'${mvnHome}/bin/mvn' -Dintegration-tests.skip=true -Dbuild.number=${targetVersion} clean package\"\n                        def pom = readMavenPom file: 'pom.xml'\n                        // get the current development version\n                        developmentArtifactVersion = \"${pom.version}-${targetVersion}\"\n                        print pom.version\n                        // execute the unit testing and collect the reports\n                        // junit '**//*target/surefire-reports/TEST-*.xml'\n                        archive 'target*//*.jar'\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Integration tests",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "print 'Integration test is skipped'"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Development deploy approval and deployment",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "if (currentBuild.result == null || currentBuild.result == 'SUCCESS') {\n                        timeout(time: 3, unit: 'MINUTES') {\n                            // you can use the commented line if u have specific user group who CAN ONLY approve\n                            //input message:'Approve deployment?', submitter: 'it-ops'\n                            input message: 'Approve deployment?'\n                        }\n                        timeout(time: 2, unit: 'MINUTES') {\n                            //\n                            if (developmentArtifactVersion != null && !developmentArtifactVersion.isEmpty()) {\n                                // replace it with your application name or make it easily loaded from pom.xml\n                                def jarName = \"application-${developmentArtifactVersion}.jar\"\n                                echo \"the application is deploying ${jarName}\"\n                                // NOTE : CREATE your deployemnt JOB, where it can take parameters whoch is the jar name to fetch from jenkins workspace\n                                build job: 'ApplicationToDev', parameters: [[$class: 'StringParameterValue', name: 'jarName', value: jarName]]\n                                echo 'the application is deployed !'\n                            } else {\n                                error 'the application is not  deployed as development version is null!'\n                            }\n\n                        }\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Release and publish artifact",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def mvnHome = tool 'Maven 3.3.9' //\n                    if (currentBuild.result == null || currentBuild.result == 'SUCCESS') {\n                        def v = getReleaseVersion()\n                        releasedVersion = v;\n                        if (v) {\n                            echo \"Building version ${v} - so released version is ${releasedVersion}\"\n                        }\n                        // jenkins user credentials ID which is transparent to the user and password change\n                        sshagent(['0000000-3b5a-454e-a8e6-c6b6114d36000']) {\n                            sh \"git tag -f v${v}\"\n                            sh \"git push -f --tags\"\n                        }\n                        sh \"'${mvnHome}/bin/mvn' -Dmaven.test.skip=true  versions:set  -DgenerateBackupPoms=false -DnewVersion=${v}\"\n                        sh \"'${mvnHome}/bin/mvn' -Dmaven.test.skip=true clean deploy\"\n\n                    } else {\n                        error \"Release is not possible. as build is not successful\"\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "branch",
                    "arguments": {
                      "isLiteral": true,
                      "value": "master"
                    }
                  }
                ]
              }
            },
            {
              "name": "Deploy to Acceptance",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "if (currentBuild.result == null || currentBuild.result == 'SUCCESS') {\n                        timeout(time: 3, unit: 'MINUTES') {\n                            //input message:'Approve deployment?', submitter: 'it-ops'\n                            input message: 'Approve deployment to UAT?'\n                        }\n                        timeout(time: 3, unit: 'MINUTES') {\n                            //  deployment job which will take the relasesed version\n                            if (releasedVersion != null && !releasedVersion.isEmpty()) {\n                                // make the applciation name for the jar configurable\n                                def jarName = \"application-${releasedVersion}.jar\"\n                                echo \"the application is deploying ${jarName}\"\n                                // NOTE : DO NOT FORGET to create your UAT deployment jar , check Job AlertManagerToUAT in Jenkins for reference\n                                // the deployemnt should be based into Nexus repo\n                                build job: 'AApplicationToACC', parameters: [[$class: 'StringParameterValue', name: 'jarName', value: jarName], [$class: 'StringParameterValue', name: 'appVersion', value: releasedVersion]]\n                                echo 'the application is deployed !'\n                            } else {\n                                error 'the application is not  deployed as released version is null!'\n                            }\n\n                        }\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "branch",
                    "arguments": {
                      "isLiteral": true,
                      "value": "master"
                    }
                  }
                ]
              }
            },
            {
              "name": "ACC E2E tests",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "echo 'ACC E2E test is skipped'"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "branch",
                    "arguments": {
                      "isLiteral": true,
                      "value": "master"
                    }
                  }
                ]
              }
            }
          ],
          "post": {
            "conditions": [
              {
                "condition": "always",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "deleteDir",
                      "arguments": []
                    }
                  ]
                }
              },
              {
                "condition": "success",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sendEmail",
                      "arguments": {
                        "isLiteral": true,
                        "value": "Successful"
                      }
                    }
                  ]
                }
              },
              {
                "condition": "unstable",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sendEmail",
                      "arguments": {
                        "isLiteral": true,
                        "value": "Unstable"
                      }
                    }
                  ]
                }
              },
              {
                "condition": "failure",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sendEmail",
                      "arguments": {
                        "isLiteral": true,
                        "value": "Failed"
                      }
                    }
                  ]
                }
              }
            ]
          },
          "environment": [
            {
              "key": "EMAIL_RECIPIENTS",
              "value": {
                "isLiteral": true,
                "value": "cyanzhoufeng@gmail.com"
              }
            }
          ],
          "agent": {
            "type": "any"
          },
          "options": {
            "options": [
              {
                "name": "buildDiscarder",
                "arguments": [
                  {
                    "name": "logRotator",
                    "arguments": [
                      {
                        "key": "numToKeepStr",
                        "value": {
                          "isLiteral": true,
                          "value": "5"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "name": "timeout",
                "arguments": [
                  {
                    "key": "time",
                    "value": {
                      "isLiteral": true,
                      "value": 25
                    }
                  },
                  {
                    "key": "unit",
                    "value": {
                      "isLiteral": true,
                      "value": "MINUTES"
                    }
                  }
                ]
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "skyscreen/jenkinsgit",
      "repo_url": "https://github.com/skyscreen/jenkinsgit",
      "html_url_jenkinsfile": "https://github.com/skyscreen/jenkinsgit/blob/ec604665237248d14052437b01a92402b849deef/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/117944876/git/blobs/6df9e77703a86db7729587aee264374af1dc4089",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Setup Env and Create VMs",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def product_branch_from_selection = params.buyer_branch.split(\"/\")\n    def branch_name_from_selection_of_product_branch_param = product_branch_from_selection[product_branch_from_selection.size()-1]\n    def final_branch_name=\"\"\n    \n    if (params.cq_run_for_branch.equals(\"\") && !params.buyer_build_name.equals(\"LATEST\"))\n    {\n        currentBuild.result = 'ABORTED'\n    \terror('Sorry, incorrect input. Please select valid value for Parameter -cq_run_for_branch- for this CQ run, ' +\n    \t'as you have explictly passing build name. We need to know which branch it build belongs to, ex, rel or dev or trunk ')    \t\n    }\n    else if (params.cq_run_for_branch.equals(\"\") && params.buyer_build_name.equals(\"LATEST\"))\n    {\n        final_branch_name=branch_name_from_selection_of_product_branch_param\n    }\n    else if (!params.cq_run_for_branch.equals(\"\") && !params.buyer_build_name.equals(\"LATEST\"))\n    {\n        final_branch_name=params.cq_run_for_branch\n    }\n    else if (!params.cq_run_for_branch.equals(\"\") && params.buyer_build_name.equals(\"LATEST\"))\n    {\n        if (params.cq_run_for_branch.equals(branch_name_from_selection_of_product_branch_param))\n        {\n            final_branch_name=branch_name_from_selection_of_product_branch_param\n        }\n        else\n\t{\n\t        currentBuild.result = 'ABORTED'\n\t    \terror('Sorry, mismatch in cq_run_for_branch param and selected buyer_branch param')\n        }\n    }\n    else\n    {\n        currentBuild.result = 'ABORTED'\n\terror('Unabel to arrive at Which build branch the CQ run is for ')    \n    }\n\n    // Compute we have enough details to say which Branch the CQ is run for\n    // We would like to know the exact branch for which the CQ is being run,\n    // so that we can copy the CQ run reports related to the branch\n    // If branch information is not set correctly, we would not now the CQ is for which\n    // branch in case the CQ is run by directly specifying Product build name.\n\n    def dateFormat = new java.text.SimpleDateFormat(\"yyyy_MM_dd#HH_mm_ss_ms\")\n    def date = new Date()\n    def datedir = dateFormat.format(date)\n    //def CQ_DIR=\"/nfs/CQReports/TestReports/${final_branch_name}/cq_run_ids/${datedir}\"\n    def CQ_DIR=\"/tmp/${final_branch_name}/cq_run_ids/${datedir}\"\t  \n\t\n     //mv\t  \n    //sh \"ssh -i /tmp/id_rsa ${robot_user_name}@${robot_host_name} mkdir -p $CQ_DIR\"\n    //sh \"ssh -i /tmp/id_rsa ${robot_user_name}@${robot_host_name} chmod -R 777 $CQ_DIR\"\n\t\t\n    // ********* Step 3 - Create a common Dir for current CQ Reports ******* //\n\t\t\n    def robot_host_name=\"10.169.54.28\"\n    def robot_user_name=\"cqrobot712\"\n\t  \n    sh \"ssh  ${robot_user_name}@${robot_host_name} mkdir -p $CQ_DIR\"\n    sh \"ssh  ${robot_user_name}@${robot_host_name} chmod -R 777 $CQ_DIR\"\n\t\t\n    println(\"Compute Source Build, Target Build, Branch, SSWS build details\")\n    println (\"${params.buyer_product} , ${params.buyer_branch} , ${params.buyer_datasetType}\")   \n    \n    // run bootstrap script on remote machine, done before computing build details to run\n    sh \"ssh  ${robot_user_name}@${robot_host_name} /nfs/CQ/masterscript/bootStrap.sh\"\n\n    sh \"ssh  ${robot_user_name}@${robot_host_name} /nfs/CQ/masterscript/getBuildInfo.sh getsourcebuild ${params.buyer_product} ${params.buyer_branch} ${params.buyer_datasetType} $CQ_DIR\" \n\t\t\n    def source_build_name = sh(returnStdout: true, script: \"ssh  ${robot_user_name}@${robot_host_name} cat $CQ_DIR/sourceBuild\").trim()\n\t\t\n    if (params.buyer_build_name.equals(\"LATEST\") )\n    {\n\t    sh \"ssh  ${robot_user_name}@${robot_host_name} /nfs/CQ/masterscript/getBuildInfo.sh gettargetbuild ${params.buyer_product} ${params.buyer_branch} ${params.buyer_datasetType} $CQ_DIR\"\n\t    buyer_build_name = sh(returnStdout: true, script: \"ssh  ${robot_user_name}@${robot_host_name} cat $CQ_DIR/targetBuild\").trim()\n\t    //println(\"targetBuild: ${buyer_build_name}\")\n    }\n\n    if (params.ssws_build_name.equals(\"LATEST\") )\n    {\n\t    sh \"ssh  ${robot_user_name}@${robot_host_name} /nfs/CQ/masterscript/getBuildInfo.sh getsswsbuild ${params.ssws_product} ${params.ssws_branch} ${params.buyer_datasetType} $CQ_DIR\"\n\t    ssws_build_name = sh(returnStdout: true, script: \"ssh  ${robot_user_name}@${robot_host_name} cat $CQ_DIR/sswsBuild\").trim()\n\t    //println(\"sswsBuild: ${ssws_build_name}\")\n    }\n  \n    println(\"Builds: ${source_build_name} ${buyer_build_name} ${ssws_build_name} \")\n\n    println  \"*********************************************************\"\n    println  \"Product:                           \" + buyer_product\n    println  \"Target Build:                      \" + buyer_build_name\n    println  \"Source Build:                      \" + source_build_name\n    println  \"SSWS Build:                        \" + ssws_build_name\n    println  \"Identified Product branch name is: \" + final_branch_name    \n    println  \"CQ Run Dir info is:                \" + CQ_DIR\n    println  \"*********************************************************\"\n\n    // ********* Step 3 - Get list of All Coponents and its Split Suites ******* //\n    // this determines the number of components we need to run as part of CQ\n    // we traverse through the dir /nfs/CQ/buyervm_configs to identify number of \n    // CQ components defined and use this info to create number of VM's and \n    // launch individual CQ component runs.\n    // Each file found with extension .testsuite under /nfs/CQ/buyervm_configs, \n    // represents one individual component and their split\n    \n    println(\"Get list of Components and Split Suite lists form dir /nfs/CQ/buyervm_configs\")"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Run Components",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def componentsList = traverseComponentsList()\n\t \n          componentsList.sort()\n\t\t\t\t\n              def robot_vms_list = ['cqrobot70#10.169.54.16','cqrobot71#10.169.54.12','cqrobot710#10.169.54.14','cqrobot711#10.169.54.7','cqrobot712#10.169.54.28','cqrobot713#10.169.54.19','cqrobot714#10.169.54.22','cqrobot715#10.169.54.30','cqrobot72#10.169.54.18','cqrobot73#10.169.54.10','cqrobot74#10.169.54.29','cqrobot75#10.169.54.21','cqrobot76#10.169.54.9','cqrobot77#10.169.54.11','cqrobot78#10.169.54.8','cqrobot79#10.169.54.15']\n\n              def db_host_names = params.database_hostnames.split(\",\");\n              def arches_host_names = params.arches_hostnames.split(\",\");\t\n\t\t\t\t\n\t      def branches = [:]\n\t      for (int i = 0; i < robot_vms_list.size(); i++) {\n\t        \n\t        def index = i\n\t        def db_host = \"\"\n\t        def arches_host = \"\"\n\t        \n\t        if ( index % 2 == 0 )\n\t        {\n\t            db_host=db_host_names[0]\n\t            arches_host=arches_host_names[0]\n\t        }\n\t        else\n\t        {\n\t            db_host=db_host_names[1]\n\t            arches_host=arches_host_names[1]\n\t        }   \n\t        \n\t\t// get component name and split suite\n\t\tdef componentDetails = componentsList[index].split(',')\n\t\t//      def componentDetails = componentsList.split(',')\n\n\t\t// get robot host name and user name\n\t\t\n\t\tdef robot_vms = robot_vms_list[index].split('#')\n\n\t        println componentDetails[0] + \"-**-\" + componentDetails[1] + \"--**--\" + robot_vms[0] + \"--**--\" + robot_vms[1] + \"--**--\" + db_host + \"--**--\" + arches_host\n\t\t\n\t\tbranches[\"branch${i}\"] = {\n       \t        build job: 'cq-job-dev', parameters: [\n\t\t    string(name: 'robot_user_name', value: robot_vms[0]),\t\t    \n\t\t    string(name: 'robot_host_name', value: robot_vms[1]),\n\t\t    string(name: 'master_password', value:master_password),\n\t\t    string(name: 'cq_run_for_branch', value:final_branch_name),\n\t\t    string(name: 'component_name', value:componentDetails[0]),\n\t\t    string(name: 'split_suite', value: componentDetails[1]),\t\t    \n\t\t    string(name: 'cq_run_id', value:datedir),\n\t\t    string(name: 'buyer_product', value:buyer_product),\t\t    \n\t\t    string(name: 'buyer_build_name', value:buyer_build_name),\n\t\t    string(name: 'buyer_branch', value:buyer_branch),\n\t\t    string(name: 'ssws_product', value:ssws_product),\n\t\t    string(name: 'ssws_build_name', value:ssws_build_name),\n\t\t    string(name: 'ssws_branch', value:ssws_branch),\n\t\t    string(name: 'database_hostname', value:db_host),\n\t\t    string(name: 'database_sid', value:database_sid),\n\t\t    string(name: 'arches_host_name', value:arches_host),\t\t    \n\t\t    string(name: 'publish_arches', value:publish_arches),\n\t\t    string(name: 'actions', value:actions),]\n\t\t}\n\t    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Stage Archive",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "echo  3"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "agent": {
            "type": "any"
          },
          "parameters": {
            "parameters": [
              {
                "name": "string",
                "arguments": [
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": true,
                      "value": ""
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "Comma separated list of email receivers"
                    }
                  },
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "EMAIL_RECIPIENT"
                    }
                  }
                ]
              },
              {
                "name": "string",
                "arguments": [
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": true,
                      "value": ""
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": ""
                    }
                  },
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "master_password"
                    }
                  }
                ]
              },
              {
                "name": "string",
                "arguments": [
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": true,
                      "value": "buyer"
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "product name"
                    }
                  },
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "buyer_product"
                    }
                  }
                ]
              },
              {
                "name": "choice",
                "arguments": [
                  {
                    "key": "choices",
                    "value": {
                      "isLiteral": true,
                      "value": "dev\nrel\ntrunk"
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": ""
                    }
                  },
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "cq_run_for_branch"
                    }
                  }
                ]
              },
              {
                "name": "string",
                "arguments": [
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": true,
                      "value": "LATEST"
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "Product Build. Use LATEST if you want to pick up latest available build. Else, specify a particular build which you want to run CQ against"
                    }
                  },
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "buyer_build_name"
                    }
                  }
                ]
              },
              {
                "name": "choice",
                "arguments": [
                  {
                    "key": "choices",
                    "value": {
                      "isLiteral": true,
                      "value": "//ariba/ond/buyer/build/dev\n//ariba/ond/buyer/build/rel\n//ariba/ond/buyer/build/trunk"
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": ""
                    }
                  },
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "buyer_branch"
                    }
                  }
                ]
              },
              {
                "name": "choice",
                "arguments": [
                  {
                    "key": "choices",
                    "value": {
                      "isLiteral": true,
                      "value": "LQ-DEV\nLQ-TEST\nCoreBuyerDataSet"
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "SSWS Options"
                    }
                  },
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "buyer_datasetType"
                    }
                  }
                ]
              },
              {
                "name": "string",
                "arguments": [
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": true,
                      "value": "ssws"
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": ""
                    }
                  },
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "ssws_product"
                    }
                  }
                ]
              },
              {
                "name": "string",
                "arguments": [
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": true,
                      "value": "LATEST"
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "\tProduct Build. Use LATEST if you want to pick up latest available build. Else, specify a particular build which you want to run CQ against"
                    }
                  },
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "ssws_build_name"
                    }
                  }
                ]
              },
              {
                "name": "choice",
                "arguments": [
                  {
                    "key": "choices",
                    "value": {
                      "isLiteral": true,
                      "value": "//ariba/services/webserver/branch/rel/ssws\n"
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": ""
                    }
                  },
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "ssws_branch"
                    }
                  }
                ]
              },
              {
                "name": "string",
                "arguments": [
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": true,
                      "value": "10.169.54.45,10.169.54.50"
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "Database Options"
                    }
                  },
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "database_hostnames"
                    }
                  }
                ]
              },
              {
                "name": "string",
                "arguments": [
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": true,
                      "value": "BYRLQ101"
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": ""
                    }
                  },
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "database_sid"
                    }
                  }
                ]
              },
              {
                "name": "string",
                "arguments": [
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": true,
                      "value": "buildbox599.ariba.com,buildbox537.ariba.com"
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "Arches Options"
                    }
                  },
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "arches_hostnames"
                    }
                  }
                ]
              },
              {
                "name": "booleanParam",
                "arguments": [
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": true,
                      "value": false
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": ""
                    }
                  },
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "publish_arches"
                    }
                  }
                ]
              },
              {
                "name": "string",
                "arguments": [
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": true,
                      "value": "clean,bootstrap_env,create_host_cert_files,create_db_accounts,deploy_ssws_build,push_source_build,push_target_build,hack,restore_migrate,schoolschema_realms_setup_for_baseframework"
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "Arches Options"
                    }
                  },
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "actions"
                    }
                  }
                ]
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "ufz/ogs",
      "repo_url": "https://github.com/ufz/ogs",
      "html_url_jenkinsfile": "https://github.com/ufz/ogs/blob/315ff4a1f4c362f3505731b2dd8083fbd35b3454/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/1701384/git/blobs/aff531cf72bbbee1076dce2e04aae13f34317b21",
      "jenkins_pipeline": [
        {
          "error": "unable to resolve class ogs.helper \n @ line 564, column 28."
        }
      ]
    },
    {
      "full_repo_name": "zhangcl2002/cicd3.1",
      "repo_url": "https://github.com/zhangcl2002/cicd3.1",
      "html_url_jenkinsfile": "https://github.com/zhangcl2002/cicd3.1/blob/773dea3849f6cea02d6b359a0c675ace146cfc89/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/113588210/git/blobs/d230a021bfe319944d27b0aefabab59edfc61518",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "clean work space",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "cleanWs",
                      "arguments": []
                    }
                  ]
                }
              ]
            },
            {
              "name": "Check Out Code",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "checkout",
                      "arguments": [
                        {
                          "key": "scm",
                          "value": {
                            "isLiteral": false,
                            "value": "[$class: 'GitSCM', branches: [[name: \"*/${env.branch}\"]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'gitlab-user', url: env.scm_url]]]"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Sonarqube Scan",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "withSonarQubeEnv",
                      "arguments": {
                        "isLiteral": true,
                        "value": "sonarqube"
                      },
                      "children": [
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "mvn org.sonarsource.scanner.maven:sonar-maven-plugin:3.2:sonar"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Compile&Package",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "mvn package"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Unit Test",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "unit test"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Generate Docker Image",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "dir",
                      "arguments": {
                        "isLiteral": true,
                        "value": "docker"
                      },
                      "children": [
                        {
                          "name": "checkout",
                          "arguments": [
                            {
                              "key": "scm",
                              "value": {
                                "isLiteral": false,
                                "value": "[$class: 'GitSCM', branches: [[name: \"*/${env.dockerfile_branch}\"]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'gitlab-user', url: env.dockerfile_loc_url]]]"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": false,
                            "value": "${'sed -i \\'s@$application@\\'\\\"'+env.application_name+'\\\"\\'@g\\' docker/'+env.deploy_type+'-dockerfile'}"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": false,
                            "value": "${'sed -i \\'s@$image_template@\\'\\\"'+env.image_template+'\\\"\\'@g\\' docker/'+env.deploy_type+'-dockerfile'}"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": false,
                            "value": "${'sed -i \\'s@$log4j_stdout@\\'\\\"'+env.log4j_stdout+'\\\"\\'@g\\' docker/'+env.deploy_type+'-dockerfile'}"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": false,
                            "value": "${'sed -i \\'s@$elk_server@\\'\\\"'+env.elk_server+'\\\"\\'@g\\' docker/'+env.deploy_type+'-dockerfile'}"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": false,
                            "value": "${'sed -i \\'s@$imagelibrary@\\'\\\"'+env.image_library+'\\\"\\'@g\\' docker/'+env.deploy_type+'-dockerfile'}"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": false,
                            "value": "${'sed -i \\'s@$baseimage@\\'\\\"'+env.baseimage+'\\\"\\'@g\\' docker/'+env.deploy_type+'-dockerfile'}"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": false,
                            "value": "${'sed -i \\'s@$java_opts@\\'\\\"'+env.java_opts+'\\\"\\'@g\\' docker/'+env.deploy_type+'-dockerfile'}"
                          }
                        }
                      ]
                    },
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "docker.withRegistry(env.docker_registry,'registry-user'){\n                          docker.withServer(env.docker_server) {\n                             sh 'docker login -u admin -p Harbor123456'\n                             docker.build(env.image_library+'/'+env.application_name,'-f docker/'+env.deploy_type+'-dockerfile .').push(env.docker_tag)\n                          }                                \n                      }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "K8s Deploy",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def targetClusters\n                      def branches = [:]\n                      \n                      if (env.targetK8sCluster == 'allPrivateCloudCluster'){\n                         targetClusters= [\"k8s-dev-primary\",\"k8s-dev-backup\"]\n                      }\n                      else if (env.targetK8sCluster == 'onlyPrimaryCluster'){\n                         targetClusters= [\"k8s-dev-primary\"]\n                      }\n                      else if (env.targetK8sCluster == 'onlyBackupCluster'){\n                         targetClusters= [\"k8s-dev-backup\"]\n                      }  \n                     else if (env.targetK8sCluster == 'aliCluster'){\n                        targetClusters= [\"ali-k8s-dev\"]\n                     }\n                     else if (env.targetK8sCluster == 'fijiZone'){\n                        targetClusters= [\"fiji-k8s-master\"]\n                     }\n                     else if (env.targetK8sCluster == 'balticZone'){\n                        targetClusters= [\"baltic-k8s-master\"]\n                     }                     \n                      \n                      dir('docker'){\n                         sh 'git clone '+env.ingress_scm_url\n                      }\n                      \n                      for (int i = 0; i <  targetClusters.size(); i++) {\n                          def index = i // fresh variable per iteration; i will be mutated\n                          branches[targetClusters.get(index)] = {\n                            dir('docker'){\n                               sh 'chmod +x k8s-deploy.sh'                      \n                               sh './k8s-deploy.sh ${image_library} ${application_name} ${replicas} ${configmap} ${storage} ${expose_service} ${domain_name} ${context_path} ${docker_tag} ${probe_path} '+targetClusters.get(index)+' ${ingress_scm_url} '\n                            }     \n                          }\n                      }                  \n                      branches.failFast = true\n                      parallel  branches  \n                      \n                      \n                      dir('docker/k8s-dev-ingress'){\n                         sh 'pwd && git add . && if git status | grep nothing > /dev/null; then echo \\'no change\\'; else git commit -m \\'update ingress yaml\\' && git push origin master; fi '\n                      }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Notify & Over",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "notify"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "post": {
            "conditions": [
              {
                "condition": "success",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "emailext",
                      "arguments": [
                        {
                          "key": "subject",
                          "value": {
                            "isLiteral": false,
                            "value": "\"Jenkins Job Success: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'\""
                          }
                        },
                        {
                          "key": "body",
                          "value": {
                            "isLiteral": false,
                            "value": "\"\"\"<p>Success: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>  <p>You Can check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>\"\"\""
                          }
                        },
                        {
                          "key": "recipientProviders",
                          "value": {
                            "isLiteral": false,
                            "value": "${[[$class: 'DevelopersRecipientProvider'],[$class: 'RequesterRecipientProvider'], [$class: 'UpstreamComitterRecipientProvider'], [$class: 'FailingTestSuspectsRecipientProvider'], [$class: 'FirstFailingBuildSuspectsRecipientProvider']]}"
                          }
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "condition": "failure",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "emailext",
                      "arguments": [
                        {
                          "key": "subject",
                          "value": {
                            "isLiteral": false,
                            "value": "\"FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'\""
                          }
                        },
                        {
                          "key": "body",
                          "value": {
                            "isLiteral": false,
                            "value": "\"\"\"<p>FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>  <p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>\"\"\""
                          }
                        },
                        {
                          "key": "recipientProviders",
                          "value": {
                            "isLiteral": false,
                            "value": "${[[$class: 'DevelopersRecipientProvider'],[$class: 'RequesterRecipientProvider'], [$class: 'UpstreamComitterRecipientProvider'], [$class: 'FailingTestSuspectsRecipientProvider'], [$class: 'FirstFailingBuildSuspectsRecipientProvider']]}"
                          }
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "condition": "unstable",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "This will run only if the run was marked as unstable"
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          },
          "environment": [
            {
              "key": "application_name",
              "value": {
                "isLiteral": true,
                "value": "appName"
              }
            },
            {
              "key": "scm_url",
              "value": {
                "isLiteral": false,
                "value": "\"http://gitlab.aegonthtf.com/research/${env.application_name}.git\""
              }
            },
            {
              "key": "branch",
              "value": {
                "isLiteral": false,
                "value": "\"${params.BRANCH}\""
              }
            },
            {
              "key": "replicas",
              "value": {
                "isLiteral": true,
                "value": 2
              }
            },
            {
              "key": "deploy_type",
              "value": {
                "isLiteral": true,
                "value": "traditional"
              }
            },
            {
              "key": "java_opts",
              "value": {
                "isLiteral": true,
                "value": "-server -Dfile.encoding=UTF-8 -Duser.timezone=Asia/Shanghai"
              }
            },
            {
              "key": "baseimage",
              "value": {
                "isLiteral": true,
                "value": "tomcat:7.0-oracle-jre7"
              }
            },
            {
              "key": "expose_service",
              "value": {
                "isLiteral": true,
                "value": "false"
              }
            },
            {
              "key": "domain_name",
              "value": {
                "isLiteral": true,
                "value": "domainName.aegonthtf.com"
              }
            },
            {
              "key": "context_path",
              "value": {
                "isLiteral": true,
                "value": "/"
              }
            },
            {
              "key": "probe_path",
              "value": {
                "isLiteral": false,
                "value": "${env.context_path}health"
              }
            },
            {
              "key": "configmap",
              "value": {
                "isLiteral": true,
                "value": "default-tomcat-config"
              }
            },
            {
              "key": "storage",
              "value": {
                "isLiteral": true,
                "value": "false"
              }
            },
            {
              "key": "image_template",
              "value": {
                "isLiteral": true,
                "value": "template-dev"
              }
            },
            {
              "key": "image_library",
              "value": {
                "isLiteral": true,
                "value": "aegonthtf-dev"
              }
            },
            {
              "key": "elk_server",
              "value": {
                "isLiteral": true,
                "value": "logcenter-dev.aegonthtf.com"
              }
            },
            {
              "key": "log4j_stdout",
              "value": {
                "isLiteral": true,
                "value": "ELK"
              }
            },
            {
              "key": "targetK8sCluster",
              "value": {
                "isLiteral": true,
                "value": "designated zone"
              }
            },
            {
              "key": "docker_registry",
              "value": {
                "isLiteral": true,
                "value": "https://registry.aegonthtf.com/"
              }
            },
            {
              "key": "docker_server",
              "value": {
                "isLiteral": true,
                "value": "tcp://10.72.241.179:2376"
              }
            },
            {
              "key": "dockerfile_loc_url",
              "value": {
                "isLiteral": true,
                "value": "http://itoadmin@gitlab.aegonthtf.com/dev/aegonthtf-tomcat-cicd-factory.git"
              }
            },
            {
              "key": "dockerfile_branch",
              "value": {
                "isLiteral": false,
                "value": "\"${env.application_name}\""
              }
            },
            {
              "key": "ingress_scm_url",
              "value": {
                "isLiteral": true,
                "value": "http://itoadmin@gitlab.aegonthtf.com/dev/k8s-dev-ingress.git"
              }
            },
            {
              "key": "docker_tag",
              "value": {
                "isLiteral": false,
                "value": "\"${BUILD_NUMBER}\""
              }
            }
          ],
          "agent": {
            "type": "any"
          },
          "parameters": {
            "parameters": [
              {
                "name": "string",
                "arguments": [
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "BRANCH"
                    }
                  },
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": true,
                      "value": "master"
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "è¯·è¾å¥å¾é¨ç½²çåæ¯ææ ç­¾"
                    }
                  }
                ]
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "exoplatform/swf-release-manager",
      "repo_url": "https://github.com/exoplatform/swf-release-manager",
      "html_url_jenkinsfile": "https://github.com/exoplatform/swf-release-manager/blob/c03004c8cd22ac8171b4583b0ebd207e5e846f68/orchestrator/do-release/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/60533475/git/blobs/e098f41edef1a2cd06896d02ee807a56d5c18834",
      "jenkins_pipeline": [
        {
          "error": "Jenkinsfile content '#!/usr/bin/groovy\n@NonCPS\ndef jsonParser(def json) {\n    new groovy.json.JsonSlurperClassic().parse(json)\n}\n\ndef doRelease(exoUser, jenkinsAgentRootPath, jiraID, project, releaseCMD, isInParallel) {\n\n   def volume_name = \"${jiraID}-${project.name}-workspace\"\n   def container_name = \"${jiraID}-${project.name}\"\n   def container_run_option = \"\"\n   def docker_image = \"${project.container.image}\"\n\n   // Create the right command to run in the container\n   if (releaseCMD == \"start\"){\n        echo \"Create volume ${volume_name}\"\n        sh \"sudo docker volume create --name=${volume_name}\"\n        container_command = \"release-start ${project.name} ${jiraID}\"\n   } else if (releaseCMD == \"validate\"){\n       container_command = \"release-validate ${jiraID}\"\n   } else if (releaseCMD == \"cancel\"){\n       container_command = \"release-cancel ${project.name} ${jiraID}\" \n   } else if (releaseCMD == \"catalog-from-url\"){\n       container_command = \"catalog-from-url ${jiraID}\"\n   } else if (releaseCMD == \"release-continue-from nexus:create\"){\n       container_command = \"release-continue-from nexus:create\"\n   } else if (releaseCMD == \"release-continue-from nexus:deploy\"){\n       container_command = \"release-continue-from nexus:deploy\"\n   } else if (releaseCMD == \"release-continue-from nexus:close\"){\n       container_command = \"release-continue-from nexus:close\"\n   } else {\n       echo \"Nothing to do.\"\n   }\n\n   if (isInParallel == \"true\"){\n       container_run_option = \"-d\"\n   }\n\n   stage(\"Container ${container_name}\"){\n        sh \"sudo docker run --rm ${container_run_option} -v /${jenkinsAgentRootPath}/.gnupg/pubring.gpg:/home/ciagent/.gnupg/pubring.gpg:ro \\\n                -v /${jenkinsAgentRootPath}/.gnupg/secring.gpg:/home/ciagent/.gnupg/secring.gpg:ro \\\n                -v /${jenkinsAgentRootPath}/.gnupg/gpg.conf:/home/ciagent/.gnupg/gpg.conf:ro \\\n                -v /${jenkinsAgentRootPath}/.ssh/id_rsa:/home/ciagent/.ssh/id_rsa:ro \\\n                --env-file /${jenkinsAgentRootPath}/.eXo/Release/exo-release.properties \\\n                -e exo_user=${exoUser} \\\n                -e CATALOG_BASE_URL=${CATALOG_BASE_URL} \\\n                -v ${volume_name}:/opt/exo-release/workspace \\\n                -v ${jiraID}-m2_cache:/home/ciagent/.m2/repository \\\n                --name ${container_name} \\\n                ${docker_image} \\\n                \\\"${container_command}\\\"\"\n    }\n\n    //RELMAN-3:\n    if (releaseCMD == \"cancel\"){\n        stage(\"Container ${container_name} (cleanup)\"){\n            sh \"sudo docker volume rm ${volume_name}\"\n            sh \"sudo docker volume rm ${jiraID}-m2_cache\"\n        }\n    }\n    \n}\n\n// Read Datas from JSON Catalog and executes releases\ndef doReleases(exoUser, jenkinsAgentRootPath, jiraID, projectsToRelease, releaseCMD, isInParallel) {\n\n   def JSONCatalog = new URL(\"${CATALOG_BASE_URL}/${JIRA_ID}.json\")\n   def catalog = jsonParser(JSONCatalog.newReader())\n\n    echo \"Number of Projects in Catalog: ${catalog.size}\"\n    // Loop first on projectsToRelease to keep the order\n    for (i = 0; i < projectsToRelease.length; i++) {\n         def projectName = projectsToRelease[i];\n         for (j = 0; j < catalog.size; j++) {\n             if (catalog[j].name == projectName) {\n                doRelease(exoUser, jenkinsAgentRootPath, jiraID, catalog[j], releaseCMD, isInParallel)\n             }\n         }\n    }\n}\n\n// Execute Release on Jenkins Slave with Docker\nnode('docker') {\n\n  // Init parameters\n  stage \"Check Release parameters\"\n  def jiraID = \"${JIRA_ID}\"\n  def releaseCMD = \"${RELEASE_CMD}\"\n  def p = \"${PROJECTS}\"\n  def projectsToRelease = p.split(',')\n  def isInParallel = \"${RELEASE_PROJECTS_IN_PARALLEL}\"\n  def jenkinsAgentRootPath = \"${JENKINS_AGENT_ROOT_PATH}\"\n  def exoUser = \"${BUILD_USER_ID}\"\n  echo \"* Projects: ${PROJECTS}\"\n  echo \"* Command: ${RELEASE_CMD}\"\n  echo \"* Projects: ${PROJECTS}\"\n  echo \"* Releases in Parallel? ${isInParallel}\"\n\n  //Create m2 cache volume for the release\n  stage \"${JIRA_ID}-m2_cache\"\n  sh \"sudo docker volume create --name ${JIRA_ID}-m2_cache\"\n\n  doReleases(exoUser, jenkinsAgentRootPath, jiraID, projectsToRelease, releaseCMD, isInParallel)\n}\n' did not contain the 'pipeline' step"
        }
      ]
    },
    {
      "full_repo_name": "nemerosa/ontrack",
      "repo_url": "https://github.com/nemerosa/ontrack",
      "html_url_jenkinsfile": "https://github.com/nemerosa/ontrack/blob/48fe5c708dff48a0d67625a046d4ed9b014ca2b9/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/19351480/git/blobs/7e83b1adaa725f12d32d09da64f5f0490e8e5dc9",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Setup",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "branchName = ontrackBranchName(BRANCH_NAME)\n                    echo \"Ontrack branch name = ${branchName}\"\n                    pr = BRANCH_NAME ==~ 'PR-.*'"
                          }
                        }
                      ]
                    },
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "if (pr) {\n                        echo \"No Ontrack setup for PR.\"\n                    } else {\n                        echo \"Ontrack setup for ${branchName}\"\n                        ontrackBranchSetup(project: projectName, branch: branchName, script: \"\"\"\n                            branch.config {\n                                gitBranch '${branchName}', [\n                                    buildCommitLink: [\n                                        id: 'git-commit-property'\n                                    ]\n                                ]\n                            }\n                        \"\"\")\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "agent": {
                "type": "dockerfile",
                "arguments": [
                  {
                    "key": "label",
                    "value": {
                      "isLiteral": true,
                      "value": "docker"
                    }
                  },
                  {
                    "key": "args",
                    "value": {
                      "isLiteral": true,
                      "value": "--volume /var/run/docker.sock:/var/run/docker.sock"
                    }
                  }
                ]
              }
            },
            {
              "name": "Build",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "git checkout -B ${BRANCH_NAME}\ngit clean -xfd\n"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "./gradlew \\\n    clean \\\n    versionDisplay \\\n    versionFile \\\n    test \\\n    build \\\n    integrationTest \\\n    publishToMavenLocal \\\n    osPackages \\\n    dockerLatest \\\n    -Pdocumentation \\\n    -PbowerOptions='--allow-root' \\\n    -Dorg.gradle.jvmargs=-Xmx2048m \\\n    --stacktrace \\\n    --profile \\\n    --parallel \\\n    --console plain\n"
                          }
                        }
                      ]
                    },
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def props = readProperties(file: 'build/version.properties')\n                    version = props.VERSION_DISPLAY\n                    gitCommit = props.VERSION_COMMIT"
                          }
                        }
                      ]
                    },
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": false,
                            "value": "\"Version = ${version}\""
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": false,
                            "value": "\"\"\"\\\necho \"(*) Building the test extension...\"\ncd ontrack-extension-test\n./gradlew \\\\\n    clean \\\\\n    build \\\\\n    -PontrackVersion=${version} \\\\\n    -PbowerOptions='--allow-root' \\\\\n    -Dorg.gradle.jvmargs=-Xmx2048m \\\\\n    --stacktrace \\\\\n    --profile \\\\\n    --console plain\n\"\"\""
                          }
                        }
                      ]
                    },
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "Pushing image to registry..."
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": false,
                            "value": "\"\"\"\\\necho \\${DOCKER_REGISTRY_CREDENTIALS_PSW} | docker login docker.nemerosa.net --username \\${DOCKER_REGISTRY_CREDENTIALS_USR} --password-stdin\n\ndocker tag nemerosa/ontrack:${version} docker.nemerosa.net/nemerosa/ontrack:${version}\ndocker tag nemerosa/ontrack-acceptance:${version} docker.nemerosa.net/nemerosa/ontrack-acceptance:${version}\ndocker tag nemerosa/ontrack-extension-test:${version} docker.nemerosa.net/nemerosa/ontrack-extension-test:${version}\n\ndocker push docker.nemerosa.net/nemerosa/ontrack:${version}\ndocker push docker.nemerosa.net/nemerosa/ontrack-acceptance:${version}\ndocker push docker.nemerosa.net/nemerosa/ontrack-extension-test:${version}\n\"\"\""
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "agent": {
                "type": "dockerfile",
                "arguments": [
                  {
                    "key": "label",
                    "value": {
                      "isLiteral": true,
                      "value": "docker"
                    }
                  },
                  {
                    "key": "args",
                    "value": {
                      "isLiteral": true,
                      "value": "--volume /var/run/docker.sock:/var/run/docker.sock"
                    }
                  }
                ]
              },
              "post": {
                "conditions": [
                  {
                    "condition": "always",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "junit",
                          "arguments": [
                            {
                              "key": "testResults",
                              "value": {
                                "isLiteral": true,
                                "value": "**/build/test-results/**/*.xml"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  },
                  {
                    "condition": "success",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "script",
                          "arguments": [
                            {
                              "key": "scriptBlock",
                              "value": {
                                "isLiteral": true,
                                "value": "if (!pr) {\n                            ontrackBuild(project: projectName, branch: branchName, build: version, gitCommit: gitCommit)\n                        }"
                              }
                            }
                          ]
                        },
                        {
                          "name": "stash",
                          "arguments": [
                            {
                              "key": "name",
                              "value": {
                                "isLiteral": true,
                                "value": "delivery"
                              }
                            },
                            {
                              "key": "includes",
                              "value": {
                                "isLiteral": true,
                                "value": "build/distributions/ontrack-*-delivery.zip"
                              }
                            }
                          ]
                        },
                        {
                          "name": "stash",
                          "arguments": [
                            {
                              "key": "name",
                              "value": {
                                "isLiteral": true,
                                "value": "rpm"
                              }
                            },
                            {
                              "key": "includes",
                              "value": {
                                "isLiteral": true,
                                "value": "build/distributions/*.rpm"
                              }
                            }
                          ]
                        },
                        {
                          "name": "stash",
                          "arguments": [
                            {
                              "key": "name",
                              "value": {
                                "isLiteral": true,
                                "value": "debian"
                              }
                            },
                            {
                              "key": "includes",
                              "value": {
                                "isLiteral": true,
                                "value": "build/distributions/*.deb"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  }
                ]
              }
            },
            {
              "name": "Local acceptance tests",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "timeout",
                      "arguments": [
                        {
                          "key": "time",
                          "value": {
                            "isLiteral": true,
                            "value": 25
                          }
                        },
                        {
                          "key": "unit",
                          "value": {
                            "isLiteral": true,
                            "value": "MINUTES"
                          }
                        }
                      ],
                      "children": [
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "#!/bin/bash\nset -e\n\necho ${DOCKER_REGISTRY_CREDENTIALS_PSW} | docker login docker.nemerosa.net --username ${DOCKER_REGISTRY_CREDENTIALS_USR} --password-stdin\n\necho \"Launching tests...\"\ncd ontrack-acceptance/src/main/compose\ndocker-compose --project-name local up --exit-code-from ontrack_acceptance\n"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ],
              "agent": {
                "type": "dockerfile",
                "arguments": [
                  {
                    "key": "label",
                    "value": {
                      "isLiteral": true,
                      "value": "docker"
                    }
                  },
                  {
                    "key": "args",
                    "value": {
                      "isLiteral": true,
                      "value": "--volume /var/run/docker.sock:/var/run/docker.sock"
                    }
                  }
                ]
              },
              "post": {
                "conditions": [
                  {
                    "condition": "always",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "#!/bin/bash\nset -e\necho \"Cleanup...\"\nmkdir -p build\ncp -r ontrack-acceptance/src/main/compose/build build/acceptance\ncd ontrack-acceptance/src/main/compose\ndocker-compose --project-name local down --volumes\n"
                              }
                            }
                          ]
                        },
                        {
                          "name": "junit",
                          "arguments": [
                            {
                              "key": "testResults",
                              "value": {
                                "isLiteral": true,
                                "value": "build/acceptance/*.xml"
                              }
                            }
                          ]
                        },
                        {
                          "name": "script",
                          "arguments": [
                            {
                              "key": "scriptBlock",
                              "value": {
                                "isLiteral": true,
                                "value": "if (!pr) {\n                            ontrackValidate(\n                                    project: projectName,\n                                    branch: branchName,\n                                    build: version,\n                                    validationStamp: 'ACCEPTANCE',\n                                    buildResult: currentBuild.result,\n                            )\n                        }"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  }
                ]
              },
              "environment": [
                {
                  "key": "ONTRACK_VERSION",
                  "value": {
                    "isLiteral": false,
                    "value": "\"${version}\""
                  }
                }
              ]
            },
            {
              "name": "Platform tests",
              "parallel": [
                {
                  "name": "CentOS7",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "unstash",
                          "arguments": [
                            {
                              "key": "name",
                              "value": {
                                "isLiteral": true,
                                "value": "rpm"
                              }
                            }
                          ]
                        },
                        {
                          "name": "timeout",
                          "arguments": [
                            {
                              "key": "time",
                              "value": {
                                "isLiteral": true,
                                "value": 25
                              }
                            },
                            {
                              "key": "unit",
                              "value": {
                                "isLiteral": true,
                                "value": "MINUTES"
                              }
                            }
                          ],
                          "children": [
                            {
                              "name": "sh",
                              "arguments": [
                                {
                                  "key": "script",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "#!/bin/bash\nset -e\n\necho ${DOCKER_REGISTRY_CREDENTIALS_PSW} | docker login docker.nemerosa.net --username ${DOCKER_REGISTRY_CREDENTIALS_USR} --password-stdin\n\necho \"Preparing environment...\"\nDOCKER_DIR=ontrack-acceptance/src/main/compose/os/centos/7/docker\nrm -f ${DOCKER_DIR}/*.rpm\ncp build/distributions/*rpm ${DOCKER_DIR}/ontrack.rpm\n\necho \"Launching test environment...\"\ncd ontrack-acceptance/src/main/compose\ndocker-compose --project-name centos --file docker-compose-centos-7.yml up --build -d ontrack\n\necho \"Launching Ontrack in CentOS environment...\"\nCONTAINER=`docker-compose --project-name centos --file docker-compose-centos-7.yml ps -q ontrack`\necho \"... for container ${CONTAINER}\"\ndocker container exec ${CONTAINER} /etc/init.d/ontrack start\n\necho \"Launching tests...\"\ndocker-compose --project-name centos --file docker-compose-centos-7.yml up --exit-code-from ontrack_acceptance ontrack_acceptance\n"
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ],
                  "agent": {
                    "type": "dockerfile",
                    "arguments": [
                      {
                        "key": "label",
                        "value": {
                          "isLiteral": true,
                          "value": "docker"
                        }
                      },
                      {
                        "key": "args",
                        "value": {
                          "isLiteral": true,
                          "value": "--volume /var/run/docker.sock:/var/run/docker.sock"
                        }
                      }
                    ]
                  },
                  "post": {
                    "conditions": [
                      {
                        "condition": "always",
                        "branch": {
                          "name": "default",
                          "steps": [
                            {
                              "name": "sh",
                              "arguments": [
                                {
                                  "key": "script",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "#!/bin/bash\nset -e\necho \"Cleanup...\"\nmkdir -p build\ncp -r ontrack-acceptance/src/main/compose/build build/centos\ncd ontrack-acceptance/src/main/compose\ndocker-compose --project-name centos --file docker-compose-centos-7.yml down --volumes\n"
                                  }
                                }
                              ]
                            },
                            {
                              "name": "junit",
                              "arguments": [
                                {
                                  "key": "testResults",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "build/centos/*.xml"
                                  }
                                }
                              ]
                            },
                            {
                              "name": "ontrackValidate",
                              "arguments": [
                                {
                                  "key": "project",
                                  "value": {
                                    "isLiteral": false,
                                    "value": "${projectName}"
                                  }
                                },
                                {
                                  "key": "branch",
                                  "value": {
                                    "isLiteral": false,
                                    "value": "${branchName}"
                                  }
                                },
                                {
                                  "key": "build",
                                  "value": {
                                    "isLiteral": false,
                                    "value": "${version}"
                                  }
                                },
                                {
                                  "key": "validationStamp",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "ACCEPTANCE.CENTOS.7"
                                  }
                                },
                                {
                                  "key": "buildResult",
                                  "value": {
                                    "isLiteral": false,
                                    "value": "${currentBuild.result}"
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "Debian",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "unstash",
                          "arguments": [
                            {
                              "key": "name",
                              "value": {
                                "isLiteral": true,
                                "value": "debian"
                              }
                            }
                          ]
                        },
                        {
                          "name": "timeout",
                          "arguments": [
                            {
                              "key": "time",
                              "value": {
                                "isLiteral": true,
                                "value": 25
                              }
                            },
                            {
                              "key": "unit",
                              "value": {
                                "isLiteral": true,
                                "value": "MINUTES"
                              }
                            }
                          ],
                          "children": [
                            {
                              "name": "sh",
                              "arguments": [
                                {
                                  "key": "script",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "#!/bin/bash\nset -e\n\necho ${DOCKER_REGISTRY_CREDENTIALS_PSW} | docker login docker.nemerosa.net --username ${DOCKER_REGISTRY_CREDENTIALS_USR} --password-stdin\n\necho \"Preparing environment...\"\nDOCKER_DIR=ontrack-acceptance/src/main/compose/os/debian/docker\nrm -f ${DOCKER_DIR}/*.deb\ncp build/distributions/*.deb ${DOCKER_DIR}/ontrack.deb\n\necho \"Launching test environment...\"\ncd ontrack-acceptance/src/main/compose\ndocker-compose --project-name debian --file docker-compose-debian.yml up --build -d ontrack\n\necho \"Launching Ontrack in Debian environment...\"\nCONTAINER=`docker-compose --project-name debian --file docker-compose-debian.yml ps -q ontrack`\necho \"... for container ${CONTAINER}\"\ndocker container exec ${CONTAINER} /etc/init.d/ontrack start\n\necho \"Launching tests...\"\ndocker-compose --project-name debian --file docker-compose-debian.yml up --build --exit-code-from ontrack_acceptance ontrack_acceptance\n"
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ],
                  "agent": {
                    "type": "dockerfile",
                    "arguments": [
                      {
                        "key": "label",
                        "value": {
                          "isLiteral": true,
                          "value": "docker"
                        }
                      },
                      {
                        "key": "args",
                        "value": {
                          "isLiteral": true,
                          "value": "--volume /var/run/docker.sock:/var/run/docker.sock"
                        }
                      }
                    ]
                  },
                  "post": {
                    "conditions": [
                      {
                        "condition": "always",
                        "branch": {
                          "name": "default",
                          "steps": [
                            {
                              "name": "sh",
                              "arguments": [
                                {
                                  "key": "script",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "#!/bin/bash\nset -e\necho \"Cleanup...\"\nmkdir -p build/debian\ncp -r ontrack-acceptance/src/main/compose/build/* build/debian/\ncd ontrack-acceptance/src/main/compose\ndocker-compose --project-name debian --file docker-compose-debian.yml down --volumes\n"
                                  }
                                }
                              ]
                            },
                            {
                              "name": "junit",
                              "arguments": [
                                {
                                  "key": "testResults",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "build/debian/*.xml"
                                  }
                                }
                              ]
                            },
                            {
                              "name": "ontrackValidate",
                              "arguments": [
                                {
                                  "key": "project",
                                  "value": {
                                    "isLiteral": false,
                                    "value": "${projectName}"
                                  }
                                },
                                {
                                  "key": "branch",
                                  "value": {
                                    "isLiteral": false,
                                    "value": "${branchName}"
                                  }
                                },
                                {
                                  "key": "build",
                                  "value": {
                                    "isLiteral": false,
                                    "value": "${version}"
                                  }
                                },
                                {
                                  "key": "validationStamp",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "ACCEPTANCE.DEBIAN"
                                  }
                                },
                                {
                                  "key": "buildResult",
                                  "value": {
                                    "isLiteral": false,
                                    "value": "${currentBuild.result}"
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "Local extension tests",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "timeout",
                          "arguments": [
                            {
                              "key": "time",
                              "value": {
                                "isLiteral": true,
                                "value": 25
                              }
                            },
                            {
                              "key": "unit",
                              "value": {
                                "isLiteral": true,
                                "value": "MINUTES"
                              }
                            }
                          ],
                          "children": [
                            {
                              "name": "sh",
                              "arguments": [
                                {
                                  "key": "script",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "rm -rf ontrack-acceptance/src/main/compose/build\n"
                                  }
                                }
                              ]
                            },
                            {
                              "name": "sh",
                              "arguments": [
                                {
                                  "key": "script",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "#!/bin/bash\nset -e\n\necho ${DOCKER_REGISTRY_CREDENTIALS_PSW} | docker login docker.nemerosa.net --username ${DOCKER_REGISTRY_CREDENTIALS_USR} --password-stdin\n\necho \"Launching tests...\"\ncd ontrack-acceptance/src/main/compose\ndocker-compose --project-name ext --file docker-compose-ext.yml up --exit-code-from ontrack_acceptance\n"
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ],
                  "agent": {
                    "type": "dockerfile",
                    "arguments": [
                      {
                        "key": "label",
                        "value": {
                          "isLiteral": true,
                          "value": "docker"
                        }
                      },
                      {
                        "key": "args",
                        "value": {
                          "isLiteral": true,
                          "value": "--volume /var/run/docker.sock:/var/run/docker.sock"
                        }
                      }
                    ]
                  },
                  "post": {
                    "conditions": [
                      {
                        "condition": "always",
                        "branch": {
                          "name": "default",
                          "steps": [
                            {
                              "name": "sh",
                              "arguments": [
                                {
                                  "key": "script",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "echo \"Cleanup...\"\nmkdir -p build\nrm -rf build/extension\ncp -r ontrack-acceptance/src/main/compose/build build/extension\ncd ontrack-acceptance/src/main/compose\ndocker-compose --project-name ext --file docker-compose-ext.yml down --volumes\n"
                                  }
                                }
                              ]
                            },
                            {
                              "name": "junit",
                              "arguments": [
                                {
                                  "key": "testResults",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "build/extension/*.xml"
                                  }
                                }
                              ]
                            },
                            {
                              "name": "ontrackValidate",
                              "arguments": [
                                {
                                  "key": "project",
                                  "value": {
                                    "isLiteral": false,
                                    "value": "${projectName}"
                                  }
                                },
                                {
                                  "key": "branch",
                                  "value": {
                                    "isLiteral": false,
                                    "value": "${branchName}"
                                  }
                                },
                                {
                                  "key": "build",
                                  "value": {
                                    "isLiteral": false,
                                    "value": "${version}"
                                  }
                                },
                                {
                                  "key": "validationStamp",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "EXTENSIONS"
                                  }
                                },
                                {
                                  "key": "buildResult",
                                  "value": {
                                    "isLiteral": false,
                                    "value": "${currentBuild.result}"
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "Digital Ocean",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "timeout",
                          "arguments": [
                            {
                              "key": "time",
                              "value": {
                                "isLiteral": true,
                                "value": 60
                              }
                            },
                            {
                              "key": "unit",
                              "value": {
                                "isLiteral": true,
                                "value": "MINUTES"
                              }
                            }
                          ],
                          "children": [
                            {
                              "name": "sh",
                              "arguments": [
                                {
                                  "key": "script",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "#!/bin/bash\n\necho \"(*) Cleanup...\"\nrm -rf ontrack-acceptance/src/main/compose/build\n\necho \"(*) Removing any previous machine: ${DROPLET_NAME}...\"\ndocker-machine rm --force ${DROPLET_NAME} > /dev/null\n\n# Failing on first error from now on\nset -e\n\necho \"(*) Creating ${DROPLET_NAME} droplet...\"\ndocker-machine create \\\n    --driver=digitalocean \\\n    --digitalocean-access-token=${DO_TOKEN} \\\n    --digitalocean-image=docker \\\n    --digitalocean-region=fra1 \\\n    --digitalocean-size=1gb \\\n    --digitalocean-backups=false \\\n    ${DROPLET_NAME}\n\necho \"(*) Gets ${DROPLET_NAME} droplet IP...\"\nDROPLET_IP=`docker-machine ip ${DROPLET_NAME}`\necho \"Droplet IP = ${DROPLET_IP}\"\n\necho \"(*) Target Ontrack application...\"\nexport ONTRACK_ACCEPTANCE_TARGET_URL=\"http://${DROPLET_IP}:8080\"\n\necho \"(*) Launching the remote Ontrack ecosystem...\"\neval $(docker-machine env --shell bash ${DROPLET_NAME})\necho ${DOCKER_REGISTRY_CREDENTIALS_PSW} | docker login docker.nemerosa.net --username ${DOCKER_REGISTRY_CREDENTIALS_USR} --password-stdin\ndocker-compose \\\n    --file ontrack-acceptance/src/main/compose/docker-compose-do-server.yml \\\n    --project-name ontrack \\\n    up -d\n\necho \"(*) Running the tests...\"\neval $(docker-machine env --shell bash --unset)\necho ${DOCKER_REGISTRY_CREDENTIALS_PSW} | docker login docker.nemerosa.net --username ${DOCKER_REGISTRY_CREDENTIALS_USR} --password-stdin\ndocker-compose \\\n    --file ontrack-acceptance/src/main/compose/docker-compose-do-client.yml \\\n    --project-name do \\\n    up --exit-code-from ontrack_acceptance\n\n"
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ],
                  "agent": {
                    "type": "dockerfile",
                    "arguments": [
                      {
                        "key": "label",
                        "value": {
                          "isLiteral": true,
                          "value": "docker"
                        }
                      },
                      {
                        "key": "args",
                        "value": {
                          "isLiteral": true,
                          "value": "--volume /var/run/docker.sock:/var/run/docker.sock"
                        }
                      }
                    ]
                  },
                  "post": {
                    "conditions": [
                      {
                        "condition": "always",
                        "branch": {
                          "name": "default",
                          "steps": [
                            {
                              "name": "sh",
                              "arguments": [
                                {
                                  "key": "script",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "#!/bin/bash\n\necho \"(*) Copying the test results...\"\nmkdir -p build\nrm -rf build/do\ncp -r ontrack-acceptance/src/main/compose/build build/do\n\necho \"(*) Removing the test environment...\"\ndocker-compose \\\n    --file ontrack-acceptance/src/main/compose/docker-compose-do-client.yml \\\n    --project-name do \\\n    down\n\necho \"(*) Removing any previous machine: ${DROPLET_NAME}...\"\ndocker-machine rm --force ${DROPLET_NAME}\n"
                                  }
                                }
                              ]
                            },
                            {
                              "name": "junit",
                              "arguments": [
                                {
                                  "key": "testResults",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "build/do/*.xml"
                                  }
                                }
                              ]
                            },
                            {
                              "name": "ontrackValidate",
                              "arguments": [
                                {
                                  "key": "project",
                                  "value": {
                                    "isLiteral": false,
                                    "value": "${projectName}"
                                  }
                                },
                                {
                                  "key": "branch",
                                  "value": {
                                    "isLiteral": false,
                                    "value": "${branchName}"
                                  }
                                },
                                {
                                  "key": "build",
                                  "value": {
                                    "isLiteral": false,
                                    "value": "${version}"
                                  }
                                },
                                {
                                  "key": "validationStamp",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "ACCEPTANCE.DO"
                                  }
                                },
                                {
                                  "key": "buildResult",
                                  "value": {
                                    "isLiteral": false,
                                    "value": "${currentBuild.result}"
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "environment": [
                    {
                      "key": "DROPLET_NAME",
                      "value": {
                        "isLiteral": false,
                        "value": "\"ontrack-acceptance-${version}\""
                      }
                    },
                    {
                      "key": "DO_TOKEN",
                      "value": {
                        "name": "credentials",
                        "arguments": [
                          {
                            "isLiteral": true,
                            "value": "DO_NEMEROSA_JENKINS2_BUILD"
                          }
                        ]
                      }
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "branch",
                    "arguments": {
                      "isLiteral": true,
                      "value": "release/*"
                    }
                  }
                ]
              },
              "environment": [
                {
                  "key": "ONTRACK_VERSION",
                  "value": {
                    "isLiteral": false,
                    "value": "\"${version}\""
                  }
                }
              ]
            },
            {
              "name": "Publication",
              "parallel": [
                {
                  "name": "Docker Hub",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "echo",
                          "arguments": [
                            {
                              "key": "message",
                              "value": {
                                "isLiteral": true,
                                "value": "Docker push"
                              }
                            }
                          ]
                        },
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "#!/bin/bash\nset -e\n\necho \"Making sure the images are available on this node...\"\n\necho ${DOCKER_REGISTRY_CREDENTIALS_PSW} | docker login docker.nemerosa.net --username ${DOCKER_REGISTRY_CREDENTIALS_USR} --password-stdin\ndocker image pull docker.nemerosa.net/nemerosa/ontrack:${ONTRACK_VERSION}\n\necho \"Publishing in Docker Hub...\"\n\necho ${DOCKER_HUB_PSW} | docker login --username ${DOCKER_HUB_USR} --password-stdin\n\ndocker image tag docker.nemerosa.net/nemerosa/ontrack:${ONTRACK_VERSION} nemerosa/ontrack:${ONTRACK_VERSION}\ndocker image tag docker.nemerosa.net/nemerosa/ontrack:${ONTRACK_VERSION} nemerosa/ontrack:2\ndocker image tag docker.nemerosa.net/nemerosa/ontrack:${ONTRACK_VERSION} nemerosa/ontrack:latest\n\ndocker image push nemerosa/ontrack:${ONTRACK_VERSION}\ndocker image push nemerosa/ontrack:2\ndocker image push nemerosa/ontrack:latest\n"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ],
                  "agent": {
                    "type": "dockerfile",
                    "arguments": [
                      {
                        "key": "label",
                        "value": {
                          "isLiteral": true,
                          "value": "docker"
                        }
                      },
                      {
                        "key": "args",
                        "value": {
                          "isLiteral": true,
                          "value": "--volume /var/run/docker.sock:/var/run/docker.sock"
                        }
                      }
                    ]
                  },
                  "environment": [
                    {
                      "key": "DOCKER_HUB",
                      "value": {
                        "name": "credentials",
                        "arguments": [
                          {
                            "isLiteral": true,
                            "value": "DOCKER_HUB"
                          }
                        ]
                      }
                    }
                  ]
                },
                {
                  "name": "Maven publication",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "echo",
                          "arguments": [
                            {
                              "key": "message",
                              "value": {
                                "isLiteral": true,
                                "value": "Maven publication"
                              }
                            }
                          ]
                        },
                        {
                          "name": "unstash",
                          "arguments": [
                            {
                              "key": "name",
                              "value": {
                                "isLiteral": true,
                                "value": "delivery"
                              }
                            }
                          ]
                        },
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "#!/bin/bash\nset -e\nunzip -n build/distributions/ontrack-${ONTRACK_VERSION}-delivery.zip -d ${WORKSPACE}\nunzip -n ${WORKSPACE}/ontrack-publication.zip -d publication\n"
                              }
                            }
                          ]
                        },
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "#!/bin/bash\nset -e\n\n./gradlew \\\n    --build-file publication.gradle \\\n    --info \\\n    --profile \\\n    --console plain \\\n    --stacktrace \\\n    -PontrackVersion=${ONTRACK_VERSION} \\\n    -PontrackVersionCommit=${ONTRACK_COMMIT} \\\n    -PontrackReleaseBranch=${ONTRACK_BRANCH} \\\n    -Psigning.keyId=${GPG_KEY_USR} \\\n    -Psigning.password=${GPG_KEY_PSW} \\\n    -Psigning.secretKeyRingFile=${GPG_KEY_RING} \\\n    -PossrhUser=${OSSRH_USR} \\\n    -PossrhPassword=${OSSRH_PSW} \\\n    publicationMaven\n"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ],
                  "agent": {
                    "type": "dockerfile",
                    "arguments": [
                      {
                        "key": "label",
                        "value": {
                          "isLiteral": true,
                          "value": "docker"
                        }
                      },
                      {
                        "key": "args",
                        "value": {
                          "isLiteral": true,
                          "value": "--volume /var/run/docker.sock:/var/run/docker.sock"
                        }
                      }
                    ]
                  },
                  "environment": [
                    {
                      "key": "ONTRACK_COMMIT",
                      "value": {
                        "isLiteral": false,
                        "value": "\"${gitCommit}\""
                      }
                    },
                    {
                      "key": "ONTRACK_BRANCH",
                      "value": {
                        "isLiteral": false,
                        "value": "\"${branchName}\""
                      }
                    },
                    {
                      "key": "GPG_KEY",
                      "value": {
                        "name": "credentials",
                        "arguments": [
                          {
                            "isLiteral": true,
                            "value": "GPG_KEY"
                          }
                        ]
                      }
                    },
                    {
                      "key": "GPG_KEY_RING",
                      "value": {
                        "name": "credentials",
                        "arguments": [
                          {
                            "isLiteral": true,
                            "value": "GPG_KEY_RING"
                          }
                        ]
                      }
                    },
                    {
                      "key": "OSSRH",
                      "value": {
                        "name": "credentials",
                        "arguments": [
                          {
                            "isLiteral": true,
                            "value": "OSSRH"
                          }
                        ]
                      }
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "branch",
                    "arguments": {
                      "isLiteral": true,
                      "value": "release/*"
                    }
                  }
                ]
              },
              "environment": [
                {
                  "key": "ONTRACK_VERSION",
                  "value": {
                    "isLiteral": false,
                    "value": "\"${version}\""
                  }
                }
              ]
            },
            {
              "name": "Release",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "Release"
                          }
                        }
                      ]
                    },
                    {
                      "name": "unstash",
                      "arguments": [
                        {
                          "key": "name",
                          "value": {
                            "isLiteral": true,
                            "value": "delivery"
                          }
                        }
                      ]
                    },
                    {
                      "name": "unstash",
                      "arguments": [
                        {
                          "key": "name",
                          "value": {
                            "isLiteral": true,
                            "value": "rpm"
                          }
                        }
                      ]
                    },
                    {
                      "name": "unstash",
                      "arguments": [
                        {
                          "key": "name",
                          "value": {
                            "isLiteral": true,
                            "value": "debian"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "#!/bin/bash\nset -e\nunzip -n build/distributions/ontrack-${ONTRACK_VERSION}-delivery.zip -d ${WORKSPACE}\nunzip -n ${WORKSPACE}/ontrack-publication.zip -d publication\n"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "#!/bin/bash\nset -e\n\n./gradlew \\\n    --build-file publication.gradle \\\n    --info \\\n    --profile \\\n    --console plain \\\n    --stacktrace \\\n    -PontrackVersion=${ONTRACK_VERSION} \\\n    -PontrackVersionCommit=${ONTRACK_COMMIT} \\\n    -PontrackReleaseBranch=${ONTRACK_BRANCH} \\\n    -PgitHubUser=${GITHUB_USR} \\\n    -PgitHubPassword=${GITHUB_PSW} \\\n    publicationRelease\n"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "agent": {
                "type": "dockerfile",
                "arguments": [
                  {
                    "key": "label",
                    "value": {
                      "isLiteral": true,
                      "value": "docker"
                    }
                  },
                  {
                    "key": "args",
                    "value": {
                      "isLiteral": true,
                      "value": "--volume /var/run/docker.sock:/var/run/docker.sock"
                    }
                  }
                ]
              },
              "when": {
                "conditions": [
                  {
                    "name": "branch",
                    "arguments": {
                      "isLiteral": true,
                      "value": "release/*"
                    }
                  }
                ]
              },
              "post": {
                "conditions": [
                  {
                    "condition": "success",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "ontrackPromote",
                          "arguments": [
                            {
                              "key": "project",
                              "value": {
                                "isLiteral": false,
                                "value": "${projectName}"
                              }
                            },
                            {
                              "key": "branch",
                              "value": {
                                "isLiteral": false,
                                "value": "${branchName}"
                              }
                            },
                            {
                              "key": "build",
                              "value": {
                                "isLiteral": false,
                                "value": "${version}"
                              }
                            },
                            {
                              "key": "promotionLevel",
                              "value": {
                                "isLiteral": true,
                                "value": "RELEASE"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  }
                ]
              },
              "environment": [
                {
                  "key": "ONTRACK_VERSION",
                  "value": {
                    "isLiteral": false,
                    "value": "\"${version}\""
                  }
                },
                {
                  "key": "ONTRACK_COMMIT",
                  "value": {
                    "isLiteral": false,
                    "value": "\"${gitCommit}\""
                  }
                },
                {
                  "key": "ONTRACK_BRANCH",
                  "value": {
                    "isLiteral": false,
                    "value": "\"${branchName}\""
                  }
                },
                {
                  "key": "GITHUB",
                  "value": {
                    "name": "credentials",
                    "arguments": [
                      {
                        "isLiteral": true,
                        "value": "GITHUB_NEMEROSA_JENKINS2"
                      }
                    ]
                  }
                }
              ]
            },
            {
              "name": "Site",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "Release"
                          }
                        }
                      ]
                    },
                    {
                      "name": "unstash",
                      "arguments": [
                        {
                          "key": "name",
                          "value": {
                            "isLiteral": true,
                            "value": "delivery"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "#!/bin/bash\nset -e\nunzip -n build/distributions/ontrack-${ONTRACK_VERSION}-delivery.zip -d ${WORKSPACE}\nunzip -n ${WORKSPACE}/ontrack-publication.zip -d publication\n"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "#!/bin/bash\nset -e\n\nGITHUB_URI=`git config remote.origin.url`\n\n./gradlew \\\n    --build-file site.gradle \\\n    --info \\\n    --profile \\\n    --console plain \\\n    --stacktrace \\\n    -PontrackVersion=${ONTRACK_VERSION} \\\n    -PontrackGitHubUri=${GITHUB_URI} \\\n    -PontrackGitHubPages=gh-pages \\\n    -PontrackGitHubUser=${GITHUB_USR} \\\n    -PontrackGitHubPassword=${GITHUB_PSW} \\\n    site\n"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "agent": {
                "type": "dockerfile",
                "arguments": [
                  {
                    "key": "label",
                    "value": {
                      "isLiteral": true,
                      "value": "docker"
                    }
                  },
                  {
                    "key": "args",
                    "value": {
                      "isLiteral": true,
                      "value": "--volume /var/run/docker.sock:/var/run/docker.sock"
                    }
                  }
                ]
              },
              "when": {
                "conditions": [
                  {
                    "name": "branch",
                    "arguments": {
                      "isLiteral": true,
                      "value": "release/*"
                    }
                  }
                ]
              },
              "post": {
                "conditions": [
                  {
                    "condition": "success",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "ontrackValidate",
                          "arguments": [
                            {
                              "key": "project",
                              "value": {
                                "isLiteral": false,
                                "value": "${projectName}"
                              }
                            },
                            {
                              "key": "branch",
                              "value": {
                                "isLiteral": false,
                                "value": "${branchName}"
                              }
                            },
                            {
                              "key": "build",
                              "value": {
                                "isLiteral": false,
                                "value": "${version}"
                              }
                            },
                            {
                              "key": "validationStamp",
                              "value": {
                                "isLiteral": true,
                                "value": "SITE"
                              }
                            },
                            {
                              "key": "buildResult",
                              "value": {
                                "isLiteral": false,
                                "value": "${currentBuild.result}"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  }
                ]
              },
              "environment": [
                {
                  "key": "ONTRACK_VERSION",
                  "value": {
                    "isLiteral": false,
                    "value": "\"${version}\""
                  }
                },
                {
                  "key": "GITHUB",
                  "value": {
                    "name": "credentials",
                    "arguments": [
                      {
                        "isLiteral": true,
                        "value": "GITHUB_NEMEROSA_JENKINS2"
                      }
                    ]
                  }
                }
              ]
            }
          ],
          "environment": [
            {
              "key": "DOCKER_REGISTRY_CREDENTIALS",
              "value": {
                "name": "credentials",
                "arguments": [
                  {
                    "isLiteral": true,
                    "value": "DOCKER_NEMEROSA"
                  }
                ]
              }
            }
          ],
          "agent": {
            "type": "none"
          },
          "options": {
            "options": [
              {
                "name": "buildDiscarder",
                "arguments": [
                  {
                    "name": "logRotator",
                    "arguments": [
                      {
                        "key": "numToKeepStr",
                        "value": {
                          "isLiteral": true,
                          "value": "40"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "name": "timestamps",
                "arguments": []
              },
              {
                "name": "durabilityHint",
                "arguments": [
                  {
                    "isLiteral": true,
                    "value": "PERFORMANCE_OPTIMIZED"
                  }
                ]
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "chanunc/cvhr_jenkins",
      "repo_url": "https://github.com/chanunc/cvhr_jenkins",
      "html_url_jenkinsfile": "https://github.com/chanunc/cvhr_jenkins/blob/552384ab6d6d6729fcbe465ee983025a5e201fa1/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/98661151/git/blobs/321f348a406f02e15be500d0b5c4d54c6703a90a",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Pre-tasks execution",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "printenv | sort"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": false,
                            "value": "\"civibuild destroy ${params.CVHR_BUILDNAME} || true\""
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "amp test"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Build site",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def buildBranch = params.CVHR_BRANCH != '' ? params.CVHR_BRANCH : env.CHANGE_TARGET != null ? env.CHANGE_TARGET : env.BRANCH_NAME != null ? env.BRANCH_NAME : 'staging'\n\t\t\t\t\t\n\t\t\t\t\t// DEBUG\n\t\t\t\t\techo \"Build branch: ${buildBranch}\"\n\n\t\t\t\t\t// Build site with CV Buildkit\n\t\t\t\t\techo 'Build site with CV Buildkit'\n\t\t\t\t\tsh \"civibuild create ${params.CVHR_BUILDNAME} --type hr16 --civi-ver 4.7.18 --hr-ver ${buildBranch} --url $WEBURL --admin-pass $ADMIN_PASS\"\n\n\t\t\t\t\t// Change git remote of civihr ext to support dev version of Jenkins pipeline\n\t\t\t\t\tchangeCivihrGitRemote()\n\n\t\t\t\t\t// Get repos & branch name\n\t\t\t\t\tdef prBranch = env.CHANGE_BRANCH\n\t\t\t\t\tdef envBranch = env.CHANGE_TARGET\n\t\t\t\t\tif (prBranch != null && prBranch.startsWith(\"hotfix-\")) {\n\t\t\t\t\t\tenvBranch = 'master'\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// DEBUG\n\t\t\t\t\techo \"envBranch: ${envBranch} prBranch: ${prBranch}\"\n\n\t\t\t\t\t// Checkout PR Branch in CiviHR repos\n\t\t\t\t\techo 'Checking out CiviHR repos..'\n\t\t\t\t\tsh \"\"\"\n\t\t\t\t\t\tcd $CVCRM_EXT_ROOT\n\t\t\t\t\t\tgit-scan foreach -c \\\"git checkout -b testing-${prBranch} --track remotes/origin/${prBranch}\\\" || true\n\t\t\t\t\t\"\"\"\n\n\t\t\t\t\t// Merge PR Branch in CiviHR repos\n\t\t\t\t\tdef cvhrRepos = listCivihrRepos()\n\t\t\t\t\tfor (int i=0; i<cvhrRepos.size(); i++) {\n\t\t\t\t\t\ttokens = cvhrRepos[i].tokenize('/');\n\t\t\t\t\t\techo 'Merging ' + tokens[tokens.size()-1]\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tsh \"\"\"\n\t\t\t\t\t\t\t\tcd ${cvhrRepos[i]}\n\t\t\t\t\t\t\t\tgit merge origin/${envBranch} --no-edit\n\t\t\t\t\t\t\t\"\"\"\t\n\t\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t\techo \"Something failed at Check out PR Branch in CiviHR extension: ${cvhrRepos[i]}\"\n\t\t\t\t\t\t\techo \"Failed: ${err}\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Upgrade Drupal & CiviCRM extensions\n\t\t\t\t\techo 'Upgrade Drupal & CV extensions'\n\t\t\t\t\tsh \"\"\"\n\t\t\t\t\t\tcd $WEBROOT\n\t\t\t\t\t\tdrush features-revert civihr_employee_portal_features -y\n\t    \t\t\t\tdrush features-revert civihr_default_permissions -y\n\t    \t\t\t\tdrush updatedb -y\n\t    \t\t\t\tdrush cvapi extenion.upgrade -y\n\t    \t\t\t\tdrush cc all\n\t    \t\t\t\tdrush cc civicrm\n    \t\t\t\t\"\"\""
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Test PHP",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def extensions = listCivihrExtensions()\n\t\t\t\t\t\n\t\t\t\t\t// Execute PHP test\n\t\t\t\t\tfor (int i = 0; i<extensions.size(); i++) {\n\t\t\t\t\t\ttestPHPUnit(extensions[i])\n\t\t\t\t\t}"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "post": {
                "conditions": [
                  {
                    "condition": "always",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "step",
                          "arguments": [
                            {
                              "key": "delegate",
                              "value": {
                                "isLiteral": false,
                                "value": "[\n\t                    $class: 'XUnitBuilder',\n                    \tthresholds: [\n\t                    \t[$class: 'FailedThreshold',\n\t                          failureNewThreshold: '5',\n\t                          failureThreshold: '5',\n\t                          unstableNewThreshold: '1',\n\t                          unstableThreshold: '1'],\n\t                        [$class: 'SkippedThreshold',\n\t                          failureNewThreshold: '0',\n\t                          failureThreshold: '0',\n\t                          unstableNewThreshold: '0',\n\t                          unstableThreshold: '0']\n                    \t],\n\t                    tools: [[$class: 'JUnitType', pattern: 'reports/phpunit/*.xml']]\n\t                ]"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  }
                ]
              }
            },
            {
              "name": "Testing JS: Install NPM in parallel",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def extensions = listCivihrExtensions()\n\t\t\t\t\tdef extensionTestings = [:]\n\n\t\t\t\t\t// Install NPM jobs\n\t\t\t\t\tfor (int i = 0; i<extensions.size(); i++) {\n\t\t\t\t\t\tdef index = i\n\t\t\t\t\t\textensionTestings[extensions[index]] = {\n\t\t\t\t\t\t  echo 'Installing NPM: ' + extensions[index]\n\t\t\t\t\t\t  installNPM(extensions[index])\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// Running install NPM jobs in parallel\n\t\t\t\t\tparallel extensionTestings"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Testing JS: Test JS in sequent",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def extensions = listCivihrExtensions()\n\t\t\t\t\tdef extensionTestings = [:]\n\n\t\t\t\t\t// Testing JS in sequent\n\t\t\t\t\tfor (int j = 0; j<extensions.size(); j++) {\n\t\t\t\t\t\tdef index = j\n\t\t\t\t\t\techo 'Testing with Gulp: ' + extensions[index]\n\t\t\t\t\t\ttestJS(extensions[index])  \n\t\t\t\t\t}"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "post": {
            "conditions": [
              {
                "condition": "always",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "if (params.DESTORY_SITE == true) {\n\t\t\t\t\techo 'Destroying built site...'\n\t\t\t\t\tsh \"civibuild destroy ${params.CVHR_BUILDNAME} || true\"\n\t\t\t\t}"
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          },
          "environment": [
            {
              "key": "WEBROOT",
              "value": {
                "isLiteral": false,
                "value": "\"/opt/buildkit/build/${params.CVHR_BUILDNAME}\""
              }
            },
            {
              "key": "CVCRM_EXT_ROOT",
              "value": {
                "isLiteral": false,
                "value": "\"$WEBROOT/sites/all/modules/civicrm/tools/extensions\""
              }
            },
            {
              "key": "DR_MODU_ROOT",
              "value": {
                "isLiteral": false,
                "value": "\"$WEBROOT/sites/all/modules\""
              }
            },
            {
              "key": "WEBURL",
              "value": {
                "isLiteral": true,
                "value": "http://jenkins.compucorp.co.uk:8900"
              }
            },
            {
              "key": "ADMIN_PASS",
              "value": {
                "name": "credentials",
                "arguments": [
                  {
                    "isLiteral": true,
                    "value": "CVHR_ADMIN_PASS"
                  }
                ]
              }
            }
          ],
          "agent": {
            "type": "any"
          },
          "parameters": {
            "parameters": [
              {
                "name": "string",
                "arguments": [
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "CVHR_BRANCH"
                    }
                  },
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": true,
                      "value": ""
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "Default build branch of CiviHR to build site using CiviCRM-Buildkit"
                    }
                  }
                ]
              },
              {
                "name": "string",
                "arguments": [
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "CVHR_BUILDNAME"
                    }
                  },
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": false,
                      "value": "\"hr17-dev_$BRANCH_NAME\""
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "CiviHR site name"
                    }
                  }
                ]
              },
              {
                "name": "booleanParam",
                "arguments": [
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "DESTORY_SITE"
                    }
                  },
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": true,
                      "value": false
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "Destroy built site after build finish"
                    }
                  }
                ]
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "zhangcl2002/cicdfactory20170813",
      "repo_url": "https://github.com/zhangcl2002/cicdfactory20170813",
      "html_url_jenkinsfile": "https://github.com/zhangcl2002/cicdfactory20170813/blob/917768feb3b734af5e38e220c1bbaade9dde9cf9/aegonthtf-cicd-factory/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/100170244/git/blobs/c99c33e045827a0171d7447ee862b1b40cf8e675",
      "jenkins_pipeline": [
        {
          "error": "${params.BRANCH} cannot be used as a value directly. Did you mean \"${params.BRANCH}\"? @ line 21, column 18."
        }
      ]
    },
    {
      "full_repo_name": "oconnormi/jenkins-test",
      "repo_url": "https://github.com/oconnormi/jenkins-test",
      "html_url_jenkinsfile": "https://github.com/oconnormi/jenkins-test/blob/2697fb8a51bd4638b44ba92b61e71d81dbd688fb/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/71487461/git/blobs/cb7c576b1f367b0c992d23342ac166bfcd328c8f",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Setup",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "slackSend",
                      "arguments": [
                        {
                          "key": "color",
                          "value": {
                            "isLiteral": true,
                            "value": "good"
                          }
                        },
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": false,
                            "value": "\"STARTED: ${JOB_NAME} ${BUILD_NUMBER} ${BUILD_URL}\""
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Validate Poms",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "retry",
                      "arguments": {
                        "isLiteral": true,
                        "value": 3
                      },
                      "children": [
                        {
                          "name": "checkout",
                          "arguments": [
                            {
                              "key": "scm",
                              "value": {
                                "isLiteral": false,
                                "value": "${scm}"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "name": "withMaven",
                      "arguments": [
                        {
                          "key": "maven",
                          "value": {
                            "isLiteral": true,
                            "value": "M3"
                          }
                        },
                        {
                          "key": "jdk",
                          "value": {
                            "isLiteral": true,
                            "value": "jdk8-latest"
                          }
                        },
                        {
                          "key": "globalMavenSettingsConfig",
                          "value": {
                            "isLiteral": true,
                            "value": "default-global-settings"
                          }
                        },
                        {
                          "key": "mavenSettingsConfig",
                          "value": {
                            "isLiteral": true,
                            "value": "codice-maven-settings"
                          }
                        },
                        {
                          "key": "mavenOpts",
                          "value": {
                            "isLiteral": true,
                            "value": "${LINUX_MVN_RANDOM}"
                          }
                        }
                      ],
                      "children": [
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "mvn clean install -DskipStatic=true -DskipTests=true -pl $POMFIX"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ],
              "agent": {
                "type": "label",
                "argument": {
                  "isLiteral": true,
                  "value": "linux-small"
                }
              }
            },
            {
              "name": "Incremental Build",
              "branches": [
                {
                  "name": "linux",
                  "steps": [
                    {
                      "name": "node",
                      "arguments": {
                        "isLiteral": true,
                        "value": "linux-large"
                      },
                      "children": [
                        {
                          "name": "retry",
                          "arguments": {
                            "isLiteral": true,
                            "value": 3
                          },
                          "children": [
                            {
                              "name": "checkout",
                              "arguments": [
                                {
                                  "key": "scm",
                                  "value": {
                                    "isLiteral": false,
                                    "value": "${scm}"
                                  }
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "name": "timeout",
                          "arguments": [
                            {
                              "key": "time",
                              "value": {
                                "isLiteral": true,
                                "value": 3
                              }
                            },
                            {
                              "key": "unit",
                              "value": {
                                "isLiteral": true,
                                "value": "HOURS"
                              }
                            }
                          ],
                          "children": [
                            {
                              "name": "withMaven",
                              "arguments": [
                                {
                                  "key": "maven",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "Maven 3.3.9"
                                  }
                                },
                                {
                                  "key": "globalMavenSettingsConfig",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "default-global-settings"
                                  }
                                },
                                {
                                  "key": "mavenSettingsConfig",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "codice-maven-settings"
                                  }
                                },
                                {
                                  "key": "mavenOpts",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "${LARGE_MVN_OPTS} ${LINUX_MVN_RANDOM}"
                                  }
                                },
                                {
                                  "key": "options",
                                  "value": {
                                    "isLiteral": false,
                                    "value": "${[artifactsPublisher(disabled: true), dependenciesFingerprintPublisher(disabled: true, includeScopeCompile: false, includeScopeProvided: false, includeScopeRuntime: false, includeSnapshotVersions: false)]}"
                                  }
                                }
                              ],
                              "children": [
                                {
                                  "name": "sh",
                                  "arguments": [
                                    {
                                      "key": "script",
                                      "value": {
                                        "isLiteral": true,
                                        "value": "mvn install -pl !$DOCS -DskipStatic=true -DskipTests=true -T 1C"
                                      }
                                    }
                                  ]
                                },
                                {
                                  "name": "sh",
                                  "arguments": [
                                    {
                                      "key": "script",
                                      "value": {
                                        "isLiteral": true,
                                        "value": "mvn clean install -B -T 1C -pl !$ITESTS -Dgib.enabled=true -Dgib.referenceBranch=/refs/remotes/origin/$CHANGE_TARGET"
                                      }
                                    }
                                  ]
                                },
                                {
                                  "name": "sh",
                                  "arguments": [
                                    {
                                      "key": "script",
                                      "value": {
                                        "isLiteral": true,
                                        "value": "mvn install -B -pl $ITESTS -nsu"
                                      }
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "windows",
                  "steps": [
                    {
                      "name": "node",
                      "arguments": {
                        "isLiteral": true,
                        "value": "server-2016-large"
                      },
                      "children": [
                        {
                          "name": "bat",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "git config --system core.longpaths true"
                              }
                            }
                          ]
                        },
                        {
                          "name": "retry",
                          "arguments": {
                            "isLiteral": true,
                            "value": 3
                          },
                          "children": [
                            {
                              "name": "checkout",
                              "arguments": [
                                {
                                  "key": "scm",
                                  "value": {
                                    "isLiteral": false,
                                    "value": "${scm}"
                                  }
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "name": "timeout",
                          "arguments": [
                            {
                              "key": "time",
                              "value": {
                                "isLiteral": true,
                                "value": 3
                              }
                            },
                            {
                              "key": "unit",
                              "value": {
                                "isLiteral": true,
                                "value": "HOURS"
                              }
                            }
                          ],
                          "children": [
                            {
                              "name": "withMaven",
                              "arguments": [
                                {
                                  "key": "maven",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "M35"
                                  }
                                },
                                {
                                  "key": "jdk",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "jdk8-latest"
                                  }
                                },
                                {
                                  "key": "globalMavenSettingsConfig",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "default-global-settings"
                                  }
                                },
                                {
                                  "key": "mavenSettingsConfig",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "codice-maven-settings"
                                  }
                                },
                                {
                                  "key": "mavenOpts",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "${LARGE_MVN_OPTS}"
                                  }
                                },
                                {
                                  "key": "options",
                                  "value": {
                                    "isLiteral": false,
                                    "value": "${[artifactsPublisher(disabled: true), dependenciesFingerprintPublisher(disabled: true, includeScopeCompile: false, includeScopeProvided: false, includeScopeRuntime: false, includeSnapshotVersions: false)]}"
                                  }
                                }
                              ],
                              "children": [
                                {
                                  "name": "bat",
                                  "arguments": [
                                    {
                                      "key": "script",
                                      "value": {
                                        "isLiteral": true,
                                        "value": "mvn install -pl !%DOCS% -DskipStatic=true -DskipTests=true -T 1C"
                                      }
                                    }
                                  ]
                                },
                                {
                                  "name": "bat",
                                  "arguments": [
                                    {
                                      "key": "script",
                                      "value": {
                                        "isLiteral": true,
                                        "value": "mvn clean install -B -T 1C -pl !%ITESTS% -Dgib.enabled=true -Dgib.referenceBranch=/refs/remotes/origin/%CHANGE_TARGET%"
                                      }
                                    }
                                  ]
                                },
                                {
                                  "name": "bat",
                                  "arguments": [
                                    {
                                      "key": "script",
                                      "value": {
                                        "isLiteral": true,
                                        "value": "mvn install -B -pl %ITESTS% -nsu"
                                      }
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "allOf",
                    "children": [
                      {
                        "name": "expression",
                        "arguments": [
                          {
                            "key": "scriptBlock",
                            "value": {
                              "isLiteral": true,
                              "value": "env.CHANGE_ID != null"
                            }
                          }
                        ]
                      },
                      {
                        "name": "expression",
                        "arguments": [
                          {
                            "key": "scriptBlock",
                            "value": {
                              "isLiteral": true,
                              "value": "env.CHANGE_TARGET != null"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            },
            {
              "name": "Full Build",
              "branches": [
                {
                  "name": "linux",
                  "steps": [
                    {
                      "name": "node",
                      "arguments": {
                        "isLiteral": true,
                        "value": "linux-large"
                      },
                      "children": [
                        {
                          "name": "retry",
                          "arguments": {
                            "isLiteral": true,
                            "value": 3
                          },
                          "children": [
                            {
                              "name": "checkout",
                              "arguments": [
                                {
                                  "key": "scm",
                                  "value": {
                                    "isLiteral": false,
                                    "value": "${scm}"
                                  }
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "name": "timeout",
                          "arguments": [
                            {
                              "key": "time",
                              "value": {
                                "isLiteral": true,
                                "value": 3
                              }
                            },
                            {
                              "key": "unit",
                              "value": {
                                "isLiteral": true,
                                "value": "HOURS"
                              }
                            }
                          ],
                          "children": [
                            {
                              "name": "withMaven",
                              "arguments": [
                                {
                                  "key": "maven",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "Maven 3.3.9"
                                  }
                                },
                                {
                                  "key": "globalMavenSettingsConfig",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "default-global-settings"
                                  }
                                },
                                {
                                  "key": "mavenSettingsConfig",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "codice-maven-settings"
                                  }
                                },
                                {
                                  "key": "mavenOpts",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "${LARGE_MVN_OPTS} ${LINUX_MVN_RANDOM}"
                                  }
                                }
                              ],
                              "children": [
                                {
                                  "name": "sh",
                                  "arguments": [
                                    {
                                      "key": "script",
                                      "value": {
                                        "isLiteral": true,
                                        "value": "mvn clean install -B -T 1C -pl !$ITESTS"
                                      }
                                    }
                                  ]
                                },
                                {
                                  "name": "sh",
                                  "arguments": [
                                    {
                                      "key": "script",
                                      "value": {
                                        "isLiteral": true,
                                        "value": "mvn install -B -pl $ITESTS -nsu"
                                      }
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "windows",
                  "steps": [
                    {
                      "name": "node",
                      "arguments": {
                        "isLiteral": true,
                        "value": "server-2016-large"
                      },
                      "children": [
                        {
                          "name": "bat",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "git config --system core.longpaths true"
                              }
                            }
                          ]
                        },
                        {
                          "name": "retry",
                          "arguments": {
                            "isLiteral": true,
                            "value": 3
                          },
                          "children": [
                            {
                              "name": "checkout",
                              "arguments": [
                                {
                                  "key": "scm",
                                  "value": {
                                    "isLiteral": false,
                                    "value": "${scm}"
                                  }
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "name": "timeout",
                          "arguments": [
                            {
                              "key": "time",
                              "value": {
                                "isLiteral": true,
                                "value": 3
                              }
                            },
                            {
                              "key": "unit",
                              "value": {
                                "isLiteral": true,
                                "value": "HOURS"
                              }
                            }
                          ],
                          "children": [
                            {
                              "name": "withMaven",
                              "arguments": [
                                {
                                  "key": "maven",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "M35"
                                  }
                                },
                                {
                                  "key": "jdk",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "jdk8-latest"
                                  }
                                },
                                {
                                  "key": "globalMavenSettingsConfig",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "default-global-settings"
                                  }
                                },
                                {
                                  "key": "mavenSettingsConfig",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "codice-maven-settings"
                                  }
                                },
                                {
                                  "key": "mavenOpts",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "${LARGE_MVN_OPTS}"
                                  }
                                }
                              ],
                              "children": [
                                {
                                  "name": "bat",
                                  "arguments": [
                                    {
                                      "key": "script",
                                      "value": {
                                        "isLiteral": true,
                                        "value": "mvn clean install -B -T 1C -pl !%ITESTS%"
                                      }
                                    }
                                  ]
                                },
                                {
                                  "name": "bat",
                                  "arguments": [
                                    {
                                      "key": "script",
                                      "value": {
                                        "isLiteral": true,
                                        "value": "mvn install -B -pl %ITESTS% -nsu"
                                      }
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "expression",
                    "arguments": [
                      {
                        "key": "scriptBlock",
                        "value": {
                          "isLiteral": true,
                          "value": "env.CHANGE_ID == null"
                        }
                      }
                    ]
                  }
                ]
              }
            },
            {
              "name": "Security Analysis",
              "branches": [
                {
                  "name": "owasp",
                  "steps": [
                    {
                      "name": "node",
                      "arguments": {
                        "isLiteral": true,
                        "value": "linux-large"
                      },
                      "children": [
                        {
                          "name": "retry",
                          "arguments": {
                            "isLiteral": true,
                            "value": 3
                          },
                          "children": [
                            {
                              "name": "checkout",
                              "arguments": [
                                {
                                  "key": "scm",
                                  "value": {
                                    "isLiteral": false,
                                    "value": "${scm}"
                                  }
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "name": "withMaven",
                          "arguments": [
                            {
                              "key": "maven",
                              "value": {
                                "isLiteral": true,
                                "value": "M35"
                              }
                            },
                            {
                              "key": "jdk",
                              "value": {
                                "isLiteral": true,
                                "value": "jdk8-latest"
                              }
                            },
                            {
                              "key": "globalMavenSettingsConfig",
                              "value": {
                                "isLiteral": true,
                                "value": "default-global-settings"
                              }
                            },
                            {
                              "key": "mavenSettingsConfig",
                              "value": {
                                "isLiteral": true,
                                "value": "codice-maven-settings"
                              }
                            },
                            {
                              "key": "mavenOpts",
                              "value": {
                                "isLiteral": true,
                                "value": "${LARGE_MVN_OPTS} ${LINUX_MVN_RANDOM}"
                              }
                            }
                          ],
                          "children": [
                            {
                              "name": "script",
                              "arguments": [
                                {
                                  "key": "scriptBlock",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "if (env.CHANGE_ID == null) {\n                                        //sh 'mvn install -q -B -Powasp -DskipTests=true -DskipStatic=true -pl !$DOCS'\n                                        echo 'full owasp scan'\n                                    } else {\n                                        //sh 'mvn install -q -B -Powasp -DskipTests=true -DskipStatic=true -pl !$DOCS -Dgib.enabled=true -Dgib.referenceBranch=/refs/remotes/origin/$CHANGE_TARGET'\n                                        echo 'pr owasp scan'\n                                    }"
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "nodeJsSecurity",
                  "steps": [
                    {
                      "name": "node",
                      "arguments": {
                        "isLiteral": true,
                        "value": "linux-small"
                      },
                      "children": [
                        {
                          "name": "retry",
                          "arguments": {
                            "isLiteral": true,
                            "value": 3
                          },
                          "children": [
                            {
                              "name": "checkout",
                              "arguments": [
                                {
                                  "key": "scm",
                                  "value": {
                                    "isLiteral": false,
                                    "value": "${scm}"
                                  }
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "name": "script",
                          "arguments": [
                            {
                              "key": "scriptBlock",
                              "value": {
                                "isLiteral": true,
                                "value": "def packageFiles = findFiles(glob: '**/package.json')\n                                for (int i = 0; i < packageFiles.size(); i++) {\n                                    dir(packageFiles[i].path.split('package.json')[0]) {\n                                        def packageFile = readJSON file: 'package.json'\n                                        if (packageFile.scripts =~ /.*webpack.*/ || packageFile.containsKey(\"browserify\")) {\n                                            nodejs(configId: 'npmrc-default', nodeJSInstallationName: 'nodejs') {\n                                                echo \"Scanning ${packageFiles[i].path}\"\n                                                //sh 'nsp check'\n                                                echo 'nsp scan'\n                                            }\n                                        }\n                                    }\n                                }"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Deploy",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "withMaven",
                      "arguments": [
                        {
                          "key": "maven",
                          "value": {
                            "isLiteral": true,
                            "value": "M3"
                          }
                        },
                        {
                          "key": "jdk",
                          "value": {
                            "isLiteral": true,
                            "value": "jdk8-latest"
                          }
                        },
                        {
                          "key": "globalMavenSettingsConfig",
                          "value": {
                            "isLiteral": true,
                            "value": "default-global-settings"
                          }
                        },
                        {
                          "key": "mavenSettingsConfig",
                          "value": {
                            "isLiteral": true,
                            "value": "codice-maven-settings"
                          }
                        },
                        {
                          "key": "mavenOpts",
                          "value": {
                            "isLiteral": true,
                            "value": "${LINUX_MVN_RANDOM}"
                          }
                        }
                      ],
                      "children": [
                        {
                          "name": "retry",
                          "arguments": {
                            "isLiteral": true,
                            "value": 3
                          },
                          "children": [
                            {
                              "name": "checkout",
                              "arguments": [
                                {
                                  "key": "scm",
                                  "value": {
                                    "isLiteral": false,
                                    "value": "${scm}"
                                  }
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "mvn javadoc:aggregate -DskipStatic=true -DskipTests=true"
                              }
                            }
                          ]
                        },
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "mvn deploy -T 1C -DskipStatic=true -DskipTests=true -DretryFailedDeploymentCount=10"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ],
              "agent": {
                "type": "label",
                "argument": {
                  "isLiteral": true,
                  "value": "linux-small"
                }
              },
              "when": {
                "conditions": [
                  {
                    "name": "allOf",
                    "children": [
                      {
                        "name": "expression",
                        "arguments": [
                          {
                            "key": "scriptBlock",
                            "value": {
                              "isLiteral": true,
                              "value": "env.CHANGE_ID == null"
                            }
                          }
                        ]
                      },
                      {
                        "name": "expression",
                        "arguments": [
                          {
                            "key": "scriptBlock",
                            "value": {
                              "isLiteral": true,
                              "value": "env.BRANCH_NAME ==~ /((?:\\d*\\.)?\\d*\\.x|master)/"
                            }
                          }
                        ]
                      },
                      {
                        "name": "environment",
                        "arguments": [
                          {
                            "key": "name",
                            "value": {
                              "isLiteral": true,
                              "value": "JENKINS_ENV"
                            }
                          },
                          {
                            "key": "value",
                            "value": {
                              "isLiteral": true,
                              "value": "prod"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            },
            {
              "name": "Quality Analysis",
              "branches": [
                {
                  "name": "sonarqube",
                  "steps": [
                    {
                      "name": "node",
                      "arguments": {
                        "isLiteral": true,
                        "value": "linux-large"
                      },
                      "children": [
                        {
                          "name": "retry",
                          "arguments": {
                            "isLiteral": true,
                            "value": 3
                          },
                          "children": [
                            {
                              "name": "checkout",
                              "arguments": [
                                {
                                  "key": "scm",
                                  "value": {
                                    "isLiteral": false,
                                    "value": "${scm}"
                                  }
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "name": "withMaven",
                          "arguments": [
                            {
                              "key": "maven",
                              "value": {
                                "isLiteral": true,
                                "value": "M35"
                              }
                            },
                            {
                              "key": "jdk",
                              "value": {
                                "isLiteral": true,
                                "value": "jdk8-latest"
                              }
                            },
                            {
                              "key": "globalMavenSettingsConfig",
                              "value": {
                                "isLiteral": true,
                                "value": "default-global-settings"
                              }
                            },
                            {
                              "key": "mavenSettingsConfig",
                              "value": {
                                "isLiteral": true,
                                "value": "codice-maven-settings"
                              }
                            },
                            {
                              "key": "mavenOpts",
                              "value": {
                                "isLiteral": true,
                                "value": "${LARGE_MVN_OPTS} ${LINUX_MVN_RANDOM}"
                              }
                            }
                          ],
                          "children": [
                            {
                              "name": "withCredentials",
                              "arguments": {
                                "isLiteral": false,
                                "value": "${[string(credentialsId: 'SonarQubeGithubToken', variable: 'SONARQUBE_GITHUB_TOKEN'), string(credentialsId: 'sonarqube-token', variable: 'SONAR_TOKEN')]}"
                              },
                              "children": [
                                {
                                  "name": "script",
                                  "arguments": [
                                    {
                                      "key": "scriptBlock",
                                      "value": {
                                        "isLiteral": true,
                                        "value": "if (env.CHANGE_ID == null) {\n                                            //sh 'mvn -q -B -Dfindbugs.skip=true -Dcheckstyle.skip=true org.jacoco:jacoco-maven-plugin:prepare-agent install sonar:sonar -Dsonar.host.url=https://sonarqube.com -Dsonar.login=$SONAR_TOKEN  -Dsonar.organization=codice -Dsonar.projectKey=ddf -Dsonar.coverage.exclusions=$COVERAGE_EXCLUSIONS -pl !$DOCS,!$ITESTS'\n                                            echo 'full scan'\n                                        } else {\n                                            //sh 'mvn -q -B -Dfindbugs.skip=true -Dcheckstyle.skip=true org.jacoco:jacoco-maven-plugin:prepare-agent install sonar:sonar -Dsonar.github.pullRequest=${CHANGE_ID} -Dsonar.github.oauth=${SONARQUBE_GITHUB_TOKEN} -Dsonar.analysis.mode=preview -Dsonar.host.url=https://sonarqube.com -Dsonar.login=$SONAR_TOKEN -Dsonar.organization=codice -Dsonar.projectKey=ddf -Dsonar.coverage.exclusions=$COVERAGE_EXCLUSIONS -pl !$DOCS,!$ITESTS -Dgib.enabled=true -Dgib.referenceBranch=/refs/remotes/origin/$CHANGE_TARGET'\n                                            echo 'pr scan'\n                                        }"
                                      }
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "coverity",
                  "steps": [
                    {
                      "name": "node",
                      "arguments": {
                        "isLiteral": true,
                        "value": "linux-medium"
                      },
                      "children": [
                        {
                          "name": "script",
                          "arguments": [
                            {
                              "key": "scriptBlock",
                              "value": {
                                "isLiteral": true,
                                "value": "if (env.BRANCH_NAME != 'master') {\n                                    echo \"Coverity is only run on master\"\n                                } else {\n                                    retry(3) {\n                                        checkout scm\n                                    }\n                                    withMaven(maven: 'M35', jdk: 'jdk8-latest', globalMavenSettingsConfig: 'default-global-settings', mavenSettingsConfig: 'codice-maven-settings', mavenOpts: '${LINUX_MVN_RANDOM}') {\n                                        withCredentials([string(credentialsId: 'ddf-coverity-token', variable: 'COVERITY_TOKEN')]) {\n                                            withEnv([\"PATH=${tool 'coverity-linux'}/bin:${env.PATH}\"]) {\n                                                configFileProvider([configFile(fileId: 'coverity-maven-settings', replaceTokens: true, variable: 'MAVEN_SETTINGS')]) {\n                                                    echo sh(returnStdout: true, script: 'env')\n                                                    //sh 'cov-build --dir cov-int mvn -DskipTests=true -DskipStatic=true install -pl !$DOCS --settings $MAVEN_SETTINGS'\n                                                    //sh 'tar czvf ddf.tgz cov-int'\n                                                    //sh 'curl --form token=$COVERITY_TOKEN --form email=cmp-security-team@connexta.com --form file=@ddf.tgz --form version=\"master\" --form description=\"Description: DDF CI Build\" https://scan.coverity.com/builds?project=codice%2Fddf'\n                                                    echo 'coverity scan'\n                                                }\n                                            }\n                                        }\n                                    }\n                                }"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "codecov",
                  "steps": [
                    {
                      "name": "node",
                      "arguments": {
                        "isLiteral": true,
                        "value": "linux-large"
                      },
                      "children": [
                        {
                          "name": "script",
                          "arguments": [
                            {
                              "key": "scriptBlock",
                              "value": {
                                "isLiteral": true,
                                "value": "retry(3) {\n                                    checkout scm\n                                }\n                                withMaven(maven: 'M35', jdk: 'jdk8-latest', globalMavenSettingsConfig: 'default-global-settings', mavenSettingsConfig: 'codice-maven-settings', mavenOpts: '${LARGE_MVN_OPTS} ${LINUX_MVN_RANDOM}') {\n                                    withCredentials([string(credentialsId: 'DDF_CodeCov', variable: 'DDF_CODECOV_TOKEN')]) {\n                                        //sh 'mvn clean install -B -T 1C -pl !$ITESTS'\n                                        //sh 'curl -s https://codecov.io/bash | bash -s - -t ${DDF_CODECOV_TOKEN}'\n                                        echo 'codecov scan'\n                                    }\n                                }"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "post": {
            "conditions": [
              {
                "condition": "success",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "slackSend",
                      "arguments": [
                        {
                          "key": "color",
                          "value": {
                            "isLiteral": true,
                            "value": "good"
                          }
                        },
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": false,
                            "value": "\"SUCCESS: ${JOB_NAME} ${BUILD_NUMBER}\""
                          }
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "condition": "failure",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "slackSend",
                      "arguments": [
                        {
                          "key": "color",
                          "value": {
                            "isLiteral": true,
                            "value": "#ea0017"
                          }
                        },
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": false,
                            "value": "\"FAILURE: ${JOB_NAME} ${BUILD_NUMBER}. See the results here: ${BUILD_URL}\""
                          }
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "condition": "unstable",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "slackSend",
                      "arguments": [
                        {
                          "key": "color",
                          "value": {
                            "isLiteral": true,
                            "value": "#ffb600"
                          }
                        },
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": false,
                            "value": "\"UNSTABLE: ${JOB_NAME} ${BUILD_NUMBER}. See the results here: ${BUILD_URL}\""
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          },
          "environment": [
            {
              "key": "DOCS",
              "value": {
                "isLiteral": true,
                "value": "distribution/docs"
              }
            },
            {
              "key": "ITESTS",
              "value": {
                "isLiteral": true,
                "value": "distribution/test/itests/test-itests-ddf"
              }
            },
            {
              "key": "POMFIX",
              "value": {
                "isLiteral": true,
                "value": "libs/libs-pomfix,libs/libs-pomfix-run"
              }
            },
            {
              "key": "LARGE_MVN_OPTS",
              "value": {
                "isLiteral": true,
                "value": "-Xmx8192M -Xss128M -XX:+CMSClassUnloadingEnabled -XX:+UseConcMarkSweepGC "
              }
            },
            {
              "key": "LINUX_MVN_RANDOM",
              "value": {
                "isLiteral": true,
                "value": "-Djava.security.egd=file:/dev/./urandom"
              }
            },
            {
              "key": "COVERAGE_EXCLUSIONS",
              "value": {
                "isLiteral": true,
                "value": "**/test/**,**/itests/**,**/*Test*,**/sdk/**,**/*.js,**/node_modules/**,**/jaxb/,**/wsdl/,**/nces/sws/**,**/*.adoc,**/*.txt,**/*.xml"
              }
            }
          ],
          "agent": {
            "type": "none"
          },
          "options": {
            "options": [
              {
                "name": "buildDiscarder",
                "arguments": [
                  {
                    "name": "logRotator",
                    "arguments": [
                      {
                        "key": "numToKeepStr",
                        "value": {
                          "isLiteral": true,
                          "value": "25"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "name": "disableConcurrentBuilds",
                "arguments": []
              },
              {
                "name": "timestamps",
                "arguments": []
              }
            ]
          },
          "triggers": {
            "triggers": [
              {
                "name": "cron",
                "arguments": [
                  {
                    "isLiteral": false,
                    "value": "${BRANCH_NAME == \"master\" ? \"H H(17-19) * * *\" : \"\"}"
                  }
                ]
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "gwally9/Setting_up_AWS",
      "repo_url": "https://github.com/gwally9/Setting_up_AWS",
      "html_url_jenkinsfile": "https://github.com/gwally9/Setting_up_AWS/blob/52f10ee849dc0918411a470f265f3e4b2588709f/Lots_of_Clutter/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/130426909/git/blobs/4aeb5cac662ecc88589791d3044eae1f2a3d5230",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Build with unit testing",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "echo 'Pulling...' + env.BRANCH_NAME\n                    def mvnHome = tool 'Maven 3.3.9'\n                    if (isUnix()) {\n                        def targetVersion = getDevVersion()\n                        print 'target build version...'\n                        print targetVersion\n                        sh \"'${mvnHome}/bin/mvn' -Dintegration-tests.skip=true -Dbuild.number=${targetVersion} clean package\"\n                        def pom = readMavenPom file: 'pom.xml'\n                        // get the current development version \n                        developmentArtifactVersion = \"${pom.version}-${targetVersion}\"\n                        print pom.version\n                        // execute the unit testing and collect the reports\n                        junit '**//*target/surefire-reports/TEST-*.xml'\n                        archive 'target*//*.jar'\n                    } else {\n                        bat(/\"${mvnHome}\\bin\\mvn\" -Dintegration-tests.skip=true clean package/)\n                        def pom = readMavenPom file: 'pom.xml'\n                        print pom.version\n                        junit '**//*target/surefire-reports/TEST-*.xml'\n                        archive 'target*//*.jar'\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Integration tests",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def mvnHome = tool 'Maven 3.3.9'\n                    if (isUnix()) {\n                        // just to trigger the integration test without unit testing\n                        sh \"'${mvnHome}/bin/mvn'  verify -Dunit-tests.skip=true\"\n                    } else {\n                        bat(/\"${mvnHome}\\bin\\mvn\" verify -Dunit-tests.skip=true/)\n                    }"
                          }
                        }
                      ]
                    },
                    {
                      "name": "cucumber",
                      "arguments": [
                        {
                          "key": "buildStatus",
                          "value": {
                            "isLiteral": true,
                            "value": null
                          }
                        },
                        {
                          "key": "fileIncludePattern",
                          "value": {
                            "isLiteral": true,
                            "value": "**/cucumber.json"
                          }
                        },
                        {
                          "key": "jsonReportDirectory",
                          "value": {
                            "isLiteral": true,
                            "value": "target"
                          }
                        },
                        {
                          "key": "sortingMethod",
                          "value": {
                            "isLiteral": true,
                            "value": "ALPHABETICAL"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Sonar scan execution",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def mvnHome = tool 'Maven 3.3.9'\n                    withSonarQubeEnv {\n                     \n                        sh \"'${mvnHome}/bin/mvn'  verify sonar:sonar -Dintegration-tests.skip=true -Dmaven.test.failure.ignore=true\"\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Sonar scan result check",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "timeout",
                      "arguments": [
                        {
                          "key": "time",
                          "value": {
                            "isLiteral": true,
                            "value": 2
                          }
                        },
                        {
                          "key": "unit",
                          "value": {
                            "isLiteral": true,
                            "value": "MINUTES"
                          }
                        }
                      ],
                      "children": [
                        {
                          "name": "retry",
                          "arguments": {
                            "isLiteral": true,
                            "value": 3
                          },
                          "children": [
                            {
                              "name": "script",
                              "arguments": [
                                {
                                  "key": "scriptBlock",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "def qg = waitForQualityGate()\n                            if (qg.status != 'OK') {\n                                error \"Pipeline aborted due to quality gate failure: ${qg.status}\"\n                            }"
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Development deploy approval and deployment",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "if (currentBuild.result == null || currentBuild.result == 'SUCCESS') {\n                        timeout(time: 3, unit: 'MINUTES') {\n                            // you can use the commented line if u have specific user group who CAN ONLY approve\n                            //input message:'Approve deployment?', submitter: 'it-ops'\n                            input message: 'Approve deployment?'\n                        }\n                        timeout(time: 2, unit: 'MINUTES') {\n                            //\n                            if (developmentArtifactVersion != null && !developmentArtifactVersion.isEmpty()) {\n                                // replace it with your application name or make it easily loaded from pom.xml\n                                def jarName = \"application-${developmentArtifactVersion}.jar\"\n                                echo \"the application is deploying ${jarName}\"\n                                // NOTE : CREATE your deployemnt JOB, where it can take parameters whoch is the jar name to fetch from jenkins workspace\n                                build job: 'ApplicationToDev', parameters: [[$class: 'StringParameterValue', name: 'jarName', value: jarName]]\n                                echo 'the application is deployed !'\n                            } else {\n                                error 'the application is not  deployed as development version is null!'\n                            }\n\n                        }\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "DEV sanity check",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sleep",
                      "arguments": [
                        {
                          "key": "time",
                          "value": {
                            "isLiteral": true,
                            "value": 45
                          }
                        }
                      ]
                    },
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "if (currentBuild.result == null || currentBuild.result == 'SUCCESS') {\n                        timeout(time: 1, unit: 'MINUTES') {\n                            script {\n                                def mvnHome = tool 'Maven 3.3.9'\n                                //NOTE : if u change the sanity test class name , change it here as well\n                                sh \"'${mvnHome}/bin/mvn' -Dtest=ApplicationSanityCheck_ITT surefire:test\"\n                            }\n\n                        }\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Release and publish artifact",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def mvnHome = tool 'Maven 3.3.9' //\n                    if (currentBuild.result == null || currentBuild.result == 'SUCCESS') {\n                        def v = getReleaseVersion()\n                        releasedVersion = v;\n                        if (v) {\n                            echo \"Building version ${v} - so released version is ${releasedVersion}\"\n                        }\n                        // jenkins user credentials ID which is transparent to the user and password change\n                        sshagent(['0000000-3b5a-454e-a8e6-c6b6114d36000']) {\n                            sh \"git tag -f v${v}\"\n                            sh \"git push -f --tags\"\n                        }\n                        sh \"'${mvnHome}/bin/mvn' -Dmaven.test.skip=true  versions:set  -DgenerateBackupPoms=false -DnewVersion=${v}\"\n                        sh \"'${mvnHome}/bin/mvn' -Dmaven.test.skip=true clean deploy\"\n\n                    } else {\n                        error \"Release is not possible. as build is not successful\"\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "branch",
                    "arguments": {
                      "isLiteral": true,
                      "value": "master"
                    }
                  }
                ]
              }
            },
            {
              "name": "Deploy to Acceptance",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "if (currentBuild.result == null || currentBuild.result == 'SUCCESS') {\n                        timeout(time: 3, unit: 'MINUTES') {\n                            //input message:'Approve deployment?', submitter: 'it-ops'\n                            input message: 'Approve deployment to UAT?'\n                        }\n                        timeout(time: 3, unit: 'MINUTES') {\n                            //  deployment job which will take the relasesed version\n                            if (releasedVersion != null && !releasedVersion.isEmpty()) {\n                                // make the applciation name for the jar configurable\n                                def jarName = \"application-${releasedVersion}.jar\"\n                                echo \"the application is deploying ${jarName}\"\n                                // NOTE : DO NOT FORGET to create your UAT deployment jar , check Job AlertManagerToUAT in Jenkins for reference\n                                // the deployemnt should be based into Nexus repo\n                                build job: 'AApplicationToACC', parameters: [[$class: 'StringParameterValue', name: 'jarName', value: jarName], [$class: 'StringParameterValue', name: 'appVersion', value: releasedVersion]]\n                                echo 'the application is deployed !'\n                            } else {\n                                error 'the application is not  deployed as released version is null!'\n                            }\n\n                        }\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "branch",
                    "arguments": {
                      "isLiteral": true,
                      "value": "master"
                    }
                  }
                ]
              }
            },
            {
              "name": "ACC E2E tests",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sleep",
                      "arguments": [
                        {
                          "key": "time",
                          "value": {
                            "isLiteral": true,
                            "value": 45
                          }
                        }
                      ]
                    },
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "if (currentBuild.result == null || currentBuild.result == 'SUCCESS') {\n                        timeout(time: 1, unit: 'MINUTES') {\n\n                            script {\n                                def mvnHome = tool 'Maven 3.3.9'\n                                // NOTE : if you change the test class name change it here as well\n                                sh \"'${mvnHome}/bin/mvn' -Dtest=ApplicationE2E surefire:test\"\n                            }\n\n                        }\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "branch",
                    "arguments": {
                      "isLiteral": true,
                      "value": "master"
                    }
                  }
                ]
              }
            }
          ],
          "post": {
            "conditions": [
              {
                "condition": "always",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "deleteDir",
                      "arguments": []
                    }
                  ]
                }
              },
              {
                "condition": "success",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sendEmail",
                      "arguments": {
                        "isLiteral": true,
                        "value": "Successful"
                      }
                    }
                  ]
                }
              },
              {
                "condition": "unstable",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sendEmail",
                      "arguments": {
                        "isLiteral": true,
                        "value": "Unstable"
                      }
                    }
                  ]
                }
              },
              {
                "condition": "failure",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sendEmail",
                      "arguments": {
                        "isLiteral": true,
                        "value": "Failed"
                      }
                    }
                  ]
                }
              }
            ]
          },
          "environment": [
            {
              "key": "EMAIL_RECIPIENTS",
              "value": {
                "isLiteral": true,
                "value": "mahmoud.romeh@test.com"
              }
            }
          ],
          "agent": {
            "type": "label",
            "argument": {
              "isLiteral": true,
              "value": "java8"
            }
          },
          "options": {
            "options": [
              {
                "name": "buildDiscarder",
                "arguments": [
                  {
                    "name": "logRotator",
                    "arguments": [
                      {
                        "key": "numToKeepStr",
                        "value": {
                          "isLiteral": true,
                          "value": "5"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "name": "timeout",
                "arguments": [
                  {
                    "key": "time",
                    "value": {
                      "isLiteral": true,
                      "value": 25
                    }
                  },
                  {
                    "key": "unit",
                    "value": {
                      "isLiteral": true,
                      "value": "MINUTES"
                    }
                  }
                ]
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "codice/ddf",
      "repo_url": "https://github.com/codice/ddf",
      "html_url_jenkinsfile": "https://github.com/codice/ddf/blob/c97c54724595db77ed3571c0166198c3ad970e69/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/15173563/git/blobs/bd425e9b4149b932bf8898a7b7d71e1634003954",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Setup",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "slackSend",
                      "arguments": [
                        {
                          "key": "color",
                          "value": {
                            "isLiteral": true,
                            "value": "good"
                          }
                        },
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": false,
                            "value": "\"STARTED: ${JOB_NAME} ${BUILD_NUMBER} ${BUILD_URL}\""
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Validate Poms",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "retry",
                      "arguments": {
                        "isLiteral": true,
                        "value": 3
                      },
                      "children": [
                        {
                          "name": "checkout",
                          "arguments": [
                            {
                              "key": "scm",
                              "value": {
                                "isLiteral": false,
                                "value": "${scm}"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "name": "withMaven",
                      "arguments": [
                        {
                          "key": "maven",
                          "value": {
                            "isLiteral": true,
                            "value": "M3"
                          }
                        },
                        {
                          "key": "jdk",
                          "value": {
                            "isLiteral": true,
                            "value": "jdk8-latest"
                          }
                        },
                        {
                          "key": "globalMavenSettingsConfig",
                          "value": {
                            "isLiteral": true,
                            "value": "default-global-settings"
                          }
                        },
                        {
                          "key": "mavenSettingsConfig",
                          "value": {
                            "isLiteral": true,
                            "value": "codice-maven-settings"
                          }
                        },
                        {
                          "key": "mavenOpts",
                          "value": {
                            "isLiteral": true,
                            "value": "${LINUX_MVN_RANDOM}"
                          }
                        }
                      ],
                      "children": [
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "mvn clean install -DskipStatic=true -DskipTests=true -B -pl $POMFIX $DISABLE_DOWNLOAD_PROGRESS_OPTS"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Incremental Build",
              "parallel": [
                {
                  "name": "Linux",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "timeout",
                          "arguments": [
                            {
                              "key": "time",
                              "value": {
                                "isLiteral": true,
                                "value": 3
                              }
                            },
                            {
                              "key": "unit",
                              "value": {
                                "isLiteral": true,
                                "value": "HOURS"
                              }
                            }
                          ],
                          "children": [
                            {
                              "name": "withMaven",
                              "arguments": [
                                {
                                  "key": "maven",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "Maven 3.3.9"
                                  }
                                },
                                {
                                  "key": "globalMavenSettingsConfig",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "default-global-settings"
                                  }
                                },
                                {
                                  "key": "mavenSettingsConfig",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "codice-maven-settings"
                                  }
                                },
                                {
                                  "key": "mavenOpts",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "${LARGE_MVN_OPTS} ${LINUX_MVN_RANDOM}"
                                  }
                                },
                                {
                                  "key": "options",
                                  "value": {
                                    "isLiteral": false,
                                    "value": "${[artifactsPublisher(disabled: true), dependenciesFingerprintPublisher(disabled: true, includeScopeCompile: false, includeScopeProvided: false, includeScopeRuntime: false, includeSnapshotVersions: false)]}"
                                  }
                                }
                              ],
                              "children": [
                                {
                                  "name": "sh",
                                  "arguments": [
                                    {
                                      "key": "script",
                                      "value": {
                                        "isLiteral": true,
                                        "value": "mvn install -B -pl !$DOCS -DskipStatic=true -DskipTests=true -T 1C $DISABLE_DOWNLOAD_PROGRESS_OPTS"
                                      }
                                    }
                                  ]
                                },
                                {
                                  "name": "sh",
                                  "arguments": [
                                    {
                                      "key": "script",
                                      "value": {
                                        "isLiteral": true,
                                        "value": "mvn clean install -B -T 1C -pl !$ITESTS -Dgib.enabled=true -Dgib.referenceBranch=/refs/remotes/origin/$CHANGE_TARGET $DISABLE_DOWNLOAD_PROGRESS_OPTS"
                                      }
                                    }
                                  ]
                                },
                                {
                                  "name": "sh",
                                  "arguments": [
                                    {
                                      "key": "script",
                                      "value": {
                                        "isLiteral": true,
                                        "value": "mvn install -B -pl $ITESTS -nsu $DISABLE_DOWNLOAD_PROGRESS_OPTS"
                                      }
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "Windows",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "retry",
                          "arguments": {
                            "isLiteral": true,
                            "value": 3
                          },
                          "children": [
                            {
                              "name": "checkout",
                              "arguments": [
                                {
                                  "key": "scm",
                                  "value": {
                                    "isLiteral": false,
                                    "value": "${scm}"
                                  }
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "name": "timeout",
                          "arguments": [
                            {
                              "key": "time",
                              "value": {
                                "isLiteral": true,
                                "value": 3
                              }
                            },
                            {
                              "key": "unit",
                              "value": {
                                "isLiteral": true,
                                "value": "HOURS"
                              }
                            }
                          ],
                          "children": [
                            {
                              "name": "withMaven",
                              "arguments": [
                                {
                                  "key": "maven",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "M35"
                                  }
                                },
                                {
                                  "key": "jdk",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "jdk8-latest"
                                  }
                                },
                                {
                                  "key": "globalMavenSettingsConfig",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "default-global-settings"
                                  }
                                },
                                {
                                  "key": "mavenSettingsConfig",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "codice-maven-settings"
                                  }
                                },
                                {
                                  "key": "mavenOpts",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "${LARGE_MVN_OPTS}"
                                  }
                                },
                                {
                                  "key": "options",
                                  "value": {
                                    "isLiteral": false,
                                    "value": "${[artifactsPublisher(disabled: true), dependenciesFingerprintPublisher(disabled: true, includeScopeCompile: false, includeScopeProvided: false, includeScopeRuntime: false, includeSnapshotVersions: false)]}"
                                  }
                                }
                              ],
                              "children": [
                                {
                                  "name": "bat",
                                  "arguments": [
                                    {
                                      "key": "script",
                                      "value": {
                                        "isLiteral": true,
                                        "value": "mvn install -B -pl !%DOCS% -DskipStatic=true -DskipTests=true -T 1C %DISABLE_DOWNLOAD_PROGRESS_OPTS%"
                                      }
                                    }
                                  ]
                                },
                                {
                                  "name": "bat",
                                  "arguments": [
                                    {
                                      "key": "script",
                                      "value": {
                                        "isLiteral": true,
                                        "value": "mvn clean install -B -T 1C -pl !%ITESTS% -Dgib.enabled=true -Dgib.referenceBranch=/refs/remotes/origin/%CHANGE_TARGET% %DISABLE_DOWNLOAD_PROGRESS_OPTS%"
                                      }
                                    }
                                  ]
                                },
                                {
                                  "name": "bat",
                                  "arguments": [
                                    {
                                      "key": "script",
                                      "value": {
                                        "isLiteral": true,
                                        "value": "mvn install -B -pl %ITESTS% -nsu %DISABLE_DOWNLOAD_PROGRESS_OPTS%"
                                      }
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ],
                  "agent": {
                    "type": "label",
                    "argument": {
                      "isLiteral": true,
                      "value": "server-2016-large"
                    }
                  }
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "allOf",
                    "children": [
                      {
                        "name": "expression",
                        "arguments": [
                          {
                            "key": "scriptBlock",
                            "value": {
                              "isLiteral": true,
                              "value": "env.CHANGE_ID != null"
                            }
                          }
                        ]
                      },
                      {
                        "name": "expression",
                        "arguments": [
                          {
                            "key": "scriptBlock",
                            "value": {
                              "isLiteral": true,
                              "value": "env.CHANGE_TARGET != null"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            },
            {
              "name": "Full Build",
              "parallel": [
                {
                  "name": "Linux",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "timeout",
                          "arguments": [
                            {
                              "key": "time",
                              "value": {
                                "isLiteral": true,
                                "value": 3
                              }
                            },
                            {
                              "key": "unit",
                              "value": {
                                "isLiteral": true,
                                "value": "HOURS"
                              }
                            }
                          ],
                          "children": [
                            {
                              "name": "withMaven",
                              "arguments": [
                                {
                                  "key": "maven",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "Maven 3.3.9"
                                  }
                                },
                                {
                                  "key": "globalMavenSettingsConfig",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "default-global-settings"
                                  }
                                },
                                {
                                  "key": "mavenSettingsConfig",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "codice-maven-settings"
                                  }
                                },
                                {
                                  "key": "mavenOpts",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "${LARGE_MVN_OPTS} ${LINUX_MVN_RANDOM}"
                                  }
                                }
                              ],
                              "children": [
                                {
                                  "name": "sh",
                                  "arguments": [
                                    {
                                      "key": "script",
                                      "value": {
                                        "isLiteral": true,
                                        "value": "mvn clean install -B -pl !$ITESTS $DISABLE_DOWNLOAD_PROGRESS_OPTS"
                                      }
                                    }
                                  ]
                                },
                                {
                                  "name": "sh",
                                  "arguments": [
                                    {
                                      "key": "script",
                                      "value": {
                                        "isLiteral": true,
                                        "value": "mvn install -B -pl $ITESTS -nsu $DISABLE_DOWNLOAD_PROGRESS_OPTS"
                                      }
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "Windows",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "retry",
                          "arguments": {
                            "isLiteral": true,
                            "value": 3
                          },
                          "children": [
                            {
                              "name": "checkout",
                              "arguments": [
                                {
                                  "key": "scm",
                                  "value": {
                                    "isLiteral": false,
                                    "value": "${scm}"
                                  }
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "name": "timeout",
                          "arguments": [
                            {
                              "key": "time",
                              "value": {
                                "isLiteral": true,
                                "value": 3
                              }
                            },
                            {
                              "key": "unit",
                              "value": {
                                "isLiteral": true,
                                "value": "HOURS"
                              }
                            }
                          ],
                          "children": [
                            {
                              "name": "withMaven",
                              "arguments": [
                                {
                                  "key": "maven",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "M35"
                                  }
                                },
                                {
                                  "key": "jdk",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "jdk8-latest"
                                  }
                                },
                                {
                                  "key": "globalMavenSettingsConfig",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "default-global-settings"
                                  }
                                },
                                {
                                  "key": "mavenSettingsConfig",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "codice-maven-settings"
                                  }
                                },
                                {
                                  "key": "mavenOpts",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "${LARGE_MVN_OPTS}"
                                  }
                                }
                              ],
                              "children": [
                                {
                                  "name": "bat",
                                  "arguments": [
                                    {
                                      "key": "script",
                                      "value": {
                                        "isLiteral": true,
                                        "value": "mvn clean install -B -pl !%ITESTS% %DISABLE_DOWNLOAD_PROGRESS_OPTS%"
                                      }
                                    }
                                  ]
                                },
                                {
                                  "name": "bat",
                                  "arguments": [
                                    {
                                      "key": "script",
                                      "value": {
                                        "isLiteral": true,
                                        "value": "mvn install -B -pl %ITESTS% -nsu %DISABLE_DOWNLOAD_PROGRESS_OPTS%"
                                      }
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ],
                  "agent": {
                    "type": "label",
                    "argument": {
                      "isLiteral": true,
                      "value": "server-2016-large"
                    }
                  }
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "expression",
                    "arguments": [
                      {
                        "key": "scriptBlock",
                        "value": {
                          "isLiteral": true,
                          "value": "env.CHANGE_ID == null"
                        }
                      }
                    ]
                  }
                ]
              }
            },
            {
              "name": "Security Analysis",
              "parallel": [
                {
                  "name": "Owasp",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "withMaven",
                          "arguments": [
                            {
                              "key": "maven",
                              "value": {
                                "isLiteral": true,
                                "value": "M35"
                              }
                            },
                            {
                              "key": "jdk",
                              "value": {
                                "isLiteral": true,
                                "value": "jdk8-latest"
                              }
                            },
                            {
                              "key": "globalMavenSettingsConfig",
                              "value": {
                                "isLiteral": true,
                                "value": "default-global-settings"
                              }
                            },
                            {
                              "key": "mavenSettingsConfig",
                              "value": {
                                "isLiteral": true,
                                "value": "codice-maven-settings"
                              }
                            },
                            {
                              "key": "mavenOpts",
                              "value": {
                                "isLiteral": true,
                                "value": "${LARGE_MVN_OPTS} ${LINUX_MVN_RANDOM}"
                              }
                            }
                          ],
                          "children": [
                            {
                              "name": "script",
                              "arguments": [
                                {
                                  "key": "scriptBlock",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "if (env.CHANGE_ID == null) {\n                                    sh 'mvn install -q -B -Powasp -DskipTests=true -DskipStatic=true -pl !$DOCS $DISABLE_DOWNLOAD_PROGRESS_OPTS'\n                                } else {\n                                    sh 'mvn install -q -B -Powasp -DskipTests=true -DskipStatic=true -pl !$DOCS -Dgib.enabled=true -Dgib.referenceBranch=/refs/remotes/origin/$CHANGE_TARGET $DISABLE_DOWNLOAD_PROGRESS_OPTS'\n                                }"
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "NodeJsSecurity",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "retry",
                          "arguments": {
                            "isLiteral": true,
                            "value": 3
                          },
                          "children": [
                            {
                              "name": "checkout",
                              "arguments": [
                                {
                                  "key": "scm",
                                  "value": {
                                    "isLiteral": false,
                                    "value": "${scm}"
                                  }
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "name": "script",
                          "arguments": [
                            {
                              "key": "scriptBlock",
                              "value": {
                                "isLiteral": true,
                                "value": "def packageFiles = findFiles(glob: '**/package.json')\n                            for (int i = 0; i < packageFiles.size(); i++) {\n                                dir(packageFiles[i].path.split('package.json')[0]) {\n                                    def packageFile = readJSON file: 'package.json'\n                                    if (packageFile.scripts =~ /.*webpack.*/ || packageFile.containsKey(\"browserify\")) {\n                                        nodejs(configId: 'npmrc-default', nodeJSInstallationName: 'nodejs') {\n                                            echo \"Scanning ${packageFiles[i].path}\"\n                                            sh 'nsp check'\n                                        }\n                                    }\n                                }\n                            }"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ],
                  "agent": {
                    "type": "label",
                    "argument": {
                      "isLiteral": true,
                      "value": "linux-small"
                    }
                  }
                }
              ]
            },
            {
              "name": "Deploy",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "withMaven",
                      "arguments": [
                        {
                          "key": "maven",
                          "value": {
                            "isLiteral": true,
                            "value": "M3"
                          }
                        },
                        {
                          "key": "jdk",
                          "value": {
                            "isLiteral": true,
                            "value": "jdk8-latest"
                          }
                        },
                        {
                          "key": "globalMavenSettingsConfig",
                          "value": {
                            "isLiteral": true,
                            "value": "default-global-settings"
                          }
                        },
                        {
                          "key": "mavenSettingsConfig",
                          "value": {
                            "isLiteral": true,
                            "value": "codice-maven-settings"
                          }
                        },
                        {
                          "key": "mavenOpts",
                          "value": {
                            "isLiteral": true,
                            "value": "${LINUX_MVN_RANDOM}"
                          }
                        }
                      ],
                      "children": [
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "mvn javadoc:aggregate -B -DskipStatic=true -DskipTests=true $DISABLE_DOWNLOAD_PROGRESS_OPTS"
                              }
                            }
                          ]
                        },
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "mvn deploy -B -T 1C -DskipStatic=true -DskipTests=true -DretryFailedDeploymentCount=10 $DISABLE_DOWNLOAD_PROGRESS_OPTS"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "allOf",
                    "children": [
                      {
                        "name": "expression",
                        "arguments": [
                          {
                            "key": "scriptBlock",
                            "value": {
                              "isLiteral": true,
                              "value": "env.CHANGE_ID == null"
                            }
                          }
                        ]
                      },
                      {
                        "name": "expression",
                        "arguments": [
                          {
                            "key": "scriptBlock",
                            "value": {
                              "isLiteral": true,
                              "value": "env.BRANCH_NAME ==~ /((?:\\d*\\.)?\\d*\\.x|master)/"
                            }
                          }
                        ]
                      },
                      {
                        "name": "environment",
                        "arguments": [
                          {
                            "key": "name",
                            "value": {
                              "isLiteral": true,
                              "value": "JENKINS_ENV"
                            }
                          },
                          {
                            "key": "value",
                            "value": {
                              "isLiteral": true,
                              "value": "prod"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            },
            {
              "name": "Quality Analysis",
              "parallel": [
                {
                  "name": "SonarCloud",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "withMaven",
                          "arguments": [
                            {
                              "key": "maven",
                              "value": {
                                "isLiteral": true,
                                "value": "M35"
                              }
                            },
                            {
                              "key": "jdk",
                              "value": {
                                "isLiteral": true,
                                "value": "jdk8-latest"
                              }
                            },
                            {
                              "key": "globalMavenSettingsConfig",
                              "value": {
                                "isLiteral": true,
                                "value": "default-global-settings"
                              }
                            },
                            {
                              "key": "mavenSettingsConfig",
                              "value": {
                                "isLiteral": true,
                                "value": "codice-maven-settings"
                              }
                            },
                            {
                              "key": "mavenOpts",
                              "value": {
                                "isLiteral": true,
                                "value": "${LARGE_MVN_OPTS} ${LINUX_MVN_RANDOM}"
                              }
                            }
                          ],
                          "children": [
                            {
                              "name": "withCredentials",
                              "arguments": {
                                "isLiteral": false,
                                "value": "${[string(credentialsId: 'SonarQubeGithubToken', variable: 'SONARQUBE_GITHUB_TOKEN'), string(credentialsId: 'sonarqube-token', variable: 'SONAR_TOKEN')]}"
                              },
                              "children": [
                                {
                                  "name": "script",
                                  "arguments": [
                                    {
                                      "key": "scriptBlock",
                                      "value": {
                                        "isLiteral": true,
                                        "value": "if (env.CHANGE_ID == null) {\n                                        sh 'mvn -q -B -Dcheckstyle.skip=true org.jacoco:jacoco-maven-plugin:prepare-agent install sonar:sonar -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=$SONAR_TOKEN  -Dsonar.organization=codice -Dsonar.projectKey=ddf -Dsonar.exclusions=${COVERAGE_EXCLUSIONS} -pl !$DOCS,!$ITESTS $DISABLE_DOWNLOAD_PROGRESS_OPTS'\n                                    } else {\n                                        sh 'mvn -q -B -Dcheckstyle.skip=true org.jacoco:jacoco-maven-plugin:prepare-agent install sonar:sonar -Dsonar.github.pullRequest=${CHANGE_ID} -Dsonar.github.oauth=${SONARQUBE_GITHUB_TOKEN} -Dsonar.analysis.mode=preview -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=$SONAR_TOKEN -Dsonar.organization=codice -Dsonar.projectKey=ddf -Dsonar.exclusions=${COVERAGE_EXCLUSIONS} -pl !$DOCS,!$ITESTS -Dgib.enabled=true -Dgib.referenceBranch=/refs/remotes/origin/$CHANGE_TARGET $DISABLE_DOWNLOAD_PROGRESS_OPTS'\n                                    }"
                                      }
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "Coverity",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "retry",
                          "arguments": {
                            "isLiteral": true,
                            "value": 3
                          },
                          "children": [
                            {
                              "name": "checkout",
                              "arguments": [
                                {
                                  "key": "scm",
                                  "value": {
                                    "isLiteral": false,
                                    "value": "${scm}"
                                  }
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "name": "script",
                          "arguments": [
                            {
                              "key": "scriptBlock",
                              "value": {
                                "isLiteral": true,
                                "value": "if (env.BRANCH_NAME != 'master') {\n                                echo \"Coverity is only run on master\"\n                            } else {\n                                withMaven(maven: 'M35', jdk: 'jdk8-latest', globalMavenSettingsConfig: 'default-global-settings', mavenSettingsConfig: 'codice-maven-settings', mavenOpts: '${LINUX_MVN_RANDOM}') {\n                                    withCredentials([string(credentialsId: 'ddf-coverity-token', variable: 'COVERITY_TOKEN')]) {\n                                        withEnv([\"PATH=${tool 'coverity-linux'}/bin:${env.PATH}\"]) {\n                                            configFileProvider([configFile(fileId: 'coverity-maven-settings', replaceTokens: true, variable: 'MAVEN_SETTINGS')]) {\n                                                echo sh(returnStdout: true, script: 'env')\n                                                sh 'cov-build --dir cov-int mvn -DskipTests=true -DskipStatic=true install -B -pl !$DOCS $DISABLE_DOWNLOAD_PROGRESS_OPTS --settings $MAVEN_SETTINGS'\n                                                sh 'tar czvf ddf.tgz cov-int'\n                                                sh 'curl --form token=$COVERITY_TOKEN --form email=cmp-security-team@connexta.com --form file=@ddf.tgz --form version=\"master\" --form description=\"Description: DDF CI Build\" https://scan.coverity.com/builds?project=codice%2Fddf'\n                                            }\n                                        }\n                                    }\n                                }\n                            }"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ],
                  "agent": {
                    "type": "label",
                    "argument": {
                      "isLiteral": true,
                      "value": "linux-medium"
                    }
                  }
                },
                {
                  "name": "Codecov",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "retry",
                          "arguments": {
                            "isLiteral": true,
                            "value": 3
                          },
                          "children": [
                            {
                              "name": "checkout",
                              "arguments": [
                                {
                                  "key": "scm",
                                  "value": {
                                    "isLiteral": false,
                                    "value": "${scm}"
                                  }
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "name": "withMaven",
                          "arguments": [
                            {
                              "key": "maven",
                              "value": {
                                "isLiteral": true,
                                "value": "M35"
                              }
                            },
                            {
                              "key": "jdk",
                              "value": {
                                "isLiteral": true,
                                "value": "jdk8-latest"
                              }
                            },
                            {
                              "key": "globalMavenSettingsConfig",
                              "value": {
                                "isLiteral": true,
                                "value": "default-global-settings"
                              }
                            },
                            {
                              "key": "mavenSettingsConfig",
                              "value": {
                                "isLiteral": true,
                                "value": "codice-maven-settings"
                              }
                            },
                            {
                              "key": "mavenOpts",
                              "value": {
                                "isLiteral": true,
                                "value": "${LARGE_MVN_OPTS} ${LINUX_MVN_RANDOM}"
                              }
                            }
                          ],
                          "children": [
                            {
                              "name": "withCredentials",
                              "arguments": {
                                "isLiteral": false,
                                "value": "${[string(credentialsId: 'DDF_CodeCov', variable: 'DDF_CODECOV_TOKEN')]}"
                              },
                              "children": [
                                {
                                  "name": "sh",
                                  "arguments": [
                                    {
                                      "key": "script",
                                      "value": {
                                        "isLiteral": true,
                                        "value": "mvn clean install -B -T 1C -pl !$ITESTS $DISABLE_DOWNLOAD_PROGRESS_OPTS"
                                      }
                                    }
                                  ]
                                },
                                {
                                  "name": "sh",
                                  "arguments": [
                                    {
                                      "key": "script",
                                      "value": {
                                        "isLiteral": true,
                                        "value": "curl -s https://codecov.io/bash | bash -s - -t ${DDF_CODECOV_TOKEN}"
                                      }
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ],
                  "agent": {
                    "type": "label",
                    "argument": {
                      "isLiteral": true,
                      "value": "linux-medium"
                    }
                  }
                }
              ]
            }
          ],
          "post": {
            "conditions": [
              {
                "condition": "success",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "slackSend",
                      "arguments": [
                        {
                          "key": "color",
                          "value": {
                            "isLiteral": true,
                            "value": "good"
                          }
                        },
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": false,
                            "value": "\"SUCCESS: ${JOB_NAME} ${BUILD_NUMBER}\""
                          }
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "condition": "failure",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "slackSend",
                      "arguments": [
                        {
                          "key": "color",
                          "value": {
                            "isLiteral": true,
                            "value": "#ea0017"
                          }
                        },
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": false,
                            "value": "\"FAILURE: ${JOB_NAME} ${BUILD_NUMBER}. See the results here: ${BUILD_URL}\""
                          }
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "condition": "unstable",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "slackSend",
                      "arguments": [
                        {
                          "key": "color",
                          "value": {
                            "isLiteral": true,
                            "value": "#ffb600"
                          }
                        },
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": false,
                            "value": "\"UNSTABLE: ${JOB_NAME} ${BUILD_NUMBER}. See the results here: ${BUILD_URL}\""
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          },
          "environment": [
            {
              "key": "DOCS",
              "value": {
                "isLiteral": true,
                "value": "distribution/docs"
              }
            },
            {
              "key": "ITESTS",
              "value": {
                "isLiteral": true,
                "value": "distribution/test/itests/test-itests-ddf"
              }
            },
            {
              "key": "POMFIX",
              "value": {
                "isLiteral": true,
                "value": "libs/libs-pomfix,libs/libs-pomfix-run"
              }
            },
            {
              "key": "LARGE_MVN_OPTS",
              "value": {
                "isLiteral": true,
                "value": "-Xmx8192M -Xss128M -XX:+CMSClassUnloadingEnabled -XX:+UseConcMarkSweepGC "
              }
            },
            {
              "key": "DISABLE_DOWNLOAD_PROGRESS_OPTS",
              "value": {
                "isLiteral": true,
                "value": "-Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn "
              }
            },
            {
              "key": "LINUX_MVN_RANDOM",
              "value": {
                "isLiteral": true,
                "value": "-Djava.security.egd=file:/dev/./urandom"
              }
            },
            {
              "key": "COVERAGE_EXCLUSIONS",
              "value": {
                "isLiteral": true,
                "value": "**/test/**/*,**/itests/**/*,**/*Test*,**/sdk/**/*,**/*.js,**/node_modules/**/*,**/jaxb/**/*,**/wsdl/**/*,**/nces/sws/**/*,**/*.adoc,**/*.txt,**/*.xml,**/platform-solr-server-standalone/**/*"
              }
            }
          ],
          "agent": {
            "type": "label",
            "argument": {
              "isLiteral": true,
              "value": "linux-large"
            }
          },
          "options": {
            "options": [
              {
                "name": "buildDiscarder",
                "arguments": [
                  {
                    "name": "logRotator",
                    "arguments": [
                      {
                        "key": "numToKeepStr",
                        "value": {
                          "isLiteral": true,
                          "value": "25"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "name": "disableConcurrentBuilds",
                "arguments": []
              },
              {
                "name": "timestamps",
                "arguments": []
              },
              {
                "name": "skipDefaultCheckout",
                "arguments": []
              }
            ]
          },
          "triggers": {
            "triggers": [
              {
                "name": "cron",
                "arguments": [
                  {
                    "isLiteral": false,
                    "value": "${BRANCH_NAME == \"master\" ? \"H H(17-19) * * *\" : \"\"}"
                  }
                ]
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "shivangi-singh/shivangisingh",
      "repo_url": "https://github.com/shivangi-singh/shivangisingh",
      "html_url_jenkinsfile": "https://github.com/shivangi-singh/shivangisingh/blob/0ea708209c4c7830e53906fa7c825dbb2960fa80/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/129195262/git/blobs/b6de145df6d74dbda4e79143f561ee638addda39",
      "jenkins_pipeline": [
        {
          "error": "Jenkinsfile content '/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nproperties([buildDiscarder(logRotator(artifactNumToKeepStr: '5', numToKeepStr: env.BRANCH_NAME=='master'?'10':'5'))])\n\ndef buildOs = 'linux'\ndef buildJdk = '7'\ndef buildMvn = '3.5.0'\ndef tests\ndef CORE_IT_PROFILES='run-its,embedded'\n\ntry {\n\nnode(jenkinsEnv.labelForOS(buildOs)) {\n    dir('build') {\n        stage('Checkout') {\n            checkout scm\n        }\n\n        def WORK_DIR=pwd()\n\n        stage('Build / Unit Test') {\n            String jdkName = jenkinsEnv.jdkFromVersion(buildOs, buildJdk)\n            String mvnName = jenkinsEnv.mvnFromVersion(buildOs, buildMvn)\n            withMaven(jdk: jdkName, maven: mvnName, mavenLocalRepo:\"${WORK_DIR}/.repository\", options:[\n                artifactsPublisher(disabled: false),\n                junitPublisher(ignoreAttachments: false),\n                findbugsPublisher(disabled: false),\n                openTasksPublisher(disabled: false),\n                dependenciesFingerprintPublisher(),\n                invokerPublisher(),\n                pipelineGraphPublisher()\n            ]) {\n                sh \"mvn clean verify -B -U -e -fae -V -Dmaven.test.failure.ignore=true\"\n            }\n            dir ('apache-maven/target') {\n                sh \"mv apache-maven-*-bin.zip apache-maven-dist.zip\"\n                stash includes: 'apache-maven-dist.zip', name: 'dist'\n            }\n        }\n\n        tests = resolveScm source: [$class: 'GitSCMSource', credentialsId: '', id: '_', remote: 'https://gitbox.apache.org/repos/asf/maven-integration-testing.git', traits: [[$class: 'jenkins.plugins.git.traits.BranchDiscoveryTrait'], [$class: 'GitToolSCMSourceTrait', gitTool: 'Default']]], targets: [BRANCH_NAME, 'master']\n    }\n}\n\n\nparallel linuxJava7:{\n        node(jenkinsEnv.labelForOS('linux')) {\n            stage ('Linux Java 7') {\n                String jdkName = jenkinsEnv.jdkFromVersion('linux', '7')\n                String mvnName = jenkinsEnv.mvnFromVersion('linux', buildMvn)\n                dir('test') {\n                    def WORK_DIR=pwd()\n                    checkout tests\n                    sh \"rm -rvf $WORK_DIR/apache-maven-dist.zip $WORK_DIR/it-local-repo\"\n                    unstash 'dist'\n                    withMaven(jdk: jdkName, maven: mvnName, mavenLocalRepo:\"${WORK_DIR}/it-local-repo\", options:[\n                        junitPublisher(ignoreAttachments: false)\n                    ]) {\n                        sh \"mvn clean install -P$CORE_IT_PROFILES -B -U -V -Dmaven.test.failure.ignore=true -DmavenDistro=$WORK_DIR/apache-maven-dist.zip\"\n                    }\n                    deleteDir() // clean up after ourselves to reduce disk space\n                }\n            }\n        }\n    },linuxJava8: {\n        node(jenkinsEnv.labelForOS('linux')) {\n            stage ('Linux Java 8') {\n                String jdkName = jenkinsEnv.jdkFromVersion('linux', '8')\n                String mvnName = jenkinsEnv.mvnFromVersion('linux', buildMvn)\n                dir('test') {\n                    def WORK_DIR=pwd()\n                    checkout tests\n                    sh \"rm -rvf $WORK_DIR/apache-maven-dist.zip $WORK_DIR/it-local-repo\"\n                    unstash 'dist'\n                    withMaven(jdk: jdkName, maven: mvnName, mavenLocalRepo:\"${WORK_DIR}/it-local-repo\", options:[\n                        junitPublisher(ignoreAttachments: false)\n                    ]) {\n                        sh \"mvn clean install -P$CORE_IT_PROFILES -B -U -V -Dmaven.test.failure.ignore=true -DmavenDistro=$WORK_DIR/apache-maven-dist.zip\"\n                    }\n                    deleteDir() // clean up after ourselves to reduce disk space\n                }\n            }\n        }\n    }, winJava7: {\n        node(jenkinsEnv.labelForOS('windows')) {\n            stage ('Windows Java 7') {\n                String jdkName = jenkinsEnv.jdkFromVersion('windows', '7')\n                String mvnName = jenkinsEnv.mvnFromVersion('windows', buildMvn)\n\n                // need a short path or we hit 256 character limit for paths\n                // using EXECUTOR_NUMBER guarantees that concurrent builds on same agent\n                // will not trample each other\n                dir(\"/mvn-it-${EXECUTOR_NUMBER}.tmp\") {\n                    def WORK_DIR=pwd()\n                    checkout tests\n                    bat \"if exist it-local-repo rmdir /s /q it-local-repo\"\n                    bat \"if exist apache-maven-dist.zip del /q apache-maven-dist.zip\"\n                    unstash 'dist'\n                    withMaven(jdk: jdkName, maven: mvnName, mavenLocalRepo:\"${WORK_DIR}/it-local-repo\", options:[\n                        junitPublisher(ignoreAttachments: false)\n                    ]) {\n                        bat \"mvn clean install -P$CORE_IT_PROFILES -B -U -V -Dmaven.test.failure.ignore=true -DmavenDistro=$WORK_DIR/apache-maven-dist.zip\"\n                    }\n                    deleteDir() // clean up after ourselves to reduce disk space\n                }\n            }\n        }\n    }, winJava8: {\n        node(jenkinsEnv.labelForOS('windows')) {\n            stage ('Windows Java 8') {\n                String jdkName = jenkinsEnv.jdkFromVersion('windows', '8')\n                String mvnName = jenkinsEnv.mvnFromVersion('windows', buildMvn)\n\n                // need a short path or we hit 256 character limit for paths\n                // using EXECUTOR_NUMBER guarantees that concurrent builds on same agent\n                // will not trample each other\n                dir(\"/mvn-it-${EXECUTOR_NUMBER}.tmp\") {\n                    def WORK_DIR=pwd()\n                    checkout tests\n                    bat \"if exist it-local-repo rmdir /s /q it-local-repo\"\n                    bat \"if exist apache-maven-dist.zip del /q apache-maven-dist.zip\"\n                    unstash 'dist'\n                    withMaven(jdk: jdkName, maven: mvnName, mavenLocalRepo:\"${WORK_DIR}/it-local-repo\", options:[\n                        junitPublisher(ignoreAttachments: false)\n                    ]) {\n                        bat \"mvn clean install -P$CORE_IT_PROFILES -B -U -V -Dmaven.test.failure.ignore=true -DmavenDistro=$WORK_DIR/apache-maven-dist.zip\"\n                    }\n                    deleteDir() // clean up after ourselves to reduce disk space\n                }\n            }\n        }\n    }\n\n// JENKINS-34376 seems to make it hard to detect the aborted builds\n} catch (org.jenkinsci.plugins.workflow.steps.FlowInterruptedException e) {\n    // this ambiguous condition means a user probably aborted\n    if (e.causes.size() == 0) {\n        currentBuild.result = \"ABORTED\"\n    } else {\n        currentBuild.result = \"FAILURE\"\n    }\n    throw e\n} catch (hudson.AbortException e) {\n    // this ambiguous condition means during a shell step, user probably aborted\n    if (e.getMessage().contains('script returned exit code 143')) {\n        currentBuild.result = \"ABORTED\"\n    } else {\n        currentBuild.result = \"FAILURE\"\n    }\n    throw e\n} catch (InterruptedException e) {\n    currentBuild.result = \"ABORTED\"\n    throw e\n} catch (Throwable e) {\n    currentBuild.result = \"FAILURE\"\n    throw e\n} finally {\n    // notify completion\n    stage(\"Notifications\") {\n        jenkinsNotify()      \n    }    \n}\n' did not contain the 'pipeline' step"
        }
      ]
    },
    {
      "full_repo_name": "PK143143/parent",
      "repo_url": "https://github.com/PK143143/parent",
      "html_url_jenkinsfile": "https://github.com/PK143143/parent/blob/ef41c0e4f42ddc1c8000bec84c642334ef4fca64/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/130442425/git/blobs/b6de145df6d74dbda4e79143f561ee638addda39",
      "jenkins_pipeline": [
        {
          "error": "Jenkinsfile content '/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nproperties([buildDiscarder(logRotator(artifactNumToKeepStr: '5', numToKeepStr: env.BRANCH_NAME=='master'?'10':'5'))])\n\ndef buildOs = 'linux'\ndef buildJdk = '7'\ndef buildMvn = '3.5.0'\ndef tests\ndef CORE_IT_PROFILES='run-its,embedded'\n\ntry {\n\nnode(jenkinsEnv.labelForOS(buildOs)) {\n    dir('build') {\n        stage('Checkout') {\n            checkout scm\n        }\n\n        def WORK_DIR=pwd()\n\n        stage('Build / Unit Test') {\n            String jdkName = jenkinsEnv.jdkFromVersion(buildOs, buildJdk)\n            String mvnName = jenkinsEnv.mvnFromVersion(buildOs, buildMvn)\n            withMaven(jdk: jdkName, maven: mvnName, mavenLocalRepo:\"${WORK_DIR}/.repository\", options:[\n                artifactsPublisher(disabled: false),\n                junitPublisher(ignoreAttachments: false),\n                findbugsPublisher(disabled: false),\n                openTasksPublisher(disabled: false),\n                dependenciesFingerprintPublisher(),\n                invokerPublisher(),\n                pipelineGraphPublisher()\n            ]) {\n                sh \"mvn clean verify -B -U -e -fae -V -Dmaven.test.failure.ignore=true\"\n            }\n            dir ('apache-maven/target') {\n                sh \"mv apache-maven-*-bin.zip apache-maven-dist.zip\"\n                stash includes: 'apache-maven-dist.zip', name: 'dist'\n            }\n        }\n\n        tests = resolveScm source: [$class: 'GitSCMSource', credentialsId: '', id: '_', remote: 'https://gitbox.apache.org/repos/asf/maven-integration-testing.git', traits: [[$class: 'jenkins.plugins.git.traits.BranchDiscoveryTrait'], [$class: 'GitToolSCMSourceTrait', gitTool: 'Default']]], targets: [BRANCH_NAME, 'master']\n    }\n}\n\n\nparallel linuxJava7:{\n        node(jenkinsEnv.labelForOS('linux')) {\n            stage ('Linux Java 7') {\n                String jdkName = jenkinsEnv.jdkFromVersion('linux', '7')\n                String mvnName = jenkinsEnv.mvnFromVersion('linux', buildMvn)\n                dir('test') {\n                    def WORK_DIR=pwd()\n                    checkout tests\n                    sh \"rm -rvf $WORK_DIR/apache-maven-dist.zip $WORK_DIR/it-local-repo\"\n                    unstash 'dist'\n                    withMaven(jdk: jdkName, maven: mvnName, mavenLocalRepo:\"${WORK_DIR}/it-local-repo\", options:[\n                        junitPublisher(ignoreAttachments: false)\n                    ]) {\n                        sh \"mvn clean install -P$CORE_IT_PROFILES -B -U -V -Dmaven.test.failure.ignore=true -DmavenDistro=$WORK_DIR/apache-maven-dist.zip\"\n                    }\n                    deleteDir() // clean up after ourselves to reduce disk space\n                }\n            }\n        }\n    },linuxJava8: {\n        node(jenkinsEnv.labelForOS('linux')) {\n            stage ('Linux Java 8') {\n                String jdkName = jenkinsEnv.jdkFromVersion('linux', '8')\n                String mvnName = jenkinsEnv.mvnFromVersion('linux', buildMvn)\n                dir('test') {\n                    def WORK_DIR=pwd()\n                    checkout tests\n                    sh \"rm -rvf $WORK_DIR/apache-maven-dist.zip $WORK_DIR/it-local-repo\"\n                    unstash 'dist'\n                    withMaven(jdk: jdkName, maven: mvnName, mavenLocalRepo:\"${WORK_DIR}/it-local-repo\", options:[\n                        junitPublisher(ignoreAttachments: false)\n                    ]) {\n                        sh \"mvn clean install -P$CORE_IT_PROFILES -B -U -V -Dmaven.test.failure.ignore=true -DmavenDistro=$WORK_DIR/apache-maven-dist.zip\"\n                    }\n                    deleteDir() // clean up after ourselves to reduce disk space\n                }\n            }\n        }\n    }, winJava7: {\n        node(jenkinsEnv.labelForOS('windows')) {\n            stage ('Windows Java 7') {\n                String jdkName = jenkinsEnv.jdkFromVersion('windows', '7')\n                String mvnName = jenkinsEnv.mvnFromVersion('windows', buildMvn)\n\n                // need a short path or we hit 256 character limit for paths\n                // using EXECUTOR_NUMBER guarantees that concurrent builds on same agent\n                // will not trample each other\n                dir(\"/mvn-it-${EXECUTOR_NUMBER}.tmp\") {\n                    def WORK_DIR=pwd()\n                    checkout tests\n                    bat \"if exist it-local-repo rmdir /s /q it-local-repo\"\n                    bat \"if exist apache-maven-dist.zip del /q apache-maven-dist.zip\"\n                    unstash 'dist'\n                    withMaven(jdk: jdkName, maven: mvnName, mavenLocalRepo:\"${WORK_DIR}/it-local-repo\", options:[\n                        junitPublisher(ignoreAttachments: false)\n                    ]) {\n                        bat \"mvn clean install -P$CORE_IT_PROFILES -B -U -V -Dmaven.test.failure.ignore=true -DmavenDistro=$WORK_DIR/apache-maven-dist.zip\"\n                    }\n                    deleteDir() // clean up after ourselves to reduce disk space\n                }\n            }\n        }\n    }, winJava8: {\n        node(jenkinsEnv.labelForOS('windows')) {\n            stage ('Windows Java 8') {\n                String jdkName = jenkinsEnv.jdkFromVersion('windows', '8')\n                String mvnName = jenkinsEnv.mvnFromVersion('windows', buildMvn)\n\n                // need a short path or we hit 256 character limit for paths\n                // using EXECUTOR_NUMBER guarantees that concurrent builds on same agent\n                // will not trample each other\n                dir(\"/mvn-it-${EXECUTOR_NUMBER}.tmp\") {\n                    def WORK_DIR=pwd()\n                    checkout tests\n                    bat \"if exist it-local-repo rmdir /s /q it-local-repo\"\n                    bat \"if exist apache-maven-dist.zip del /q apache-maven-dist.zip\"\n                    unstash 'dist'\n                    withMaven(jdk: jdkName, maven: mvnName, mavenLocalRepo:\"${WORK_DIR}/it-local-repo\", options:[\n                        junitPublisher(ignoreAttachments: false)\n                    ]) {\n                        bat \"mvn clean install -P$CORE_IT_PROFILES -B -U -V -Dmaven.test.failure.ignore=true -DmavenDistro=$WORK_DIR/apache-maven-dist.zip\"\n                    }\n                    deleteDir() // clean up after ourselves to reduce disk space\n                }\n            }\n        }\n    }\n\n// JENKINS-34376 seems to make it hard to detect the aborted builds\n} catch (org.jenkinsci.plugins.workflow.steps.FlowInterruptedException e) {\n    // this ambiguous condition means a user probably aborted\n    if (e.causes.size() == 0) {\n        currentBuild.result = \"ABORTED\"\n    } else {\n        currentBuild.result = \"FAILURE\"\n    }\n    throw e\n} catch (hudson.AbortException e) {\n    // this ambiguous condition means during a shell step, user probably aborted\n    if (e.getMessage().contains('script returned exit code 143')) {\n        currentBuild.result = \"ABORTED\"\n    } else {\n        currentBuild.result = \"FAILURE\"\n    }\n    throw e\n} catch (InterruptedException e) {\n    currentBuild.result = \"ABORTED\"\n    throw e\n} catch (Throwable e) {\n    currentBuild.result = \"FAILURE\"\n    throw e\n} finally {\n    // notify completion\n    stage(\"Notifications\") {\n        jenkinsNotify()      \n    }    \n}\n' did not contain the 'pipeline' step"
        }
      ]
    },
    {
      "full_repo_name": "RAMIREDDYSOMULA/maven21",
      "repo_url": "https://github.com/RAMIREDDYSOMULA/maven21",
      "html_url_jenkinsfile": "https://github.com/RAMIREDDYSOMULA/maven21/blob/91d1edf14e0ed198c917efeddd0b8241980ec0ed/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/122578833/git/blobs/697e6eb3f4dfa1827c0945f5ce19045fe6e1d0d1",
      "jenkins_pipeline": [
        {
          "error": "Jenkinsfile content '/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nproperties([buildDiscarder(logRotator(artifactNumToKeepStr: '5', numToKeepStr: env.BRANCH_NAME=='master'?'10':'5'))])\n\ndef buildOs = 'linux'\ndef buildJdk = '7'\ndef buildMvn = '3.5.0'\ndef tests\ndef CORE_IT_PROFILES='run-its,embedded'\n\ntry {\n\nnode(jenkinsEnv.labelForOS(buildOs)) {\n    dir('build') {\n        stage('Checkout') {\n            checkout scm\n        }\n\n        def WORK_DIR=pwd()\n\n        stage('Build / Unit Test') {\n            String jdkName = jenkinsEnv.jdkFromVersion(buildOs, buildJdk)\n            String mvnName = jenkinsEnv.mvnFromVersion(buildOs, buildMvn)\n            withMaven(jdk: jdkName, maven: mvnName, mavenLocalRepo:\"${WORK_DIR}/.repository\", options:[\n                artifactsPublisher(disabled: false),\n                junitPublisher(ignoreAttachments: false),\n                findbugsPublisher(disabled: false),\n                openTasksPublisher(disabled: false),\n                dependenciesFingerprintPublisher(),\n                invokerPublisher(),\n                pipelineGraphPublisher()\n            ]) {\n                sh \"mvn clean verify -B -U -e -fae -V -Dmaven.test.failure.ignore=true\"\n            }\n            dir ('apache-maven/target') {\n                sh \"mv apache-maven-*-bin.zip apache-maven-dist.zip\"\n                stash includes: 'apache-maven-dist.zip', name: 'dist'\n            }\n        }\n\n        tests = resolveScm source: [$class: 'GitSCMSource', credentialsId: '', id: '_', remote: 'https://git-wip-us.apache.org/repos/asf/maven-integration-testing.git', traits: [[$class: 'jenkins.plugins.git.traits.BranchDiscoveryTrait'], [$class: 'GitToolSCMSourceTrait', gitTool: 'Default']]], targets: [BRANCH_NAME, 'master']\n    }\n}\n\n\nparallel linuxJava7:{\n        node(jenkinsEnv.labelForOS('linux')) {\n            stage ('Linux Java 7') {\n                String jdkName = jenkinsEnv.jdkFromVersion('linux', '7')\n                String mvnName = jenkinsEnv.mvnFromVersion('linux', buildMvn)\n                dir('test') {\n                    def WORK_DIR=pwd()\n                    checkout tests\n                    sh \"rm -rvf $WORK_DIR/apache-maven-dist.zip $WORK_DIR/it-local-repo\"\n                    unstash 'dist'\n                    withMaven(jdk: jdkName, maven: mvnName, mavenLocalRepo:\"${WORK_DIR}/it-local-repo\", options:[\n                        junitPublisher(ignoreAttachments: false)\n                    ]) {\n                        sh \"mvn clean install -P$CORE_IT_PROFILES -B -U -V -Dmaven.test.failure.ignore=true -DmavenDistro=$WORK_DIR/apache-maven-dist.zip\"\n                    }\n                    deleteDir() // clean up after ourselves to reduce disk space\n                }\n            }\n        }\n    },linuxJava8: {\n        node(jenkinsEnv.labelForOS('linux')) {\n            stage ('Linux Java 8') {\n                String jdkName = jenkinsEnv.jdkFromVersion('linux', '8')\n                String mvnName = jenkinsEnv.mvnFromVersion('linux', buildMvn)\n                dir('test') {\n                    def WORK_DIR=pwd()\n                    checkout tests\n                    sh \"rm -rvf $WORK_DIR/apache-maven-dist.zip $WORK_DIR/it-local-repo\"\n                    unstash 'dist'\n                    withMaven(jdk: jdkName, maven: mvnName, mavenLocalRepo:\"${WORK_DIR}/it-local-repo\", options:[\n                        junitPublisher(ignoreAttachments: false)\n                    ]) {\n                        sh \"mvn clean install -P$CORE_IT_PROFILES -B -U -V -Dmaven.test.failure.ignore=true -DmavenDistro=$WORK_DIR/apache-maven-dist.zip\"\n                    }\n                    deleteDir() // clean up after ourselves to reduce disk space\n                }\n            }\n        }\n    }, winJava7: {\n        node(jenkinsEnv.labelForOS('windows')) {\n            stage ('Windows Java 7') {\n                String jdkName = jenkinsEnv.jdkFromVersion('windows', '7')\n                String mvnName = jenkinsEnv.mvnFromVersion('windows', buildMvn)\n\n                // need a short path or we hit 256 character limit for paths\n                // using EXECUTOR_NUMBER guarantees that concurrent builds on same agent\n                // will not trample each other\n                dir(\"/mvn-it-${EXECUTOR_NUMBER}.tmp\") {\n                    def WORK_DIR=pwd()\n                    checkout tests\n                    bat \"if exist it-local-repo rmdir /s /q it-local-repo\"\n                    bat \"if exist apache-maven-dist.zip del /q apache-maven-dist.zip\"\n                    unstash 'dist'\n                    withMaven(jdk: jdkName, maven: mvnName, mavenLocalRepo:\"${WORK_DIR}/it-local-repo\", options:[\n                        junitPublisher(ignoreAttachments: false)\n                    ]) {\n                        bat \"mvn clean install -P$CORE_IT_PROFILES -B -U -V -Dmaven.test.failure.ignore=true -DmavenDistro=$WORK_DIR/apache-maven-dist.zip\"\n                    }\n                    deleteDir() // clean up after ourselves to reduce disk space\n                }\n            }\n        }\n    }, winJava8: {\n        node(jenkinsEnv.labelForOS('windows')) {\n            stage ('Windows Java 8') {\n                String jdkName = jenkinsEnv.jdkFromVersion('windows', '8')\n                String mvnName = jenkinsEnv.mvnFromVersion('windows', buildMvn)\n\n                // need a short path or we hit 256 character limit for paths\n                // using EXECUTOR_NUMBER guarantees that concurrent builds on same agent\n                // will not trample each other\n                dir(\"/mvn-it-${EXECUTOR_NUMBER}.tmp\") {\n                    def WORK_DIR=pwd()\n                    checkout tests\n                    bat \"if exist it-local-repo rmdir /s /q it-local-repo\"\n                    bat \"if exist apache-maven-dist.zip del /q apache-maven-dist.zip\"\n                    unstash 'dist'\n                    withMaven(jdk: jdkName, maven: mvnName, mavenLocalRepo:\"${WORK_DIR}/it-local-repo\", options:[\n                        junitPublisher(ignoreAttachments: false)\n                    ]) {\n                        bat \"mvn clean install -P$CORE_IT_PROFILES -B -U -V -Dmaven.test.failure.ignore=true -DmavenDistro=$WORK_DIR/apache-maven-dist.zip\"\n                    }\n                    deleteDir() // clean up after ourselves to reduce disk space\n                }\n            }\n        }\n    }\n\n// JENKINS-34376 seems to make it hard to detect the aborted builds\n} catch (org.jenkinsci.plugins.workflow.steps.FlowInterruptedException e) {\n    // this ambiguous condition means a user probably aborted\n    if (e.causes.size() == 0) {\n        currentBuild.result = \"ABORTED\"\n    } else {\n        currentBuild.result = \"FAILURE\"\n    }\n    throw e\n} catch (hudson.AbortException e) {\n    // this ambiguous condition means during a shell step, user probably aborted\n    if (e.getMessage().contains('script returned exit code 143')) {\n        currentBuild.result = \"ABORTED\"\n    } else {\n        currentBuild.result = \"FAILURE\"\n    }\n    throw e\n} catch (InterruptedException e) {\n    currentBuild.result = \"ABORTED\"\n    throw e\n} catch (Throwable e) {\n    currentBuild.result = \"FAILURE\"\n    throw e\n} finally {\n    // notify completion\n    stage(\"Notifications\") {\n        jenkinsNotify()      \n    }    \n}\n' did not contain the 'pipeline' step"
        }
      ]
    },
    {
      "full_repo_name": "sreehari20/Maven",
      "repo_url": "https://github.com/sreehari20/Maven",
      "html_url_jenkinsfile": "https://github.com/sreehari20/Maven/blob/91d1edf14e0ed198c917efeddd0b8241980ec0ed/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/122501985/git/blobs/697e6eb3f4dfa1827c0945f5ce19045fe6e1d0d1",
      "jenkins_pipeline": [
        {
          "error": "Jenkinsfile content '/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nproperties([buildDiscarder(logRotator(artifactNumToKeepStr: '5', numToKeepStr: env.BRANCH_NAME=='master'?'10':'5'))])\n\ndef buildOs = 'linux'\ndef buildJdk = '7'\ndef buildMvn = '3.5.0'\ndef tests\ndef CORE_IT_PROFILES='run-its,embedded'\n\ntry {\n\nnode(jenkinsEnv.labelForOS(buildOs)) {\n    dir('build') {\n        stage('Checkout') {\n            checkout scm\n        }\n\n        def WORK_DIR=pwd()\n\n        stage('Build / Unit Test') {\n            String jdkName = jenkinsEnv.jdkFromVersion(buildOs, buildJdk)\n            String mvnName = jenkinsEnv.mvnFromVersion(buildOs, buildMvn)\n            withMaven(jdk: jdkName, maven: mvnName, mavenLocalRepo:\"${WORK_DIR}/.repository\", options:[\n                artifactsPublisher(disabled: false),\n                junitPublisher(ignoreAttachments: false),\n                findbugsPublisher(disabled: false),\n                openTasksPublisher(disabled: false),\n                dependenciesFingerprintPublisher(),\n                invokerPublisher(),\n                pipelineGraphPublisher()\n            ]) {\n                sh \"mvn clean verify -B -U -e -fae -V -Dmaven.test.failure.ignore=true\"\n            }\n            dir ('apache-maven/target') {\n                sh \"mv apache-maven-*-bin.zip apache-maven-dist.zip\"\n                stash includes: 'apache-maven-dist.zip', name: 'dist'\n            }\n        }\n\n        tests = resolveScm source: [$class: 'GitSCMSource', credentialsId: '', id: '_', remote: 'https://git-wip-us.apache.org/repos/asf/maven-integration-testing.git', traits: [[$class: 'jenkins.plugins.git.traits.BranchDiscoveryTrait'], [$class: 'GitToolSCMSourceTrait', gitTool: 'Default']]], targets: [BRANCH_NAME, 'master']\n    }\n}\n\n\nparallel linuxJava7:{\n        node(jenkinsEnv.labelForOS('linux')) {\n            stage ('Linux Java 7') {\n                String jdkName = jenkinsEnv.jdkFromVersion('linux', '7')\n                String mvnName = jenkinsEnv.mvnFromVersion('linux', buildMvn)\n                dir('test') {\n                    def WORK_DIR=pwd()\n                    checkout tests\n                    sh \"rm -rvf $WORK_DIR/apache-maven-dist.zip $WORK_DIR/it-local-repo\"\n                    unstash 'dist'\n                    withMaven(jdk: jdkName, maven: mvnName, mavenLocalRepo:\"${WORK_DIR}/it-local-repo\", options:[\n                        junitPublisher(ignoreAttachments: false)\n                    ]) {\n                        sh \"mvn clean install -P$CORE_IT_PROFILES -B -U -V -Dmaven.test.failure.ignore=true -DmavenDistro=$WORK_DIR/apache-maven-dist.zip\"\n                    }\n                    deleteDir() // clean up after ourselves to reduce disk space\n                }\n            }\n        }\n    },linuxJava8: {\n        node(jenkinsEnv.labelForOS('linux')) {\n            stage ('Linux Java 8') {\n                String jdkName = jenkinsEnv.jdkFromVersion('linux', '8')\n                String mvnName = jenkinsEnv.mvnFromVersion('linux', buildMvn)\n                dir('test') {\n                    def WORK_DIR=pwd()\n                    checkout tests\n                    sh \"rm -rvf $WORK_DIR/apache-maven-dist.zip $WORK_DIR/it-local-repo\"\n                    unstash 'dist'\n                    withMaven(jdk: jdkName, maven: mvnName, mavenLocalRepo:\"${WORK_DIR}/it-local-repo\", options:[\n                        junitPublisher(ignoreAttachments: false)\n                    ]) {\n                        sh \"mvn clean install -P$CORE_IT_PROFILES -B -U -V -Dmaven.test.failure.ignore=true -DmavenDistro=$WORK_DIR/apache-maven-dist.zip\"\n                    }\n                    deleteDir() // clean up after ourselves to reduce disk space\n                }\n            }\n        }\n    }, winJava7: {\n        node(jenkinsEnv.labelForOS('windows')) {\n            stage ('Windows Java 7') {\n                String jdkName = jenkinsEnv.jdkFromVersion('windows', '7')\n                String mvnName = jenkinsEnv.mvnFromVersion('windows', buildMvn)\n\n                // need a short path or we hit 256 character limit for paths\n                // using EXECUTOR_NUMBER guarantees that concurrent builds on same agent\n                // will not trample each other\n                dir(\"/mvn-it-${EXECUTOR_NUMBER}.tmp\") {\n                    def WORK_DIR=pwd()\n                    checkout tests\n                    bat \"if exist it-local-repo rmdir /s /q it-local-repo\"\n                    bat \"if exist apache-maven-dist.zip del /q apache-maven-dist.zip\"\n                    unstash 'dist'\n                    withMaven(jdk: jdkName, maven: mvnName, mavenLocalRepo:\"${WORK_DIR}/it-local-repo\", options:[\n                        junitPublisher(ignoreAttachments: false)\n                    ]) {\n                        bat \"mvn clean install -P$CORE_IT_PROFILES -B -U -V -Dmaven.test.failure.ignore=true -DmavenDistro=$WORK_DIR/apache-maven-dist.zip\"\n                    }\n                    deleteDir() // clean up after ourselves to reduce disk space\n                }\n            }\n        }\n    }, winJava8: {\n        node(jenkinsEnv.labelForOS('windows')) {\n            stage ('Windows Java 8') {\n                String jdkName = jenkinsEnv.jdkFromVersion('windows', '8')\n                String mvnName = jenkinsEnv.mvnFromVersion('windows', buildMvn)\n\n                // need a short path or we hit 256 character limit for paths\n                // using EXECUTOR_NUMBER guarantees that concurrent builds on same agent\n                // will not trample each other\n                dir(\"/mvn-it-${EXECUTOR_NUMBER}.tmp\") {\n                    def WORK_DIR=pwd()\n                    checkout tests\n                    bat \"if exist it-local-repo rmdir /s /q it-local-repo\"\n                    bat \"if exist apache-maven-dist.zip del /q apache-maven-dist.zip\"\n                    unstash 'dist'\n                    withMaven(jdk: jdkName, maven: mvnName, mavenLocalRepo:\"${WORK_DIR}/it-local-repo\", options:[\n                        junitPublisher(ignoreAttachments: false)\n                    ]) {\n                        bat \"mvn clean install -P$CORE_IT_PROFILES -B -U -V -Dmaven.test.failure.ignore=true -DmavenDistro=$WORK_DIR/apache-maven-dist.zip\"\n                    }\n                    deleteDir() // clean up after ourselves to reduce disk space\n                }\n            }\n        }\n    }\n\n// JENKINS-34376 seems to make it hard to detect the aborted builds\n} catch (org.jenkinsci.plugins.workflow.steps.FlowInterruptedException e) {\n    // this ambiguous condition means a user probably aborted\n    if (e.causes.size() == 0) {\n        currentBuild.result = \"ABORTED\"\n    } else {\n        currentBuild.result = \"FAILURE\"\n    }\n    throw e\n} catch (hudson.AbortException e) {\n    // this ambiguous condition means during a shell step, user probably aborted\n    if (e.getMessage().contains('script returned exit code 143')) {\n        currentBuild.result = \"ABORTED\"\n    } else {\n        currentBuild.result = \"FAILURE\"\n    }\n    throw e\n} catch (InterruptedException e) {\n    currentBuild.result = \"ABORTED\"\n    throw e\n} catch (Throwable e) {\n    currentBuild.result = \"FAILURE\"\n    throw e\n} finally {\n    // notify completion\n    stage(\"Notifications\") {\n        jenkinsNotify()      \n    }    \n}\n' did not contain the 'pipeline' step"
        }
      ]
    },
    {
      "full_repo_name": "sreehari20/Maven01",
      "repo_url": "https://github.com/sreehari20/Maven01",
      "html_url_jenkinsfile": "https://github.com/sreehari20/Maven01/blob/95a29f2e861503079aed24931b2ba5dfd7b15b1f/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/122501497/git/blobs/697e6eb3f4dfa1827c0945f5ce19045fe6e1d0d1",
      "jenkins_pipeline": [
        {
          "error": "Jenkinsfile content '/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nproperties([buildDiscarder(logRotator(artifactNumToKeepStr: '5', numToKeepStr: env.BRANCH_NAME=='master'?'10':'5'))])\n\ndef buildOs = 'linux'\ndef buildJdk = '7'\ndef buildMvn = '3.5.0'\ndef tests\ndef CORE_IT_PROFILES='run-its,embedded'\n\ntry {\n\nnode(jenkinsEnv.labelForOS(buildOs)) {\n    dir('build') {\n        stage('Checkout') {\n            checkout scm\n        }\n\n        def WORK_DIR=pwd()\n\n        stage('Build / Unit Test') {\n            String jdkName = jenkinsEnv.jdkFromVersion(buildOs, buildJdk)\n            String mvnName = jenkinsEnv.mvnFromVersion(buildOs, buildMvn)\n            withMaven(jdk: jdkName, maven: mvnName, mavenLocalRepo:\"${WORK_DIR}/.repository\", options:[\n                artifactsPublisher(disabled: false),\n                junitPublisher(ignoreAttachments: false),\n                findbugsPublisher(disabled: false),\n                openTasksPublisher(disabled: false),\n                dependenciesFingerprintPublisher(),\n                invokerPublisher(),\n                pipelineGraphPublisher()\n            ]) {\n                sh \"mvn clean verify -B -U -e -fae -V -Dmaven.test.failure.ignore=true\"\n            }\n            dir ('apache-maven/target') {\n                sh \"mv apache-maven-*-bin.zip apache-maven-dist.zip\"\n                stash includes: 'apache-maven-dist.zip', name: 'dist'\n            }\n        }\n\n        tests = resolveScm source: [$class: 'GitSCMSource', credentialsId: '', id: '_', remote: 'https://git-wip-us.apache.org/repos/asf/maven-integration-testing.git', traits: [[$class: 'jenkins.plugins.git.traits.BranchDiscoveryTrait'], [$class: 'GitToolSCMSourceTrait', gitTool: 'Default']]], targets: [BRANCH_NAME, 'master']\n    }\n}\n\n\nparallel linuxJava7:{\n        node(jenkinsEnv.labelForOS('linux')) {\n            stage ('Linux Java 7') {\n                String jdkName = jenkinsEnv.jdkFromVersion('linux', '7')\n                String mvnName = jenkinsEnv.mvnFromVersion('linux', buildMvn)\n                dir('test') {\n                    def WORK_DIR=pwd()\n                    checkout tests\n                    sh \"rm -rvf $WORK_DIR/apache-maven-dist.zip $WORK_DIR/it-local-repo\"\n                    unstash 'dist'\n                    withMaven(jdk: jdkName, maven: mvnName, mavenLocalRepo:\"${WORK_DIR}/it-local-repo\", options:[\n                        junitPublisher(ignoreAttachments: false)\n                    ]) {\n                        sh \"mvn clean install -P$CORE_IT_PROFILES -B -U -V -Dmaven.test.failure.ignore=true -DmavenDistro=$WORK_DIR/apache-maven-dist.zip\"\n                    }\n                    deleteDir() // clean up after ourselves to reduce disk space\n                }\n            }\n        }\n    },linuxJava8: {\n        node(jenkinsEnv.labelForOS('linux')) {\n            stage ('Linux Java 8') {\n                String jdkName = jenkinsEnv.jdkFromVersion('linux', '8')\n                String mvnName = jenkinsEnv.mvnFromVersion('linux', buildMvn)\n                dir('test') {\n                    def WORK_DIR=pwd()\n                    checkout tests\n                    sh \"rm -rvf $WORK_DIR/apache-maven-dist.zip $WORK_DIR/it-local-repo\"\n                    unstash 'dist'\n                    withMaven(jdk: jdkName, maven: mvnName, mavenLocalRepo:\"${WORK_DIR}/it-local-repo\", options:[\n                        junitPublisher(ignoreAttachments: false)\n                    ]) {\n                        sh \"mvn clean install -P$CORE_IT_PROFILES -B -U -V -Dmaven.test.failure.ignore=true -DmavenDistro=$WORK_DIR/apache-maven-dist.zip\"\n                    }\n                    deleteDir() // clean up after ourselves to reduce disk space\n                }\n            }\n        }\n    }, winJava7: {\n        node(jenkinsEnv.labelForOS('windows')) {\n            stage ('Windows Java 7') {\n                String jdkName = jenkinsEnv.jdkFromVersion('windows', '7')\n                String mvnName = jenkinsEnv.mvnFromVersion('windows', buildMvn)\n\n                // need a short path or we hit 256 character limit for paths\n                // using EXECUTOR_NUMBER guarantees that concurrent builds on same agent\n                // will not trample each other\n                dir(\"/mvn-it-${EXECUTOR_NUMBER}.tmp\") {\n                    def WORK_DIR=pwd()\n                    checkout tests\n                    bat \"if exist it-local-repo rmdir /s /q it-local-repo\"\n                    bat \"if exist apache-maven-dist.zip del /q apache-maven-dist.zip\"\n                    unstash 'dist'\n                    withMaven(jdk: jdkName, maven: mvnName, mavenLocalRepo:\"${WORK_DIR}/it-local-repo\", options:[\n                        junitPublisher(ignoreAttachments: false)\n                    ]) {\n                        bat \"mvn clean install -P$CORE_IT_PROFILES -B -U -V -Dmaven.test.failure.ignore=true -DmavenDistro=$WORK_DIR/apache-maven-dist.zip\"\n                    }\n                    deleteDir() // clean up after ourselves to reduce disk space\n                }\n            }\n        }\n    }, winJava8: {\n        node(jenkinsEnv.labelForOS('windows')) {\n            stage ('Windows Java 8') {\n                String jdkName = jenkinsEnv.jdkFromVersion('windows', '8')\n                String mvnName = jenkinsEnv.mvnFromVersion('windows', buildMvn)\n\n                // need a short path or we hit 256 character limit for paths\n                // using EXECUTOR_NUMBER guarantees that concurrent builds on same agent\n                // will not trample each other\n                dir(\"/mvn-it-${EXECUTOR_NUMBER}.tmp\") {\n                    def WORK_DIR=pwd()\n                    checkout tests\n                    bat \"if exist it-local-repo rmdir /s /q it-local-repo\"\n                    bat \"if exist apache-maven-dist.zip del /q apache-maven-dist.zip\"\n                    unstash 'dist'\n                    withMaven(jdk: jdkName, maven: mvnName, mavenLocalRepo:\"${WORK_DIR}/it-local-repo\", options:[\n                        junitPublisher(ignoreAttachments: false)\n                    ]) {\n                        bat \"mvn clean install -P$CORE_IT_PROFILES -B -U -V -Dmaven.test.failure.ignore=true -DmavenDistro=$WORK_DIR/apache-maven-dist.zip\"\n                    }\n                    deleteDir() // clean up after ourselves to reduce disk space\n                }\n            }\n        }\n    }\n\n// JENKINS-34376 seems to make it hard to detect the aborted builds\n} catch (org.jenkinsci.plugins.workflow.steps.FlowInterruptedException e) {\n    // this ambiguous condition means a user probably aborted\n    if (e.causes.size() == 0) {\n        currentBuild.result = \"ABORTED\"\n    } else {\n        currentBuild.result = \"FAILURE\"\n    }\n    throw e\n} catch (hudson.AbortException e) {\n    // this ambiguous condition means during a shell step, user probably aborted\n    if (e.getMessage().contains('script returned exit code 143')) {\n        currentBuild.result = \"ABORTED\"\n    } else {\n        currentBuild.result = \"FAILURE\"\n    }\n    throw e\n} catch (InterruptedException e) {\n    currentBuild.result = \"ABORTED\"\n    throw e\n} catch (Throwable e) {\n    currentBuild.result = \"FAILURE\"\n    throw e\n} finally {\n    // notify completion\n    stage(\"Notifications\") {\n        jenkinsNotify()      \n    }    \n}\n' did not contain the 'pipeline' step"
        }
      ]
    },
    {
      "full_repo_name": "murmangit/spring-boot-maven-archtypes",
      "repo_url": "https://github.com/murmangit/spring-boot-maven-archtypes",
      "html_url_jenkinsfile": "https://github.com/murmangit/spring-boot-maven-archtypes/blob/f26539a24fa3fff87e86b789b12b0a0bc0fa1c6d/maven-archtypes/src/main/resources/archetype-resources/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/131196808/git/blobs/f0a33547f6bd64bb96c71ac8f2f65daa563750da",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Build with unit testing",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "echo 'Pulling...' + env.BRANCH_NAME\n                    def mvnHome = tool 'Maven 3.3.9'\n                    if (isUnix()) {\n                        def targetVersion = getDevVersion()\n                        print 'target build version...'\n                        print targetVersion\n                        sh \"'${mvnHome}/bin/mvn' -Dintegration-tests.skip=true -Dbuild.number=${targetVersion} clean package\"\n                        def pom = readMavenPom file: 'pom.xml'\n                        // get the current development version\n                        developmentArtifactVersion = \"${pom.version}-${targetVersion}\"\n                        print pom.version\n                        // execute the unit testing and collect the reports\n                        junit '**//*target/surefire-reports/TEST-*.xml'\n                        archive 'target*//*.jar'\n                    } else {\n                        bat(/\"${mvnHome}\\bin\\mvn\" -Dintegration-tests.skip=true clean package/)\n                        def pom = readMavenPom file: 'pom.xml'\n                        print pom.version\n                        junit '**//*target/surefire-reports/TEST-*.xml'\n                        archive 'target*//*.jar'\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Integration tests",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def mvnHome = tool 'Maven 3.3.9'\n                    if (isUnix()) {\n                        // just to trigger the integration test without unit testing\n                        sh \"'${mvnHome}/bin/mvn'  verify -Dunit-tests.skip=true\"\n                    } else {\n                        bat(/\"${mvnHome}\\bin\\mvn\" verify -Dunit-tests.skip=true/)\n                    }"
                          }
                        }
                      ]
                    },
                    {
                      "name": "cucumber",
                      "arguments": [
                        {
                          "key": "buildStatus",
                          "value": {
                            "isLiteral": true,
                            "value": null
                          }
                        },
                        {
                          "key": "fileIncludePattern",
                          "value": {
                            "isLiteral": true,
                            "value": "**/cucumber.json"
                          }
                        },
                        {
                          "key": "jsonReportDirectory",
                          "value": {
                            "isLiteral": true,
                            "value": "target"
                          }
                        },
                        {
                          "key": "sortingMethod",
                          "value": {
                            "isLiteral": true,
                            "value": "ALPHABETICAL"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Sonar scan execution",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def mvnHome = tool 'Maven 3.3.9'\n                    withSonarQubeEnv {\n\n                        sh \"'${mvnHome}/bin/mvn'  verify sonar:sonar -Dintegration-tests.skip=true -Dmaven.test.failure.ignore=true\"\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Sonar scan result check",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "timeout",
                      "arguments": [
                        {
                          "key": "time",
                          "value": {
                            "isLiteral": true,
                            "value": 2
                          }
                        },
                        {
                          "key": "unit",
                          "value": {
                            "isLiteral": true,
                            "value": "MINUTES"
                          }
                        }
                      ],
                      "children": [
                        {
                          "name": "retry",
                          "arguments": {
                            "isLiteral": true,
                            "value": 3
                          },
                          "children": [
                            {
                              "name": "script",
                              "arguments": [
                                {
                                  "key": "scriptBlock",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "def qg = waitForQualityGate()\n                            if (qg.status != 'OK') {\n                                error \"Pipeline aborted due to quality gate failure: ${qg.status}\"\n                            }"
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Development deploy approval and deployment",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "if (currentBuild.result == null || currentBuild.result == 'SUCCESS') {\n                        timeout(time: 3, unit: 'MINUTES') {\n                            // you can use the commented line if u have specific user group who CAN ONLY approve\n                            //input message:'Approve deployment?', submitter: 'it-ops'\n                            input message: 'Approve deployment?'\n                        }\n                        timeout(time: 2, unit: 'MINUTES') {\n                            //\n                            if (developmentArtifactVersion != null && !developmentArtifactVersion.isEmpty()) {\n                                // replace it with your application name or make it easily loaded from pom.xml\n                                def jarName = \"application-${developmentArtifactVersion}.jar\"\n                                echo \"the application is deploying ${jarName}\"\n                                // NOTE : CREATE your deployemnt JOB, where it can take parameters whoch is the jar name to fetch from jenkins workspace\n                                build job: 'ApplicationToDev', parameters: [[$class: 'StringParameterValue', name: 'jarName', value: jarName]]\n                                echo 'the application is deployed !'\n                            } else {\n                                error 'the application is not  deployed as development version is null!'\n                            }\n\n                        }\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "DEV sanity check",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sleep",
                      "arguments": [
                        {
                          "key": "time",
                          "value": {
                            "isLiteral": true,
                            "value": 45
                          }
                        }
                      ]
                    },
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "if (currentBuild.result == null || currentBuild.result == 'SUCCESS') {\n                        timeout(time: 1, unit: 'MINUTES') {\n                            script {\n                                def mvnHome = tool 'Maven 3.3.9'\n                                //NOTE : if u change the sanity test class name , change it here as well\n                                sh \"'${mvnHome}/bin/mvn' -Dtest=ApplicationSanityCheck_ITT surefire:test\"\n                            }\n\n                        }\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Release and publish artifact",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def mvnHome = tool 'Maven 3.3.9' //\n                    if (currentBuild.result == null || currentBuild.result == 'SUCCESS') {\n                        def v = getReleaseVersion()\n                        releasedVersion = v;\n                        if (v) {\n                            echo \"Building version ${v} - so released version is ${releasedVersion}\"\n                        }\n                        // jenkins user credentials ID which is transparent to the user and password change\n                        sshagent(['0000000-3b5a-454e-a8e6-c6b6114d36000']) {\n                            sh \"git tag -f v${v}\"\n                            sh \"git push -f --tags\"\n                        }\n                        sh \"'${mvnHome}/bin/mvn' -Dmaven.test.skip=true  versions:set  -DgenerateBackupPoms=false -DnewVersion=${v}\"\n                        sh \"'${mvnHome}/bin/mvn' -Dmaven.test.skip=true clean deploy\"\n\n                    } else {\n                        error \"Release is not possible. as build is not successful\"\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "branch",
                    "arguments": {
                      "isLiteral": true,
                      "value": "master"
                    }
                  }
                ]
              }
            },
            {
              "name": "Deploy to Acceptance",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "if (currentBuild.result == null || currentBuild.result == 'SUCCESS') {\n                        timeout(time: 3, unit: 'MINUTES') {\n                            //input message:'Approve deployment?', submitter: 'it-ops'\n                            input message: 'Approve deployment to UAT?'\n                        }\n                        timeout(time: 3, unit: 'MINUTES') {\n                            //  deployment job which will take the relasesed version\n                            if (releasedVersion != null && !releasedVersion.isEmpty()) {\n                                // make the applciation name for the jar configurable\n                                def jarName = \"application-${releasedVersion}.jar\"\n                                echo \"the application is deploying ${jarName}\"\n                                // NOTE : DO NOT FORGET to create your UAT deployment jar , check Job AlertManagerToUAT in Jenkins for reference\n                                // the deployemnt should be based into Nexus repo\n                                build job: 'AApplicationToACC', parameters: [[$class: 'StringParameterValue', name: 'jarName', value: jarName], [$class: 'StringParameterValue', name: 'appVersion', value: releasedVersion]]\n                                echo 'the application is deployed !'\n                            } else {\n                                error 'the application is not  deployed as released version is null!'\n                            }\n\n                        }\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "branch",
                    "arguments": {
                      "isLiteral": true,
                      "value": "master"
                    }
                  }
                ]
              }
            },
            {
              "name": "ACC E2E tests",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sleep",
                      "arguments": [
                        {
                          "key": "time",
                          "value": {
                            "isLiteral": true,
                            "value": 45
                          }
                        }
                      ]
                    },
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "if (currentBuild.result == null || currentBuild.result == 'SUCCESS') {\n                        timeout(time: 1, unit: 'MINUTES') {\n\n                            script {\n                                def mvnHome = tool 'Maven 3.3.9'\n                                // NOTE : if you change the test class name change it here as well\n                                sh \"'${mvnHome}/bin/mvn' -Dtest=ApplicationE2E surefire:test\"\n                            }\n\n                        }\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "branch",
                    "arguments": {
                      "isLiteral": true,
                      "value": "master"
                    }
                  }
                ]
              }
            }
          ],
          "post": {
            "conditions": [
              {
                "condition": "always",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "deleteDir",
                      "arguments": []
                    }
                  ]
                }
              },
              {
                "condition": "success",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sendEmail",
                      "arguments": {
                        "isLiteral": true,
                        "value": "Successful"
                      }
                    }
                  ]
                }
              },
              {
                "condition": "unstable",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sendEmail",
                      "arguments": {
                        "isLiteral": true,
                        "value": "Unstable"
                      }
                    }
                  ]
                }
              },
              {
                "condition": "failure",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sendEmail",
                      "arguments": {
                        "isLiteral": true,
                        "value": "Failed"
                      }
                    }
                  ]
                }
              }
            ]
          },
          "environment": [
            {
              "key": "EMAIL_RECIPIENTS",
              "value": {
                "isLiteral": true,
                "value": "mahmoud.romeh@test.com"
              }
            }
          ],
          "agent": {
            "type": "label",
            "argument": {
              "isLiteral": true,
              "value": "java8"
            }
          },
          "options": {
            "options": [
              {
                "name": "buildDiscarder",
                "arguments": [
                  {
                    "name": "logRotator",
                    "arguments": [
                      {
                        "key": "numToKeepStr",
                        "value": {
                          "isLiteral": true,
                          "value": "5"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "name": "timeout",
                "arguments": [
                  {
                    "key": "time",
                    "value": {
                      "isLiteral": true,
                      "value": 25
                    }
                  },
                  {
                    "key": "unit",
                    "value": {
                      "isLiteral": true,
                      "value": "MINUTES"
                    }
                  }
                ]
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "connexta/admin-console",
      "repo_url": "https://github.com/connexta/admin-console",
      "html_url_jenkinsfile": "https://github.com/connexta/admin-console/blob/52be94064bb6c8378f5ec4f1b651fbf160c8b7e1/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/80874891/git/blobs/1d52a3292fa803dcd78ae0872ea812bc0fcece61",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Setup",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "slackSend",
                      "arguments": [
                        {
                          "key": "color",
                          "value": {
                            "isLiteral": true,
                            "value": "good"
                          }
                        },
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": false,
                            "value": "\"STARTED: ${JOB_NAME} ${BUILD_NUMBER} ${BUILD_URL}\""
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Build/Test",
              "parallel": [
                {
                  "name": "Linux Full Build",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "withMaven",
                          "arguments": [
                            {
                              "key": "maven",
                              "value": {
                                "isLiteral": true,
                                "value": "Maven 3.5.2"
                              }
                            },
                            {
                              "key": "globalMavenSettingsConfig",
                              "value": {
                                "isLiteral": true,
                                "value": "default-global-settings"
                              }
                            },
                            {
                              "key": "mavenSettingsConfig",
                              "value": {
                                "isLiteral": true,
                                "value": "codice-maven-settings"
                              }
                            },
                            {
                              "key": "mavenOpts",
                              "value": {
                                "isLiteral": true,
                                "value": "${LARGE_MVN_OPTS} ${LINUX_MVN_RANDOM}"
                              }
                            }
                          ],
                          "children": [
                            {
                              "name": "sh",
                              "arguments": [
                                {
                                  "key": "script",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "mvn install -B -nsu $DISABLE_DOWNLOAD_PROGRESS_OPTS -pl !$ITESTS"
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ],
                  "when": {
                    "conditions": [
                      {
                        "name": "expression",
                        "arguments": [
                          {
                            "key": "scriptBlock",
                            "value": {
                              "isLiteral": true,
                              "value": "env.CHANGE_ID == null"
                            }
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "name": "Windows Full Build",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "withMaven",
                          "arguments": [
                            {
                              "key": "maven",
                              "value": {
                                "isLiteral": true,
                                "value": "Maven 3.5.2"
                              }
                            },
                            {
                              "key": "jdk",
                              "value": {
                                "isLiteral": true,
                                "value": "jdk8-latest"
                              }
                            },
                            {
                              "key": "globalMavenSettingsConfig",
                              "value": {
                                "isLiteral": true,
                                "value": "default-global-settings"
                              }
                            },
                            {
                              "key": "mavenSettingsConfig",
                              "value": {
                                "isLiteral": true,
                                "value": "codice-maven-settings"
                              }
                            },
                            {
                              "key": "mavenOpts",
                              "value": {
                                "isLiteral": true,
                                "value": "${LARGE_MVN_OPTS}"
                              }
                            }
                          ],
                          "children": [
                            {
                              "name": "bat",
                              "arguments": [
                                {
                                  "key": "script",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "mvn install -B -nsu %DISABLE_DOWNLOAD_PROGRESS_OPTS% -pl !%ITESTS%"
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ],
                  "agent": {
                    "type": "label",
                    "argument": {
                      "isLiteral": true,
                      "value": "server-2016-large"
                    }
                  },
                  "when": {
                    "conditions": [
                      {
                        "name": "expression",
                        "arguments": [
                          {
                            "key": "scriptBlock",
                            "value": {
                              "isLiteral": true,
                              "value": "env.CHANGE_ID == null"
                            }
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "name": "Linux PR Build",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "withMaven",
                          "arguments": [
                            {
                              "key": "maven",
                              "value": {
                                "isLiteral": true,
                                "value": "Maven 3.5.2"
                              }
                            },
                            {
                              "key": "globalMavenSettingsConfig",
                              "value": {
                                "isLiteral": true,
                                "value": "default-global-settings"
                              }
                            },
                            {
                              "key": "mavenSettingsConfig",
                              "value": {
                                "isLiteral": true,
                                "value": "codice-maven-settings"
                              }
                            },
                            {
                              "key": "mavenOpts",
                              "value": {
                                "isLiteral": true,
                                "value": "${LARGE_MVN_OPTS} ${LINUX_MVN_RANDOM}"
                              }
                            },
                            {
                              "key": "options",
                              "value": {
                                "isLiteral": false,
                                "value": "${[artifactsPublisher(disabled: true), dependenciesFingerprintPublisher(disabled: true, includeScopeCompile: false, includeScopeProvided: false, includeScopeRuntime: false, includeSnapshotVersions: false)]}"
                              }
                            }
                          ],
                          "children": [
                            {
                              "name": "sh",
                              "arguments": [
                                {
                                  "key": "script",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "mvn install -B -Dfindbugs.skip=true -Dpmd.skip=true -Dcheckstyle.skip=true -DskipTests=true -nsu $DISABLE_DOWNLOAD_PROGRESS_OPTS"
                                  }
                                }
                              ]
                            },
                            {
                              "name": "sh",
                              "arguments": [
                                {
                                  "key": "script",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "mvn install -B -Dgib.enabled=true -Dgib.referenceBranch=/refs/remotes/origin/$CHANGE_TARGET -nsu $DISABLE_DOWNLOAD_PROGRESS_OPTS -pl !$ITESTS"
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ],
                  "when": {
                    "conditions": [
                      {
                        "name": "allOf",
                        "children": [
                          {
                            "name": "expression",
                            "arguments": [
                              {
                                "key": "scriptBlock",
                                "value": {
                                  "isLiteral": true,
                                  "value": "env.CHANGE_ID != null"
                                }
                              }
                            ]
                          },
                          {
                            "name": "expression",
                            "arguments": [
                              {
                                "key": "scriptBlock",
                                "value": {
                                  "isLiteral": true,
                                  "value": "env.CHANGE_TARGET != null"
                                }
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "name": "Windows PR Build",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "withMaven",
                          "arguments": [
                            {
                              "key": "maven",
                              "value": {
                                "isLiteral": true,
                                "value": "Maven 3.5.2"
                              }
                            },
                            {
                              "key": "jdk",
                              "value": {
                                "isLiteral": true,
                                "value": "jdk8-latest"
                              }
                            },
                            {
                              "key": "globalMavenSettingsConfig",
                              "value": {
                                "isLiteral": true,
                                "value": "default-global-settings"
                              }
                            },
                            {
                              "key": "mavenSettingsConfig",
                              "value": {
                                "isLiteral": true,
                                "value": "codice-maven-settings"
                              }
                            },
                            {
                              "key": "mavenOpts",
                              "value": {
                                "isLiteral": true,
                                "value": "${LARGE_MVN_OPTS}"
                              }
                            },
                            {
                              "key": "options",
                              "value": {
                                "isLiteral": false,
                                "value": "${[artifactsPublisher(disabled: true), dependenciesFingerprintPublisher(disabled: true, includeScopeCompile: false, includeScopeProvided: false, includeScopeRuntime: false, includeSnapshotVersions: false)]}"
                              }
                            }
                          ],
                          "children": [
                            {
                              "name": "bat",
                              "arguments": [
                                {
                                  "key": "script",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "mvn install -B -Dfindbugs.skip=true -Dpmd.skip=true -Dcheckstyle.skip=true -DskipTests=true -nsu %DISABLE_DOWNLOAD_PROGRESS_OPTS%"
                                  }
                                }
                              ]
                            },
                            {
                              "name": "bat",
                              "arguments": [
                                {
                                  "key": "script",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "mvn install -B -Dgib.enabled=true -Dgib.referenceBranch=/refs/remotes/origin/%CHANGE_TARGET% -nsu %DISABLE_DOWNLOAD_PROGRESS_OPTS% -pl !%ITESTS%"
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ],
                  "agent": {
                    "type": "label",
                    "argument": {
                      "isLiteral": true,
                      "value": "server-2016-large"
                    }
                  },
                  "when": {
                    "conditions": [
                      {
                        "name": "allOf",
                        "children": [
                          {
                            "name": "expression",
                            "arguments": [
                              {
                                "key": "scriptBlock",
                                "value": {
                                  "isLiteral": true,
                                  "value": "env.CHANGE_ID != null"
                                }
                              }
                            ]
                          },
                          {
                            "name": "expression",
                            "arguments": [
                              {
                                "key": "scriptBlock",
                                "value": {
                                  "isLiteral": true,
                                  "value": "env.CHANGE_TARGET != null"
                                }
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              ]
            },
            {
              "name": "Security Analysis",
              "parallel": [
                {
                  "name": "OWASP",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "script",
                          "arguments": [
                            {
                              "key": "scriptBlock",
                              "value": {
                                "isLiteral": true,
                                "value": "withMaven(maven: 'Maven 3.5.2', jdk: 'jdk8-latest', globalMavenSettingsConfig: 'default-global-settings', mavenSettingsConfig: 'codice-maven-settings', mavenOpts: '${LARGE_MVN_OPTS} ${LINUX_MVN_RANDOM}') {\n                               // If this build is not a pull request, run full owasp scan. Otherwise run incremental scan\n                               if (env.CHANGE_ID == null) {\n                                   sh 'mvn install -q -B -Powasp -DskipTests=true -DskipStatic=true $DISABLE_DOWNLOAD_PROGRESS_OPTS'\n                               } else {\n                                   sh 'mvn install -q -B -Powasp -DskipTests=true -DskipStatic=true -Dgib.enabled=true -Dgib.referenceBranch=/refs/remotes/origin/$CHANGE_TARGET $DISABLE_DOWNLOAD_PROGRESS_OPTS'\n                               }\n                           }"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "nodeJsSecurity",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "script",
                          "arguments": [
                            {
                              "key": "scriptBlock",
                              "value": {
                                "isLiteral": true,
                                "value": "def packageFiles = findFiles(glob: '**/package.json')\n                            for (int i = 0; i < packageFiles.size(); i++) {\n                                dir(packageFiles[i].path.split('package.json')[0]) {\n                                    def packageFile = readJSON file: 'package.json'\n                                    if (packageFile.scripts =~ /.*webpack.*/ || packageFile.containsKey(\"browserify\")) {\n                                        nodejs(configId: 'npmrc-default', nodeJSInstallationName: 'nodejs') {\n                                            echo \"Scanning ${packageFiles[i].path}\"\n                                            sh 'nsp check'\n                                        }\n                                    }\n                                }\n                            }"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ],
                  "agent": {
                    "type": "label",
                    "argument": {
                      "isLiteral": true,
                      "value": "linux-small"
                    }
                  }
                }
              ]
            },
            {
              "name": "Deploy",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "withMaven",
                      "arguments": [
                        {
                          "key": "maven",
                          "value": {
                            "isLiteral": true,
                            "value": "Maven 3.5.2"
                          }
                        },
                        {
                          "key": "jdk",
                          "value": {
                            "isLiteral": true,
                            "value": "jdk8-latest"
                          }
                        },
                        {
                          "key": "globalMavenSettingsConfig",
                          "value": {
                            "isLiteral": true,
                            "value": "default-global-settings"
                          }
                        },
                        {
                          "key": "mavenSettingsConfig",
                          "value": {
                            "isLiteral": true,
                            "value": "codice-maven-settings"
                          }
                        },
                        {
                          "key": "mavenOpts",
                          "value": {
                            "isLiteral": true,
                            "value": "${LINUX_MVN_RANDOM}"
                          }
                        }
                      ],
                      "children": [
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "mvn javadoc:aggregate -B -Dfindbugs.skip=true -Dpmd.skip=true -Dcheckstyle.skip=true -DskipTests=true -nsu $DISABLE_DOWNLOAD_PROGRESS_OPTS"
                              }
                            }
                          ]
                        },
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "mvn deploy -B -Dfindbugs.skip=true -Dpmd.skip=true -Dcheckstyle.skip=true -DskipTests=true -DretryFailedDeploymentCount=10 -nsu $DISABLE_DOWNLOAD_PROGRESS_OPTS"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "allOf",
                    "children": [
                      {
                        "name": "expression",
                        "arguments": [
                          {
                            "key": "scriptBlock",
                            "value": {
                              "isLiteral": true,
                              "value": "env.CHANGE_ID == null"
                            }
                          }
                        ]
                      },
                      {
                        "name": "expression",
                        "arguments": [
                          {
                            "key": "scriptBlock",
                            "value": {
                              "isLiteral": true,
                              "value": "env.BRANCH_NAME ==~ /((?:\\d*\\.)?\\d*\\.x|master)/"
                            }
                          }
                        ]
                      },
                      {
                        "name": "environment",
                        "arguments": [
                          {
                            "key": "name",
                            "value": {
                              "isLiteral": true,
                              "value": "JENKINS_ENV"
                            }
                          },
                          {
                            "key": "value",
                            "value": {
                              "isLiteral": true,
                              "value": "prod"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            },
            {
              "name": "Quality Analysis",
              "parallel": [
                {
                  "name": "SonarCloud",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "withMaven",
                          "arguments": [
                            {
                              "key": "maven",
                              "value": {
                                "isLiteral": true,
                                "value": "Maven 3.5.2"
                              }
                            },
                            {
                              "key": "jdk",
                              "value": {
                                "isLiteral": true,
                                "value": "jdk8-latest"
                              }
                            },
                            {
                              "key": "globalMavenSettingsConfig",
                              "value": {
                                "isLiteral": true,
                                "value": "default-global-settings"
                              }
                            },
                            {
                              "key": "mavenSettingsConfig",
                              "value": {
                                "isLiteral": true,
                                "value": "codice-maven-settings"
                              }
                            },
                            {
                              "key": "mavenOpts",
                              "value": {
                                "isLiteral": true,
                                "value": "${LARGE_MVN_OPTS} ${LINUX_MVN_RANDOM}"
                              }
                            }
                          ],
                          "children": [
                            {
                              "name": "withCredentials",
                              "arguments": {
                                "isLiteral": false,
                                "value": "${[string(credentialsId: 'SonarQubeGithubToken', variable: 'SONARQUBE_GITHUB_TOKEN'), string(credentialsId: 'cxbot-sonarcloud', variable: 'SONAR_TOKEN')]}"
                              },
                              "children": [
                                {
                                  "name": "script",
                                  "arguments": [
                                    {
                                      "key": "scriptBlock",
                                      "value": {
                                        "isLiteral": true,
                                        "value": "if (env.CHANGE_ID == null) {\n                                        sh 'mvn -q -B -Dcheckstyle.skip=true org.jacoco:jacoco-maven-plugin:prepare-agent install sonar:sonar -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=$SONAR_TOKEN  -Dsonar.organization=cx -Dsonar.projectKey=ac -Dsonar.exclusions=${COVERAGE_EXCLUSIONS} -pl !$ITESTS $DISABLE_DOWNLOAD_PROGRESS_OPTS'\n                                    } else {\n                                        sh 'mvn -q -B -Dcheckstyle.skip=true org.jacoco:jacoco-maven-plugin:prepare-agent install sonar:sonar -Dsonar.github.pullRequest=${CHANGE_ID} -Dsonar.github.oauth=${SONARQUBE_GITHUB_TOKEN} -Dsonar.analysis.mode=preview -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=$SONAR_TOKEN -Dsonar.organization=cx -Dsonar.projectKey=ac -Dsonar.exclusions=${COVERAGE_EXCLUSIONS} -pl !$ITESTS -Dgib.enabled=true -Dgib.referenceBranch=/refs/remotes/origin/$CHANGE_TARGET $DISABLE_DOWNLOAD_PROGRESS_OPTS'\n                                    }"
                                      }
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "Coverity",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "retry",
                          "arguments": {
                            "isLiteral": true,
                            "value": 3
                          },
                          "children": [
                            {
                              "name": "checkout",
                              "arguments": [
                                {
                                  "key": "scm",
                                  "value": {
                                    "isLiteral": false,
                                    "value": "${scm}"
                                  }
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "name": "script",
                          "arguments": [
                            {
                              "key": "scriptBlock",
                              "value": {
                                "isLiteral": true,
                                "value": "if (env.BRANCH_NAME != 'master') {\n                                echo \"Coverity is only run on master\"\n                            } else {\n                                withMaven(maven: 'Maven 3.5.2', jdk: 'jdk8-latest', globalMavenSettingsConfig: 'default-global-settings', mavenSettingsConfig: 'codice-maven-settings', mavenOpts: '${LINUX_MVN_RANDOM}') {\n                                    withCredentials([string(credentialsId: 'admin-console-coverity-token', variable: 'COVERITY_TOKEN')]) {\n                                        withEnv([\"PATH=${tool 'coverity-linux'}/bin:${env.PATH}\"]) {\n                                            configFileProvider([configFile(fileId: 'coverity-maven-settings', replaceTokens: true, variable: 'MAVEN_SETTINGS')]) {\n                                                echo sh(returnStdout: true, script: 'env')\n                                                sh 'cov-build --dir cov-int mvn -DskipTests=true -DskipStatic=true install -B --settings $MAVEN_SETTINGS $DISABLE_DOWNLOAD_PROGRESS_OPTS'\n                                                sh 'tar czvf ac.tgz cov-int'\n                                                sh 'curl --form token=$COVERITY_TOKEN --form email=cmp-security-team@connexta.com --form file=@ac.tgz --form version=\"master\" --form description=\"Description: Admin Console CI Build\" https://scan.coverity.com/builds?project=connexta%2Fadmin-console'\n                                            }\n                                        }\n                                    }\n                                }\n                            }"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ],
                  "agent": {
                    "type": "label",
                    "argument": {
                      "isLiteral": true,
                      "value": "linux-medium"
                    }
                  }
                }
              ]
            }
          ],
          "post": {
            "conditions": [
              {
                "condition": "success",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "slackSend",
                      "arguments": [
                        {
                          "key": "color",
                          "value": {
                            "isLiteral": true,
                            "value": "good"
                          }
                        },
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": false,
                            "value": "\"SUCCESS: ${JOB_NAME} ${BUILD_NUMBER}\""
                          }
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "condition": "failure",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "slackSend",
                      "arguments": [
                        {
                          "key": "color",
                          "value": {
                            "isLiteral": true,
                            "value": "#ea0017"
                          }
                        },
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": false,
                            "value": "\"FAILURE: ${JOB_NAME} ${BUILD_NUMBER}. See the results here: ${BUILD_URL}\""
                          }
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "condition": "unstable",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "slackSend",
                      "arguments": [
                        {
                          "key": "color",
                          "value": {
                            "isLiteral": true,
                            "value": "#ffb600"
                          }
                        },
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": false,
                            "value": "\"UNSTABLE: ${JOB_NAME} ${BUILD_NUMBER}. See the results here: ${BUILD_URL}\""
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          },
          "environment": [
            {
              "key": "ITESTS",
              "value": {
                "isLiteral": true,
                "value": "tests/itests"
              }
            },
            {
              "key": "LARGE_MVN_OPTS",
              "value": {
                "isLiteral": true,
                "value": "-Xmx8192M -Xss128M -XX:+CMSClassUnloadingEnabled -XX:+UseConcMarkSweepGC "
              }
            },
            {
              "key": "LINUX_MVN_RANDOM",
              "value": {
                "isLiteral": true,
                "value": "-Djava.security.egd=file:/dev/./urandom"
              }
            },
            {
              "key": "DISABLE_DOWNLOAD_PROGRESS_OPTS",
              "value": {
                "isLiteral": true,
                "value": "-Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn"
              }
            },
            {
              "key": "COVERAGE_EXCLUSIONS",
              "value": {
                "isLiteral": true,
                "value": "**/test/**/*,**/itests/**/*,**/*Test*,**/sdk/**/*,**/*.js,**/node_modules/**/*,**/jaxb/**/*,**/wsdl/**/*,**/*.adoc,**/*.txt,**/*.xml"
              }
            }
          ],
          "agent": {
            "type": "label",
            "argument": {
              "isLiteral": true,
              "value": "linux-large"
            }
          },
          "options": {
            "options": [
              {
                "name": "buildDiscarder",
                "arguments": [
                  {
                    "name": "logRotator",
                    "arguments": [
                      {
                        "key": "numToKeepStr",
                        "value": {
                          "isLiteral": true,
                          "value": "25"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "name": "disableConcurrentBuilds",
                "arguments": []
              },
              {
                "name": "timestamps",
                "arguments": []
              }
            ]
          },
          "triggers": {
            "triggers": [
              {
                "name": "cron",
                "arguments": [
                  {
                    "isLiteral": false,
                    "value": "${BRANCH_NAME == \"master\" ? \"H H(19-21) * * *\" : \"\"}"
                  }
                ]
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "xwiki/xwiki-jenkins-pipeline",
      "repo_url": "https://github.com/xwiki/xwiki-jenkins-pipeline",
      "html_url_jenkinsfile": "https://github.com/xwiki/xwiki-jenkins-pipeline/blob/401f6a54ac9009e4dfaa0a9262e08ed89066909f/vars/xwikiBuild.groovy",
      "api_url_jenkinsfile": "https://api.github.com/repositories/80634587/git/blobs/a02fa85c6c22242b30aa15d4e33edd0f03461c12",
      "jenkins_pipeline": [
        {
          "error": "unable to resolve class com.jenkinsci.plugins.badge.action.BadgeAction\n @ line 26, column 1."
        }
      ]
    },
    {
      "full_repo_name": "thoth-station/graph-refresh-job",
      "repo_url": "https://github.com/thoth-station/graph-refresh-job",
      "html_url_jenkinsfile": "https://github.com/thoth-station/graph-refresh-job/blob/6284a64da3bc6d2d4099ba60161e2f2f8321d8b4/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/129856789/git/blobs/9b1c08f89badcf98dce939c7f8e6c810e3cb836b",
      "jenkins_pipeline": [
        {
          "error": "Invalid agent type \"kubernetes\" specified. Must be one of [docker, dockerfile, label, any, none] @ line 54, column 9."
        }
      ]
    },
    {
      "full_repo_name": "vmassol/repo1",
      "repo_url": "https://github.com/vmassol/repo1",
      "html_url_jenkinsfile": "https://github.com/vmassol/repo1/blob/9ca5ec419fbdf86cdb7f850dd32b60cd5c31f1a6/vars/testBuild2.groovy",
      "api_url_jenkinsfile": "https://api.github.com/repositories/93190088/git/blobs/a5a1f2aa85ec6bac56c658b134687673598f6a18",
      "jenkins_pipeline": [
        {
          "error": "unable to resolve class org.jvnet.hudson.plugins.groovypostbuild.GroovyPostbuildSummaryAction\n @ line 26, column 1."
        }
      ]
    },
    {
      "full_repo_name": "thoth-station/user-api",
      "repo_url": "https://github.com/thoth-station/user-api",
      "html_url_jenkinsfile": "https://github.com/thoth-station/user-api/blob/a2cfb7711b8d8ef05faf527582429407b29a0c42/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/118607282/git/blobs/7d13d5c793e6857fcf05894332cac7ef947d1ca4",
      "jenkins_pipeline": [
        {
          "error": "Invalid agent type \"kubernetes\" specified. Must be one of [docker, dockerfile, label, any, none] @ line 54, column 9."
        }
      ]
    },
    {
      "full_repo_name": "codice/alliance",
      "repo_url": "https://github.com/codice/alliance",
      "html_url_jenkinsfile": "https://github.com/codice/alliance/blob/6a7f76957d22844e6c2bdd65f85a8be35fd637fd/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/52804523/git/blobs/aef063284e7009d226e80a3625d4a0f21e3906bc",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Setup",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "slackSend",
                      "arguments": [
                        {
                          "key": "color",
                          "value": {
                            "isLiteral": true,
                            "value": "good"
                          }
                        },
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": false,
                            "value": "\"STARTED: ${JOB_NAME} ${BUILD_NUMBER} ${BUILD_URL}\""
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Validate Poms",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "retry",
                      "arguments": {
                        "isLiteral": true,
                        "value": 3
                      },
                      "children": [
                        {
                          "name": "checkout",
                          "arguments": [
                            {
                              "key": "scm",
                              "value": {
                                "isLiteral": false,
                                "value": "${scm}"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "name": "withMaven",
                      "arguments": [
                        {
                          "key": "maven",
                          "value": {
                            "isLiteral": true,
                            "value": "M3"
                          }
                        },
                        {
                          "key": "jdk",
                          "value": {
                            "isLiteral": true,
                            "value": "jdk8-latest"
                          }
                        },
                        {
                          "key": "globalMavenSettingsConfig",
                          "value": {
                            "isLiteral": true,
                            "value": "default-global-settings"
                          }
                        },
                        {
                          "key": "mavenSettingsConfig",
                          "value": {
                            "isLiteral": true,
                            "value": "codice-maven-settings"
                          }
                        },
                        {
                          "key": "mavenOpts",
                          "value": {
                            "isLiteral": true,
                            "value": "${LINUX_MVN_RANDOM}"
                          }
                        }
                      ],
                      "children": [
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "mvn clean install -DskipStatic=true -DskipTests=true -B -pl $POMFIX $DISABLE_DOWNLOAD_PROGRESS_OPTS"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Incremental Build",
              "parallel": [
                {
                  "name": "Linux",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "timeout",
                          "arguments": [
                            {
                              "key": "time",
                              "value": {
                                "isLiteral": true,
                                "value": 1
                              }
                            },
                            {
                              "key": "unit",
                              "value": {
                                "isLiteral": true,
                                "value": "HOURS"
                              }
                            }
                          ],
                          "children": [
                            {
                              "name": "withMaven",
                              "arguments": [
                                {
                                  "key": "maven",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "Maven 3.3.9"
                                  }
                                },
                                {
                                  "key": "globalMavenSettingsConfig",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "default-global-settings"
                                  }
                                },
                                {
                                  "key": "mavenSettingsConfig",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "codice-maven-settings"
                                  }
                                },
                                {
                                  "key": "mavenOpts",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "${LARGE_MVN_OPTS} ${LINUX_MVN_RANDOM}"
                                  }
                                },
                                {
                                  "key": "options",
                                  "value": {
                                    "isLiteral": false,
                                    "value": "${[artifactsPublisher(disabled: true), dependenciesFingerprintPublisher(disabled: true, includeScopeCompile: false, includeScopeProvided: false, includeScopeRuntime: false, includeSnapshotVersions: false)]}"
                                  }
                                }
                              ],
                              "children": [
                                {
                                  "name": "sh",
                                  "arguments": [
                                    {
                                      "key": "script",
                                      "value": {
                                        "isLiteral": true,
                                        "value": "mvn install -B -pl !$DOCS -DskipStatic=true -DskipTests=true $DISABLE_DOWNLOAD_PROGRESS_OPTS -T 1C"
                                      }
                                    }
                                  ]
                                },
                                {
                                  "name": "sh",
                                  "arguments": [
                                    {
                                      "key": "script",
                                      "value": {
                                        "isLiteral": true,
                                        "value": "mvn clean install -B -T 1C -pl !$ITESTS -Dgib.enabled=true -Dgib.referenceBranch=/refs/remotes/origin/$CHANGE_TARGET $DISABLE_DOWNLOAD_PROGRESS_OPTS"
                                      }
                                    }
                                  ]
                                },
                                {
                                  "name": "sh",
                                  "arguments": [
                                    {
                                      "key": "script",
                                      "value": {
                                        "isLiteral": true,
                                        "value": "mvn install -B -pl $ITESTS -nsu $DISABLE_DOWNLOAD_PROGRESS_OPTS"
                                      }
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "Windows",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "retry",
                          "arguments": {
                            "isLiteral": true,
                            "value": 3
                          },
                          "children": [
                            {
                              "name": "checkout",
                              "arguments": [
                                {
                                  "key": "scm",
                                  "value": {
                                    "isLiteral": false,
                                    "value": "${scm}"
                                  }
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "name": "timeout",
                          "arguments": [
                            {
                              "key": "time",
                              "value": {
                                "isLiteral": true,
                                "value": 1
                              }
                            },
                            {
                              "key": "unit",
                              "value": {
                                "isLiteral": true,
                                "value": "HOURS"
                              }
                            }
                          ],
                          "children": [
                            {
                              "name": "withMaven",
                              "arguments": [
                                {
                                  "key": "maven",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "M35"
                                  }
                                },
                                {
                                  "key": "jdk",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "jdk8-latest"
                                  }
                                },
                                {
                                  "key": "globalMavenSettingsConfig",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "default-global-settings"
                                  }
                                },
                                {
                                  "key": "mavenSettingsConfig",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "codice-maven-settings"
                                  }
                                },
                                {
                                  "key": "mavenOpts",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "${LARGE_MVN_OPTS}"
                                  }
                                },
                                {
                                  "key": "options",
                                  "value": {
                                    "isLiteral": false,
                                    "value": "${[artifactsPublisher(disabled: true), dependenciesFingerprintPublisher(disabled: true, includeScopeCompile: false, includeScopeProvided: false, includeScopeRuntime: false, includeSnapshotVersions: false)]}"
                                  }
                                }
                              ],
                              "children": [
                                {
                                  "name": "bat",
                                  "arguments": [
                                    {
                                      "key": "script",
                                      "value": {
                                        "isLiteral": true,
                                        "value": "mvn install -B -pl !%DOCS% -DskipStatic=true -DskipTests=true $DISABLE_DOWNLOAD_PROGRESS_OPTS -T 1C"
                                      }
                                    }
                                  ]
                                },
                                {
                                  "name": "bat",
                                  "arguments": [
                                    {
                                      "key": "script",
                                      "value": {
                                        "isLiteral": true,
                                        "value": "mvn clean install -B -T 1C -pl !%ITESTS% -Dgib.enabled=true -Dgib.referenceBranch=/refs/remotes/origin/%CHANGE_TARGET% %DISABLE_DOWNLOAD_PROGRESS_OPTS%"
                                      }
                                    }
                                  ]
                                },
                                {
                                  "name": "bat",
                                  "arguments": [
                                    {
                                      "key": "script",
                                      "value": {
                                        "isLiteral": true,
                                        "value": "mvn install -B -pl %ITESTS% -nsu %DISABLE_DOWNLOAD_PROGRESS_OPTS%"
                                      }
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ],
                  "agent": {
                    "type": "label",
                    "argument": {
                      "isLiteral": true,
                      "value": "server-2016-large"
                    }
                  }
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "allOf",
                    "children": [
                      {
                        "name": "expression",
                        "arguments": [
                          {
                            "key": "scriptBlock",
                            "value": {
                              "isLiteral": true,
                              "value": "env.CHANGE_ID != null"
                            }
                          }
                        ]
                      },
                      {
                        "name": "expression",
                        "arguments": [
                          {
                            "key": "scriptBlock",
                            "value": {
                              "isLiteral": true,
                              "value": "env.CHANGE_TARGET != null"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            },
            {
              "name": "Full Build",
              "parallel": [
                {
                  "name": "Linux",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "timeout",
                          "arguments": [
                            {
                              "key": "time",
                              "value": {
                                "isLiteral": true,
                                "value": 1
                              }
                            },
                            {
                              "key": "unit",
                              "value": {
                                "isLiteral": true,
                                "value": "HOURS"
                              }
                            }
                          ],
                          "children": [
                            {
                              "name": "withMaven",
                              "arguments": [
                                {
                                  "key": "maven",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "Maven 3.3.9"
                                  }
                                },
                                {
                                  "key": "globalMavenSettingsConfig",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "default-global-settings"
                                  }
                                },
                                {
                                  "key": "mavenSettingsConfig",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "codice-maven-settings"
                                  }
                                },
                                {
                                  "key": "mavenOpts",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "${LARGE_MVN_OPTS} ${LINUX_MVN_RANDOM}"
                                  }
                                }
                              ],
                              "children": [
                                {
                                  "name": "sh",
                                  "arguments": [
                                    {
                                      "key": "script",
                                      "value": {
                                        "isLiteral": true,
                                        "value": "mvn clean install -B -T 1C -pl !$ITESTS $DISABLE_DOWNLOAD_PROGRESS_OPTS"
                                      }
                                    }
                                  ]
                                },
                                {
                                  "name": "sh",
                                  "arguments": [
                                    {
                                      "key": "script",
                                      "value": {
                                        "isLiteral": true,
                                        "value": "mvn install -B -pl $ITESTS -nsu $DISABLE_DOWNLOAD_PROGRESS_OPTS"
                                      }
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "Windows",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "retry",
                          "arguments": {
                            "isLiteral": true,
                            "value": 3
                          },
                          "children": [
                            {
                              "name": "checkout",
                              "arguments": [
                                {
                                  "key": "scm",
                                  "value": {
                                    "isLiteral": false,
                                    "value": "${scm}"
                                  }
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "name": "timeout",
                          "arguments": [
                            {
                              "key": "time",
                              "value": {
                                "isLiteral": true,
                                "value": 1
                              }
                            },
                            {
                              "key": "unit",
                              "value": {
                                "isLiteral": true,
                                "value": "HOURS"
                              }
                            }
                          ],
                          "children": [
                            {
                              "name": "withMaven",
                              "arguments": [
                                {
                                  "key": "maven",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "M35"
                                  }
                                },
                                {
                                  "key": "jdk",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "jdk8-latest"
                                  }
                                },
                                {
                                  "key": "globalMavenSettingsConfig",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "default-global-settings"
                                  }
                                },
                                {
                                  "key": "mavenSettingsConfig",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "codice-maven-settings"
                                  }
                                },
                                {
                                  "key": "mavenOpts",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "${LARGE_MVN_OPTS}"
                                  }
                                }
                              ],
                              "children": [
                                {
                                  "name": "bat",
                                  "arguments": [
                                    {
                                      "key": "script",
                                      "value": {
                                        "isLiteral": true,
                                        "value": "mvn clean install -B -T 1C -pl !%ITESTS% %DISABLE_DOWNLOAD_PROGRESS_OPTS%"
                                      }
                                    }
                                  ]
                                },
                                {
                                  "name": "bat",
                                  "arguments": [
                                    {
                                      "key": "script",
                                      "value": {
                                        "isLiteral": true,
                                        "value": "mvn install -B -pl %ITESTS% -nsu %DISABLE_DOWNLOAD_PROGRESS_OPTS%"
                                      }
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ],
                  "agent": {
                    "type": "label",
                    "argument": {
                      "isLiteral": true,
                      "value": "server-2016-large"
                    }
                  }
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "expression",
                    "arguments": [
                      {
                        "key": "scriptBlock",
                        "value": {
                          "isLiteral": true,
                          "value": "env.CHANGE_ID == null"
                        }
                      }
                    ]
                  }
                ]
              }
            },
            {
              "name": "Security Analysis",
              "parallel": [
                {
                  "name": "Owasp",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "withMaven",
                          "arguments": [
                            {
                              "key": "maven",
                              "value": {
                                "isLiteral": true,
                                "value": "M35"
                              }
                            },
                            {
                              "key": "jdk",
                              "value": {
                                "isLiteral": true,
                                "value": "jdk8-latest"
                              }
                            },
                            {
                              "key": "globalMavenSettingsConfig",
                              "value": {
                                "isLiteral": true,
                                "value": "default-global-settings"
                              }
                            },
                            {
                              "key": "mavenSettingsConfig",
                              "value": {
                                "isLiteral": true,
                                "value": "codice-maven-settings"
                              }
                            },
                            {
                              "key": "mavenOpts",
                              "value": {
                                "isLiteral": true,
                                "value": "${LARGE_MVN_OPTS} ${LINUX_MVN_RANDOM}"
                              }
                            }
                          ],
                          "children": [
                            {
                              "name": "script",
                              "arguments": [
                                {
                                  "key": "scriptBlock",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "if (env.CHANGE_ID == null) {\n                                    sh 'mvn install -q -B -Powasp -DskipTests=true -DskipStatic=true -pl !$DOCS $DISABLE_DOWNLOAD_PROGRESS_OPTS'\n                                } else {\n                                    sh 'mvn install -q -B -Powasp -DskipTests=true -DskipStatic=true -pl !$DOCS -Dgib.enabled=true -Dgib.referenceBranch=/refs/remotes/origin/$CHANGE_TARGET $DISABLE_DOWNLOAD_PROGRESS_OPTS'\n                                }"
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "NodeJsSecurity",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "retry",
                          "arguments": {
                            "isLiteral": true,
                            "value": 3
                          },
                          "children": [
                            {
                              "name": "checkout",
                              "arguments": [
                                {
                                  "key": "scm",
                                  "value": {
                                    "isLiteral": false,
                                    "value": "${scm}"
                                  }
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "name": "script",
                          "arguments": [
                            {
                              "key": "scriptBlock",
                              "value": {
                                "isLiteral": true,
                                "value": "def packageFiles = findFiles(glob: '**/package.json')\n                            for (int i = 0; i < packageFiles.size(); i++) {\n                                dir(packageFiles[i].path.split('package.json')[0]) {\n                                    def packageFile = readJSON file: 'package.json'\n                                    if (packageFile.scripts =~ /.*webpack.*/ || packageFile.containsKey(\"browserify\")) {\n                                        nodejs(configId: 'npmrc-default', nodeJSInstallationName: 'nodejs') {\n                                            echo \"Scanning ${packageFiles[i].path}\"\n                                            sh 'nsp check'\n                                        }\n                                    }\n                                }\n                            }"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ],
                  "agent": {
                    "type": "label",
                    "argument": {
                      "isLiteral": true,
                      "value": "linux-small"
                    }
                  }
                }
              ]
            },
            {
              "name": "Deploy",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "withMaven",
                      "arguments": [
                        {
                          "key": "maven",
                          "value": {
                            "isLiteral": true,
                            "value": "M3"
                          }
                        },
                        {
                          "key": "jdk",
                          "value": {
                            "isLiteral": true,
                            "value": "jdk8-latest"
                          }
                        },
                        {
                          "key": "globalMavenSettingsConfig",
                          "value": {
                            "isLiteral": true,
                            "value": "default-global-settings"
                          }
                        },
                        {
                          "key": "mavenSettingsConfig",
                          "value": {
                            "isLiteral": true,
                            "value": "codice-maven-settings"
                          }
                        },
                        {
                          "key": "mavenOpts",
                          "value": {
                            "isLiteral": true,
                            "value": "${LINUX_MVN_RANDOM}"
                          }
                        }
                      ],
                      "children": [
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "mvn javadoc:aggregate -B -DskipStatic=true -DskipTests=true $DISABLE_DOWNLOAD_PROGRESS_OPTS"
                              }
                            }
                          ]
                        },
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "mvn deploy -B -T 1C -DskipStatic=true -DskipTests=true -DretryFailedDeploymentCount=10 $DISABLE_DOWNLOAD_PROGRESS_OPTS"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "allOf",
                    "children": [
                      {
                        "name": "expression",
                        "arguments": [
                          {
                            "key": "scriptBlock",
                            "value": {
                              "isLiteral": true,
                              "value": "env.CHANGE_ID == null"
                            }
                          }
                        ]
                      },
                      {
                        "name": "expression",
                        "arguments": [
                          {
                            "key": "scriptBlock",
                            "value": {
                              "isLiteral": true,
                              "value": "env.BRANCH_NAME ==~ /((?:\\d*\\.)?\\d.x|master)/"
                            }
                          }
                        ]
                      },
                      {
                        "name": "environment",
                        "arguments": [
                          {
                            "key": "name",
                            "value": {
                              "isLiteral": true,
                              "value": "JENKINS_ENV"
                            }
                          },
                          {
                            "key": "value",
                            "value": {
                              "isLiteral": true,
                              "value": "prod"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            },
            {
              "name": "Quality Analysis",
              "parallel": [
                {
                  "name": "SonarCloud",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "withMaven",
                          "arguments": [
                            {
                              "key": "maven",
                              "value": {
                                "isLiteral": true,
                                "value": "M35"
                              }
                            },
                            {
                              "key": "jdk",
                              "value": {
                                "isLiteral": true,
                                "value": "jdk8-latest"
                              }
                            },
                            {
                              "key": "globalMavenSettingsConfig",
                              "value": {
                                "isLiteral": true,
                                "value": "default-global-settings"
                              }
                            },
                            {
                              "key": "mavenSettingsConfig",
                              "value": {
                                "isLiteral": true,
                                "value": "codice-maven-settings"
                              }
                            },
                            {
                              "key": "mavenOpts",
                              "value": {
                                "isLiteral": true,
                                "value": "${LARGE_MVN_OPTS} ${LINUX_MVN_RANDOM}"
                              }
                            }
                          ],
                          "children": [
                            {
                              "name": "withCredentials",
                              "arguments": {
                                "isLiteral": false,
                                "value": "${[string(credentialsId: 'SonarQubeGithubToken', variable: 'SONARQUBE_GITHUB_TOKEN'), string(credentialsId: 'sonarqube-token', variable: 'SONAR_TOKEN')]}"
                              },
                              "children": [
                                {
                                  "name": "script",
                                  "arguments": [
                                    {
                                      "key": "scriptBlock",
                                      "value": {
                                        "isLiteral": true,
                                        "value": "if (env.CHANGE_ID == null) {\n                                        sh 'mvn -q -B -Dcheckstyle.skip=true org.jacoco:jacoco-maven-plugin:prepare-agent install sonar:sonar -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=$SONAR_TOKEN  -Dsonar.organization=codice -Dsonar.projectKey=org.codice:alliance -Dsonar.exclusions=${COVERAGE_EXCLUSIONS} -pl !$DOCS,!$ITESTS $DISABLE_DOWNLOAD_PROGRESS_OPTS'\n                                    } else {\n                                        echo \"Currently Sonar is not run for pull requests\"\n                                        // sh 'mvn -q -B -Dcheckstyle.skip=true org.jacoco:jacoco-maven-plugin:prepare-agent install sonar:sonar -Dsonar.github.pullRequest=${CHANGE_ID} -Dsonar.github.oauth=${SONARQUBE_GITHUB_TOKEN} -Dsonar.analysis.mode=preview -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=$SONAR_TOKEN  -Dsonar.organization=codice -Dsonar.projectKey=org.codice:alliance -Dsonar.exclusions=${COVERAGE_EXCLUSIONS} -pl !$DOCS,!$ITESTS -Dgib.enabled=true -Dgib.referenceBranch=/refs/remotes/origin/$CHANGE_TARGET $DISABLE_DOWNLOAD_PROGRESS_OPTS'\n                                    }"
                                      }
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "Coverity",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "retry",
                          "arguments": {
                            "isLiteral": true,
                            "value": 3
                          },
                          "children": [
                            {
                              "name": "checkout",
                              "arguments": [
                                {
                                  "key": "scm",
                                  "value": {
                                    "isLiteral": false,
                                    "value": "${scm}"
                                  }
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "name": "script",
                          "arguments": [
                            {
                              "key": "scriptBlock",
                              "value": {
                                "isLiteral": true,
                                "value": "if (env.BRANCH_NAME != 'master') {\n                                echo \"Coverity is only run on master\"\n                            } else {\n                                withMaven(maven: 'M35', jdk: 'jdk8-latest', globalMavenSettingsConfig: 'default-global-settings', mavenSettingsConfig: 'codice-maven-settings', mavenOpts: '${LINUX_MVN_RANDOM}') {\n                                    withCredentials([string(credentialsId: 'alliance-coverity-token', variable: 'COVERITY_TOKEN')]) {\n                                        withEnv([\"PATH=${tool 'coverity-linux'}/bin:${env.PATH}\"]) {\n                                            configFileProvider([configFile(fileId: 'coverity-maven-settings', replaceTokens: true, variable: 'MAVEN_SETTINGS')]) {\n                                                sh 'cov-build --dir cov-int mvn -DskipTests=true -DskipStatic=true install -B -pl !$DOCS $DISABLE_DOWNLOAD_PROGRESS_OPTS --settings $MAVEN_SETTINGS'\n                                                sh 'tar czvf alliance.tgz cov-int'\n                                                sh 'curl --form token=$COVERITY_TOKEN --form email=cmp-security-team@connexta.com --form file=@alliance.tgz --form version=\"master\" --form description=\"Description: Alliance CI Build\" https://scan.coverity.com/builds?project=codice%2Falliance'\n                                            }\n                                        }\n                                    }\n                                }\n                            }"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ],
                  "agent": {
                    "type": "label",
                    "argument": {
                      "isLiteral": true,
                      "value": "linux-medium"
                    }
                  }
                },
                {
                  "name": "Codecov",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "retry",
                          "arguments": {
                            "isLiteral": true,
                            "value": 3
                          },
                          "children": [
                            {
                              "name": "checkout",
                              "arguments": [
                                {
                                  "key": "scm",
                                  "value": {
                                    "isLiteral": false,
                                    "value": "${scm}"
                                  }
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "name": "withMaven",
                          "arguments": [
                            {
                              "key": "maven",
                              "value": {
                                "isLiteral": true,
                                "value": "M35"
                              }
                            },
                            {
                              "key": "jdk",
                              "value": {
                                "isLiteral": true,
                                "value": "jdk8-latest"
                              }
                            },
                            {
                              "key": "globalMavenSettingsConfig",
                              "value": {
                                "isLiteral": true,
                                "value": "default-global-settings"
                              }
                            },
                            {
                              "key": "mavenSettingsConfig",
                              "value": {
                                "isLiteral": true,
                                "value": "codice-maven-settings"
                              }
                            },
                            {
                              "key": "mavenOpts",
                              "value": {
                                "isLiteral": true,
                                "value": "${LARGE_MVN_OPTS} ${LINUX_MVN_RANDOM}"
                              }
                            }
                          ],
                          "children": [
                            {
                              "name": "withCredentials",
                              "arguments": {
                                "isLiteral": false,
                                "value": "${[string(credentialsId: 'Alliance_CodeCov', variable: 'CODECOV_TOKEN')]}"
                              },
                              "children": [
                                {
                                  "name": "sh",
                                  "arguments": [
                                    {
                                      "key": "script",
                                      "value": {
                                        "isLiteral": true,
                                        "value": "mvn clean install -B -T 1C -pl !$ITESTS $DISABLE_DOWNLOAD_PROGRESS_OPTS"
                                      }
                                    }
                                  ]
                                },
                                {
                                  "name": "sh",
                                  "arguments": [
                                    {
                                      "key": "script",
                                      "value": {
                                        "isLiteral": true,
                                        "value": "curl -s https://codecov.io/bash | bash -s - -t ${CODECOV_TOKEN}"
                                      }
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ],
                  "agent": {
                    "type": "label",
                    "argument": {
                      "isLiteral": true,
                      "value": "linux-small"
                    }
                  }
                }
              ]
            }
          ],
          "post": {
            "conditions": [
              {
                "condition": "success",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "slackSend",
                      "arguments": [
                        {
                          "key": "color",
                          "value": {
                            "isLiteral": true,
                            "value": "good"
                          }
                        },
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": false,
                            "value": "\"SUCCESS: ${JOB_NAME} ${BUILD_NUMBER}\""
                          }
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "condition": "failure",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "slackSend",
                      "arguments": [
                        {
                          "key": "color",
                          "value": {
                            "isLiteral": true,
                            "value": "#ea0017"
                          }
                        },
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": false,
                            "value": "\"FAILURE: ${JOB_NAME} ${BUILD_NUMBER}. See the results here: ${BUILD_URL}\""
                          }
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "condition": "unstable",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "slackSend",
                      "arguments": [
                        {
                          "key": "color",
                          "value": {
                            "isLiteral": true,
                            "value": "#ffb600"
                          }
                        },
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": false,
                            "value": "\"UNSTABLE: ${JOB_NAME} ${BUILD_NUMBER}. See the results here: ${BUILD_URL}\""
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          },
          "environment": [
            {
              "key": "DOCS",
              "value": {
                "isLiteral": true,
                "value": "distribution/docs"
              }
            },
            {
              "key": "ITESTS",
              "value": {
                "isLiteral": true,
                "value": "distribution/test/itests/test-itests-alliance"
              }
            },
            {
              "key": "POMFIX",
              "value": {
                "isLiteral": true,
                "value": "libs/pom-fix-run"
              }
            },
            {
              "key": "LARGE_MVN_OPTS",
              "value": {
                "isLiteral": true,
                "value": "-Xmx8192M -Xss128M -XX:+CMSClassUnloadingEnabled -XX:+UseConcMarkSweepGC "
              }
            },
            {
              "key": "DISABLE_DOWNLOAD_PROGRESS_OPTS",
              "value": {
                "isLiteral": true,
                "value": "-Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn "
              }
            },
            {
              "key": "LINUX_MVN_RANDOM",
              "value": {
                "isLiteral": true,
                "value": "-Djava.security.egd=file:/dev/./urandom"
              }
            },
            {
              "key": "COVERAGE_EXCLUSIONS",
              "value": {
                "isLiteral": true,
                "value": "**/test/**/*,**/itests/**/*,**/*Test*,**/sdk/**/*,**/*.js,**/node_modules/**/*,**/jaxb/**/*,**/wsdl/**/*,**/nces/sws/**/*,**/*.adoc,**/*.txt,**/*.xml"
              }
            }
          ],
          "agent": {
            "type": "label",
            "argument": {
              "isLiteral": true,
              "value": "linux-large"
            }
          },
          "options": {
            "options": [
              {
                "name": "buildDiscarder",
                "arguments": [
                  {
                    "name": "logRotator",
                    "arguments": [
                      {
                        "key": "numToKeepStr",
                        "value": {
                          "isLiteral": true,
                          "value": "25"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "name": "disableConcurrentBuilds",
                "arguments": []
              },
              {
                "name": "timestamps",
                "arguments": []
              },
              {
                "name": "skipDefaultCheckout",
                "arguments": []
              }
            ]
          },
          "triggers": {
            "triggers": [
              {
                "name": "cron",
                "arguments": [
                  {
                    "isLiteral": false,
                    "value": "${BRANCH_NAME == \"master\" ? \"H H(19-21) * * *\" : \"\"}"
                  }
                ]
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "apache/hbase",
      "repo_url": "https://github.com/apache/hbase",
      "html_url_jenkinsfile": "https://github.com/apache/hbase/blob/f4a39043e2fb3da69e378b4e1cbcb4bd7e2a6662/dev-support/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/20089857/git/blobs/821d20e6a89e101659cee1526ef83de6b89fb996",
      "jenkins_pipeline": [
        {
          "error": [
            "Tool type \"maven\" does not have an install of \"Maven (latest)\" configured - did you mean \"Jenkins_maven\"? @ line 446, column 19.",
            "Tool type \"jdk\" does not have an install of \"JDK 1.8 (latest)\" configured - did you mean \"null\"? @ line 448, column 17."
          ]
        }
      ]
    },
    {
      "full_repo_name": "BigWii/hbase-src",
      "repo_url": "https://github.com/BigWii/hbase-src",
      "html_url_jenkinsfile": "https://github.com/BigWii/hbase-src/blob/5a071dbe2bbcbc22ec52fea0426637905f6c37bb/dev-support/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/131708626/git/blobs/821d20e6a89e101659cee1526ef83de6b89fb996",
      "jenkins_pipeline": [
        {
          "error": [
            "Tool type \"maven\" does not have an install of \"Maven (latest)\" configured - did you mean \"Jenkins_maven\"? @ line 446, column 19.",
            "Tool type \"jdk\" does not have an install of \"JDK 1.8 (latest)\" configured - did you mean \"null\"? @ line 448, column 17."
          ]
        }
      ]
    },
    {
      "full_repo_name": "BigWii/https-git-wip-us.apache.org-repos-asf-hbase",
      "repo_url": "https://github.com/BigWii/https-git-wip-us.apache.org-repos-asf-hbase",
      "html_url_jenkinsfile": "https://github.com/BigWii/https-git-wip-us.apache.org-repos-asf-hbase/blob/5a071dbe2bbcbc22ec52fea0426637905f6c37bb/dev-support/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/131713713/git/blobs/821d20e6a89e101659cee1526ef83de6b89fb996",
      "jenkins_pipeline": [
        {
          "error": [
            "Tool type \"maven\" does not have an install of \"Maven (latest)\" configured - did you mean \"Jenkins_maven\"? @ line 446, column 19.",
            "Tool type \"jdk\" does not have an install of \"JDK 1.8 (latest)\" configured - did you mean \"null\"? @ line 448, column 17."
          ]
        }
      ]
    },
    {
      "full_repo_name": "goern/AI-Stacks",
      "repo_url": "https://github.com/goern/AI-Stacks",
      "html_url_jenkinsfile": "https://github.com/goern/AI-Stacks/blob/2ede1a834c84618e8b6dbd19e230afe479ec9518/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/124392634/git/blobs/50c07096d17cf5b87e725c804b383764e5607bdd",
      "jenkins_pipeline": [
        {
          "error": "Invalid agent type \"kubernetes\" specified. Must be one of [docker, dockerfile, label, any, none] @ line 73, column 9."
        }
      ]
    },
    {
      "full_repo_name": "apurtell/hbase",
      "repo_url": "https://github.com/apurtell/hbase",
      "html_url_jenkinsfile": "https://github.com/apurtell/hbase/blob/1825af45b328cd54680c5c552f07bb12c4705fdb/dev-support/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/20067882/git/blobs/821d20e6a89e101659cee1526ef83de6b89fb996",
      "jenkins_pipeline": [
        {
          "error": [
            "Tool type \"maven\" does not have an install of \"Maven (latest)\" configured - did you mean \"Jenkins_maven\"? @ line 446, column 19.",
            "Tool type \"jdk\" does not have an install of \"JDK 1.8 (latest)\" configured - did you mean \"null\"? @ line 448, column 17."
          ]
        }
      ]
    },
    {
      "full_repo_name": "hyperledger/iroha",
      "repo_url": "https://github.com/hyperledger/iroha",
      "html_url_jenkinsfile": "https://github.com/hyperledger/iroha/blob/ed665deb84aba285e2dfc217188bba8a9cc5ce2e/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/67340575/git/blobs/6a6d71bf16041b310189147d56e174a5ba4db63d",
      "jenkins_pipeline": [
        {
          "error": "Invalid trigger type \"parameterizedCron\". Valid trigger types: [upstream, cron, bitbucketPush, gitlab, snapshotDependencies, githubPush, pollSCM] @ line 46, column 9."
        }
      ]
    },
    {
      "full_repo_name": "jenkinsci/pipeline-model-definition-plugin",
      "repo_url": "https://github.com/jenkinsci/pipeline-model-definition-plugin",
      "html_url_jenkinsfile": "https://github.com/jenkinsci/pipeline-model-definition-plugin/blob/b492733adb2ef8a81be644f9582d7afd041372d9/pipeline-model-definition/src/main/groovy/org/jenkinsci/plugins/pipeline/modeldefinition/parser/ModelParser.groovy",
      "api_url_jenkinsfile": "https://api.github.com/repositories/66677338/git/blobs/cb1f3186c2102a1a586cb32e7dc2b1f06301f500",
      "jenkins_pipeline": [
        {
          "error": "unable to resolve class edu.umd.cs.findbugs.annotations.SuppressFBWarnings\n @ line 26, column 1."
        }
      ]
    },
    {
      "full_repo_name": "HM-demo/k8s-demo",
      "repo_url": "https://github.com/HM-demo/k8s-demo",
      "html_url_jenkinsfile": "https://github.com/HM-demo/k8s-demo/blob/206241313952720ea45754e5dbe2ce1bbbb035ec/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/123079041/git/blobs/451617fa0af5e3051fcf4facb65e19828413a32c",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Git clone and setup",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "Check out acme code"
                          }
                        }
                      ]
                    },
                    {
                      "name": "git",
                      "arguments": [
                        {
                          "key": "branch",
                          "value": {
                            "isLiteral": true,
                            "value": "master"
                          }
                        },
                        {
                          "key": "credentialsId",
                          "value": {
                            "isLiteral": true,
                            "value": "eldada-bb"
                          }
                        },
                        {
                          "key": "url",
                          "value": {
                            "isLiteral": true,
                            "value": "https://git.jfrog.info/scm/~eldada/acme-ci-cd.git"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "kubectl cluster-info"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "helm init"
                          }
                        }
                      ]
                    },
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "if (! fileExists(\"${PARAMETERS_FILE}\")) {\n                        echo \"ERROR: ${PARAMETERS_FILE} is missing!\"\n                    }"
                          }
                        }
                      ]
                    },
                    {
                      "name": "load",
                      "arguments": [
                        {
                          "key": "path",
                          "value": {
                            "isLiteral": false,
                            "value": "\"${JENKINS_HOME}/parameters.groovy\""
                          }
                        }
                      ]
                    },
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": false,
                            "value": "\"DOCKER_REG is ${DOCKER_REG}\""
                          }
                        }
                      ]
                    },
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": false,
                            "value": "\"HELM_REPO  is ${HELM_REPO}\""
                          }
                        }
                      ]
                    },
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "branch = GIT_BRANCH.replaceAll('/', '-').replaceAll('\\\\*', '-')\n                    ID = \"${IMAGE_NAME}-${DOCKER_TAG}-${branch}\"\n\n                    echo \"Global ID set to ${ID}\""
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Build and tests",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "Building application and Docker image"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": false,
                            "value": "\"${WORKSPACE}/build.sh --build --registry ${DOCKER_REG} --tag ${DOCKER_TAG} --docker_usr ${DOCKER_USR} --docker_psw ${DOCKER_PSW}\""
                          }
                        }
                      ]
                    },
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "Running tests"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": false,
                            "value": "\"[ -z \\\"\\$(docker ps -a | grep ${ID} 2>/dev/null)\\\" ] || docker rm -f ${ID}\""
                          }
                        }
                      ]
                    },
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": false,
                            "value": "\"Starting ${IMAGE_NAME} container\""
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": false,
                            "value": "\"docker run --detach --name ${ID} --rm --publish ${TEST_LOCAL_PORT}:80 ${DOCKER_REG}/${IMAGE_NAME}:${DOCKER_TAG}\""
                          }
                        }
                      ]
                    },
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "host_ip = sh(returnStdout: true, script: '/sbin/ip route | awk \\'/default/ { print $3 \":${TEST_LOCAL_PORT}\" }\\'')"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Local tests",
              "parallel": [
                {
                  "name": "Curl http_code",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "curlRun",
                          "arguments": [
                            {
                              "isLiteral": false,
                              "value": "\"http://${host_ip}\""
                            },
                            {
                              "isLiteral": true,
                              "value": "http_code"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "Curl total_time",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "curlRun",
                          "arguments": [
                            {
                              "isLiteral": false,
                              "value": "\"http://${host_ip}\""
                            },
                            {
                              "isLiteral": true,
                              "value": "total_time"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "Curl size_download",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "curlRun",
                          "arguments": [
                            {
                              "isLiteral": false,
                              "value": "\"http://${host_ip}\""
                            },
                            {
                              "isLiteral": true,
                              "value": "size_download"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Publish Docker and Helm",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "Stop and remove container"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": false,
                            "value": "\"docker stop ${ID}\""
                          }
                        }
                      ]
                    },
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": false,
                            "value": "\"Pushing ${DOCKER_REG}/${IMAGE_NAME}:${DOCKER_TAG} image to registry\""
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": false,
                            "value": "\"${WORKSPACE}/build.sh --push --registry ${DOCKER_REG} --tag ${DOCKER_TAG} --docker_usr ${DOCKER_USR} --docker_psw ${DOCKER_PSW}\""
                          }
                        }
                      ]
                    },
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "Packing helm chart"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": false,
                            "value": "\"${WORKSPACE}/build.sh --pack_helm --push_helm --helm_repo ${HELM_REPO} --helm_usr ${HELM_USR} --helm_psw ${HELM_PSW}\""
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Deploy to dev",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "namespace = 'development'\n\n                    echo \"Deploying application ${ID} to ${namespace} namespace\"\n                    createNamespace (namespace)\n\n                    // Remove release if exists\n                    helmDelete (namespace, \"${ID}\")\n\n                    // Deploy with helm\n                    echo \"Deploying\"\n                    helmInstall(namespace, \"${ID}\")"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Dev tests",
              "parallel": [
                {
                  "name": "Curl http_code",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "curlTest",
                          "arguments": [
                            {
                              "isLiteral": false,
                              "value": "${namespace}"
                            },
                            {
                              "isLiteral": true,
                              "value": "http_code"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "Curl total_time",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "curlTest",
                          "arguments": [
                            {
                              "isLiteral": false,
                              "value": "${namespace}"
                            },
                            {
                              "isLiteral": true,
                              "value": "time_total"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "Curl size_download",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "curlTest",
                          "arguments": [
                            {
                              "isLiteral": false,
                              "value": "${namespace}"
                            },
                            {
                              "isLiteral": true,
                              "value": "size_download"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Cleanup dev",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "helmDelete (namespace, \"${ID}\")"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Deploy to staging",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "namespace = 'staging'\n\n                    echo \"Deploying application ${IMAGE_NAME}:${DOCKER_TAG} to ${namespace} namespace\"\n                    createNamespace (namespace)\n\n                    // Remove release if exists\n                    helmDelete (namespace, \"${ID}\")\n\n                    // Deploy with helm\n                    echo \"Deploying\"\n                    helmInstall (namespace, \"${ID}\")"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Staging tests",
              "parallel": [
                {
                  "name": "Curl http_code",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "curlTest",
                          "arguments": [
                            {
                              "isLiteral": false,
                              "value": "${namespace}"
                            },
                            {
                              "isLiteral": true,
                              "value": "http_code"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "Curl total_time",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "curlTest",
                          "arguments": [
                            {
                              "isLiteral": false,
                              "value": "${namespace}"
                            },
                            {
                              "isLiteral": true,
                              "value": "time_total"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "Curl size_download",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "curlTest",
                          "arguments": [
                            {
                              "isLiteral": false,
                              "value": "${namespace}"
                            },
                            {
                              "isLiteral": true,
                              "value": "size_download"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Cleanup staging",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "helmDelete (namespace, \"${ID}\")"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Go for Production?",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "milestone",
                      "arguments": [
                        {
                          "key": "ordinal",
                          "value": {
                            "isLiteral": true,
                            "value": 1
                          }
                        }
                      ]
                    },
                    {
                      "name": "input",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "Proceed and deploy to Production?"
                          }
                        }
                      ]
                    },
                    {
                      "name": "milestone",
                      "arguments": [
                        {
                          "key": "ordinal",
                          "value": {
                            "isLiteral": true,
                            "value": 2
                          }
                        }
                      ]
                    },
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "DEPLOY_PROD = true"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "allOf",
                    "children": [
                      {
                        "name": "environment",
                        "arguments": [
                          {
                            "key": "name",
                            "value": {
                              "isLiteral": true,
                              "value": "GIT_BRANCH"
                            }
                          },
                          {
                            "key": "value",
                            "value": {
                              "isLiteral": true,
                              "value": "master"
                            }
                          }
                        ]
                      },
                      {
                        "name": "environment",
                        "arguments": [
                          {
                            "key": "name",
                            "value": {
                              "isLiteral": true,
                              "value": "DEPLOY_TO_PROD"
                            }
                          },
                          {
                            "key": "value",
                            "value": {
                              "isLiteral": true,
                              "value": "false"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            },
            {
              "name": "Deploy to Production",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "DEPLOY_PROD = true\n                    namespace = 'production'\n\n                    echo \"Deploying application ${IMAGE_NAME}:${DOCKER_TAG} to ${namespace} namespace\"\n                    createNamespace (namespace)\n\n                    // Deploy with helm\n                    echo \"Deploying\"\n                    helmInstall (namespace, \"${ID}\")"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "anyOf",
                    "children": [
                      {
                        "name": "expression",
                        "arguments": [
                          {
                            "key": "scriptBlock",
                            "value": {
                              "isLiteral": true,
                              "value": "DEPLOY_PROD == true"
                            }
                          }
                        ]
                      },
                      {
                        "name": "environment",
                        "arguments": [
                          {
                            "key": "name",
                            "value": {
                              "isLiteral": true,
                              "value": "DEPLOY_TO_PROD"
                            }
                          },
                          {
                            "key": "value",
                            "value": {
                              "isLiteral": true,
                              "value": "true"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            },
            {
              "name": "Production tests",
              "parallel": [
                {
                  "name": "Curl http_code",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "curlTest",
                          "arguments": [
                            {
                              "isLiteral": false,
                              "value": "${namespace}"
                            },
                            {
                              "isLiteral": true,
                              "value": "http_code"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "Curl total_time",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "curlTest",
                          "arguments": [
                            {
                              "isLiteral": false,
                              "value": "${namespace}"
                            },
                            {
                              "isLiteral": true,
                              "value": "time_total"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "Curl size_download",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "curlTest",
                          "arguments": [
                            {
                              "isLiteral": false,
                              "value": "${namespace}"
                            },
                            {
                              "isLiteral": true,
                              "value": "size_download"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "expression",
                    "arguments": [
                      {
                        "key": "scriptBlock",
                        "value": {
                          "isLiteral": true,
                          "value": "DEPLOY_PROD == true"
                        }
                      }
                    ]
                  }
                ]
              }
            }
          ],
          "environment": [
            {
              "key": "IMAGE_NAME",
              "value": {
                "isLiteral": true,
                "value": "acme"
              }
            },
            {
              "key": "TEST_LOCAL_PORT",
              "value": {
                "isLiteral": true,
                "value": 8817
              }
            },
            {
              "key": "DEPLOY_PROD",
              "value": {
                "isLiteral": true,
                "value": false
              }
            },
            {
              "key": "PARAMETERS_FILE",
              "value": {
                "isLiteral": false,
                "value": "\"${JENKINS_HOME}/parameters.groovy\""
              }
            }
          ],
          "agent": {
            "type": "node",
            "arguments": [
              {
                "key": "label",
                "value": {
                  "isLiteral": true,
                  "value": "master"
                }
              }
            ]
          },
          "options": {
            "options": [
              {
                "name": "timeout",
                "arguments": [
                  {
                    "key": "time",
                    "value": {
                      "isLiteral": true,
                      "value": 60
                    }
                  },
                  {
                    "key": "unit",
                    "value": {
                      "isLiteral": true,
                      "value": "MINUTES"
                    }
                  }
                ]
              }
            ]
          },
          "parameters": {
            "parameters": [
              {
                "name": "string",
                "arguments": [
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "GIT_BRANCH"
                    }
                  },
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": true,
                      "value": "master"
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "Git branch to build"
                    }
                  }
                ]
              },
              {
                "name": "booleanParam",
                "arguments": [
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "DEPLOY_TO_PROD"
                    }
                  },
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": true,
                      "value": false
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "If build and tests are good, proceed and deploy to production without manual approval"
                    }
                  }
                ]
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "mmaheu/nostromo",
      "repo_url": "https://github.com/mmaheu/nostromo",
      "html_url_jenkinsfile": "https://github.com/mmaheu/nostromo/blob/efa4242e7ffce457a2a682144b4e2f1980989a28/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/124433302/git/blobs/0f1275cf2cf2c422a97789dc65ac133b5106d31a",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Git clone and setup",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "Check out nostromo code"
                          }
                        }
                      ]
                    },
                    {
                      "name": "git",
                      "arguments": [
                        {
                          "key": "branch",
                          "value": {
                            "isLiteral": true,
                            "value": "master"
                          }
                        },
                        {
                          "key": "credentialsId",
                          "value": {
                            "isLiteral": true,
                            "value": "mmaheu"
                          }
                        },
                        {
                          "key": "url",
                          "value": {
                            "isLiteral": true,
                            "value": "https://github.com/mmaheu/nostromo.git"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "kubectl cluster-info"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "helm init"
                          }
                        }
                      ]
                    },
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "branch = GIT_BRANCH.replaceAll('/', '-').replaceAll('\\\\*', '-')\n                    ID = \"${IMAGE_NAME}-${DOCKER_TAG}-${branch}\"\n                    echo \"Global ID set to ${ID}\""
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Build and tests",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "Building application and Docker image"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": false,
                            "value": "\"${WORKSPACE}/build.sh --build --registry ${DOCKER_REG} --tag ${DOCKER_TAG} --docker_usr ${DOCKER_USR} --docker_psw ${DOCKER_PSW}\""
                          }
                        }
                      ]
                    },
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "Running tests"
                          }
                        }
                      ]
                    },
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "helm remove the old release and docker container"
                          }
                        }
                      ]
                    },
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": false,
                            "value": "\"Starting ${IMAGE_NAME} container\""
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": false,
                            "value": "\"docker run --detach --name ${ID} --rm --publish ${TEST_LOCAL_PORT}:80 ${DOCKER_REG}/${IMAGE_NAME}:${DOCKER_TAG}\""
                          }
                        }
                      ]
                    },
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "host_ip = sh(returnStdout: true, script: '/sbin/ip route | awk \\'/default/ { print $3 \":${TEST_LOCAL_PORT}\" }\\'')"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Local tests",
              "parallel": [
                {
                  "name": "Curl http_code",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "curlRun",
                          "arguments": [
                            {
                              "isLiteral": false,
                              "value": "\"http://${host_ip}\""
                            },
                            {
                              "isLiteral": true,
                              "value": "http_code"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "Curl total_time",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "curlRun",
                          "arguments": [
                            {
                              "isLiteral": false,
                              "value": "\"http://${host_ip}\""
                            },
                            {
                              "isLiteral": true,
                              "value": "total_time"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "Curl size_download",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "curlRun",
                          "arguments": [
                            {
                              "isLiteral": false,
                              "value": "\"http://${host_ip}\""
                            },
                            {
                              "isLiteral": true,
                              "value": "size_download"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Publish Docker and Helm",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "Stop and remove container"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": false,
                            "value": "\"docker stop ${ID}\""
                          }
                        }
                      ]
                    },
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": false,
                            "value": "\"Pushing ${DOCKER_REG}/${IMAGE_NAME}:${DOCKER_TAG} image to registry\""
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": false,
                            "value": "\"${WORKSPACE}/build.sh --push --registry ${DOCKER_REG} --tag ${DOCKER_TAG} --docker_usr ${DOCKER_USR} --docker_psw ${DOCKER_PSW}\""
                          }
                        }
                      ]
                    },
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "Packing helm chart"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": false,
                            "value": "\"${WORKSPACE}/build.sh --pack_helm --push_helm --helm_repo ${HELM_REPO} --helm_usr ${HELM_USR} --helm_psw ${HELM_PSW}\""
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Deploy to dev",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "namespace = 'development'\n\n                    echo \"Deploying application ${ID} to ${namespace} namespace\"\n                    createNamespace (namespace)\n\n                    // Remove release if exists\n                    helmDelete (namespace, \"${ID}\")\n\n                    // Deploy with helm\n                    echo \"Deploying\"\n                    helmInstall(namespace, \"${ID}\")"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Dev tests",
              "parallel": [
                {
                  "name": "Curl http_code",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "curlTest",
                          "arguments": [
                            {
                              "isLiteral": false,
                              "value": "${namespace}"
                            },
                            {
                              "isLiteral": true,
                              "value": "http_code"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "Curl total_time",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "curlTest",
                          "arguments": [
                            {
                              "isLiteral": false,
                              "value": "${namespace}"
                            },
                            {
                              "isLiteral": true,
                              "value": "time_total"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "Curl size_download",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "curlTest",
                          "arguments": [
                            {
                              "isLiteral": false,
                              "value": "${namespace}"
                            },
                            {
                              "isLiteral": true,
                              "value": "size_download"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Cleanup dev",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "helmDelete (namespace, \"${ID}\")"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Deploy to staging",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "namespace = 'staging'\n\n                    echo \"Deploying application ${IMAGE_NAME}:${DOCKER_TAG} to ${namespace} namespace\"\n                    createNamespace (namespace)\n\n                    // Remove release if exists\n                    helmDelete (namespace, \"${ID}\")\n\n                    // Deploy with helm\n                    echo \"Deploying\"\n                    helmInstall (namespace, \"${ID}\")"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Staging tests",
              "parallel": [
                {
                  "name": "Curl http_code",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "curlTest",
                          "arguments": [
                            {
                              "isLiteral": false,
                              "value": "${namespace}"
                            },
                            {
                              "isLiteral": true,
                              "value": "http_code"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "Curl total_time",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "curlTest",
                          "arguments": [
                            {
                              "isLiteral": false,
                              "value": "${namespace}"
                            },
                            {
                              "isLiteral": true,
                              "value": "time_total"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "Curl size_download",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "curlTest",
                          "arguments": [
                            {
                              "isLiteral": false,
                              "value": "${namespace}"
                            },
                            {
                              "isLiteral": true,
                              "value": "size_download"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Cleanup staging",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "helmDelete (namespace, \"${ID}\")"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Go for Production?",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "milestone",
                      "arguments": [
                        {
                          "key": "ordinal",
                          "value": {
                            "isLiteral": true,
                            "value": 1
                          }
                        }
                      ]
                    },
                    {
                      "name": "input",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "Proceed and deploy to Production?"
                          }
                        }
                      ]
                    },
                    {
                      "name": "milestone",
                      "arguments": [
                        {
                          "key": "ordinal",
                          "value": {
                            "isLiteral": true,
                            "value": 2
                          }
                        }
                      ]
                    },
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "DEPLOY_PROD = true"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "allOf",
                    "children": [
                      {
                        "name": "environment",
                        "arguments": [
                          {
                            "key": "name",
                            "value": {
                              "isLiteral": true,
                              "value": "GIT_BRANCH"
                            }
                          },
                          {
                            "key": "value",
                            "value": {
                              "isLiteral": true,
                              "value": "master"
                            }
                          }
                        ]
                      },
                      {
                        "name": "environment",
                        "arguments": [
                          {
                            "key": "name",
                            "value": {
                              "isLiteral": true,
                              "value": "DEPLOY_TO_PROD"
                            }
                          },
                          {
                            "key": "value",
                            "value": {
                              "isLiteral": true,
                              "value": "false"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            },
            {
              "name": "Deploy to Production",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "namespace = 'production'\n                helmDelete (namespace, \"${ID}\")\n                DEPLOY_PROD = true\n\n                echo \"Deploying application ${IMAGE_NAME}:${DOCKER_TAG} to ${namespace} namespace\"\n                createNamespace (namespace)\n\n                // Deploy with helm\n                echo \"Deploying\"\n                helmInstall (namespace, \"${ID}\")"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "anyOf",
                    "children": [
                      {
                        "name": "expression",
                        "arguments": [
                          {
                            "key": "scriptBlock",
                            "value": {
                              "isLiteral": true,
                              "value": "DEPLOY_PROD == true"
                            }
                          }
                        ]
                      },
                      {
                        "name": "environment",
                        "arguments": [
                          {
                            "key": "name",
                            "value": {
                              "isLiteral": true,
                              "value": "DEPLOY_TO_PROD"
                            }
                          },
                          {
                            "key": "value",
                            "value": {
                              "isLiteral": true,
                              "value": "true"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            },
            {
              "name": "Production tests",
              "parallel": [
                {
                  "name": "Curl http_code",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "curlTest",
                          "arguments": [
                            {
                              "isLiteral": false,
                              "value": "${namespace}"
                            },
                            {
                              "isLiteral": true,
                              "value": "http_code"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "Curl total_time",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "curlTest",
                          "arguments": [
                            {
                              "isLiteral": false,
                              "value": "${namespace}"
                            },
                            {
                              "isLiteral": true,
                              "value": "time_total"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "Curl size_download",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "curlTest",
                          "arguments": [
                            {
                              "isLiteral": false,
                              "value": "${namespace}"
                            },
                            {
                              "isLiteral": true,
                              "value": "size_download"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "expression",
                    "arguments": [
                      {
                        "key": "scriptBlock",
                        "value": {
                          "isLiteral": true,
                          "value": "DEPLOY_PROD == true"
                        }
                      }
                    ]
                  }
                ]
              }
            }
          ],
          "environment": [
            {
              "key": "IMAGE_NAME",
              "value": {
                "isLiteral": true,
                "value": "nostromo"
              }
            },
            {
              "key": "TEST_LOCAL_PORT",
              "value": {
                "isLiteral": true,
                "value": 8817
              }
            },
            {
              "key": "DEPLOY_PROD",
              "value": {
                "isLiteral": true,
                "value": false
              }
            }
          ],
          "agent": {
            "type": "node",
            "arguments": [
              {
                "key": "label",
                "value": {
                  "isLiteral": true,
                  "value": "master"
                }
              }
            ]
          },
          "options": {
            "options": [
              {
                "name": "timeout",
                "arguments": [
                  {
                    "key": "time",
                    "value": {
                      "isLiteral": true,
                      "value": 60
                    }
                  },
                  {
                    "key": "unit",
                    "value": {
                      "isLiteral": true,
                      "value": "MINUTES"
                    }
                  }
                ]
              }
            ]
          },
          "parameters": {
            "parameters": [
              {
                "name": "string",
                "arguments": [
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "GIT_BRANCH"
                    }
                  },
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": true,
                      "value": "master"
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "Git branch to build"
                    }
                  }
                ]
              },
              {
                "name": "booleanParam",
                "arguments": [
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "DEPLOY_TO_PROD"
                    }
                  },
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": true,
                      "value": false
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "If build and tests are good, proceed and deploy to production without manual approval"
                    }
                  }
                ]
              },
              {
                "name": "string",
                "arguments": [
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "DOCKER_REG"
                    }
                  },
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": true,
                      "value": "docker.io/mmaheu"
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "Docker registry"
                    }
                  }
                ]
              },
              {
                "name": "string",
                "arguments": [
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "DOCKER_TAG"
                    }
                  },
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": true,
                      "value": "narcissus"
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "Docker tag"
                    }
                  }
                ]
              },
              {
                "name": "string",
                "arguments": [
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "DOCKER_USR"
                    }
                  },
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": true,
                      "value": "mmaheu"
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "Your Docker repository user"
                    }
                  }
                ]
              },
              {
                "name": "string",
                "arguments": [
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "DOCKER_PSW"
                    }
                  },
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": true,
                      "value": "FireBox69"
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "Your Docker repository password"
                    }
                  }
                ]
              },
              {
                "name": "string",
                "arguments": [
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "IMG_PULL_SECRET"
                    }
                  },
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": true,
                      "value": "bW1haGV1OlNwYWRlRmlzaDU4MTg="
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "The Kubernetes secret for the Docker registry (imagePullSecrets)"
                    }
                  }
                ]
              },
              {
                "name": "string",
                "arguments": [
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "HELM_REPO"
                    }
                  },
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": true,
                      "value": "http://127.0.0.1:8879/charts"
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "Your helm repository"
                    }
                  }
                ]
              },
              {
                "name": "string",
                "arguments": [
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "HELM_USR"
                    }
                  },
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": true,
                      "value": "admin"
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "Your helm repository user"
                    }
                  }
                ]
              },
              {
                "name": "string",
                "arguments": [
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "HELM_PSW"
                    }
                  },
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": true,
                      "value": "secrets"
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "Your helm repository password"
                    }
                  }
                ]
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "jeffreycoe/test_jenkins_pipeline",
      "repo_url": "https://github.com/jeffreycoe/test_jenkins_pipeline",
      "html_url_jenkinsfile": "https://github.com/jeffreycoe/test_jenkins_pipeline/blob/b95cfb61c0719f075ce2f558fb2c78860b2b1c8a/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/95689491/git/blobs/7e7793b824c93691ba8fc41b02f1fa56ccfd6286",
      "jenkins_pipeline": [
        {
          "error": "Invalid option type \"ansiColor\". Valid option types: [authorizationMatrix, buildDiscarder, catchError, checkoutToSubdirectory, disableConcurrentBuilds, disableResume, durabilityHint, gitLabConnection, gitlabBuilds, gitlabCommitStatus, overrideIndexTriggers, retry, script, skipDefaultCheckout, skipStagesAfterUnstable, timeout, timestamps, waitUntil, withContext, withCredentials, withEnv, ws] @ line 6, column 5."
        }
      ]
    },
    {
      "full_repo_name": "SugendhKGanga/Jenkins2.0_k8s-deployment",
      "repo_url": "https://github.com/SugendhKGanga/Jenkins2.0_k8s-deployment",
      "html_url_jenkinsfile": "https://github.com/SugendhKGanga/Jenkins2.0_k8s-deployment/blob/350dc526db0468adc58f5cadebfb25d95f9cbdcc/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/131262122/git/blobs/f8ae5a847f9d65541dba4ddb7f287e17864cab39",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Git clone and setup",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "Check out the code!"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "kubectl cluster-info"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "helm init"
                          }
                        }
                      ]
                    },
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": false,
                            "value": "\"DOCKER_REG is ${DOCKER_REG}\""
                          }
                        }
                      ]
                    },
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": false,
                            "value": "\"HELM_REPO  is ${HELM_REPO}\""
                          }
                        }
                      ]
                    },
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "branch = GIT_BRANCH.replaceAll('/', '-').replaceAll('\\\\*', '-')\n                    ID = \"${IMAGE_NAME}-${DOCKER_TAG}-${branch}\"\n\n                    echo \"Global ID set to ${ID}\""
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Build and tests",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "Building application and Docker image"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": false,
                            "value": "\"${WORKSPACE}/build.sh --build --registry ${DOCKER_REG} --tag ${DOCKER_TAG} --docker_usr ${DOCKER_USR} --docker_psw ${DOCKER_PSW}\""
                          }
                        }
                      ]
                    },
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "Running tests"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": false,
                            "value": "\"[ -z \\\"\\$(docker ps -a | grep ${ID} 2>/dev/null)\\\" ] || docker rm -f ${ID}\""
                          }
                        }
                      ]
                    },
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": false,
                            "value": "\"Starting ${IMAGE_NAME} container\""
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": false,
                            "value": "\"docker run --detach --name ${ID} --rm --publish ${TEST_LOCAL_PORT}:80 ${DOCKER_REG_HUB}/${IMAGE_NAME}:${DOCKER_TAG}\""
                          }
                        }
                      ]
                    },
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "host_ip = sh(returnStdout: true, script: '/sbin/ip route | awk \\'/default/ { print $3 \":${TEST_LOCAL_PORT}\" }\\'')"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Local tests",
              "parallel": [
                {
                  "name": "Curl http_code",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "curlRun",
                          "arguments": [
                            {
                              "isLiteral": false,
                              "value": "\"http://localhost:${TEST_LOCAL_PORT}\""
                            },
                            {
                              "isLiteral": true,
                              "value": "http_code"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "Curl total_time",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "curlRun",
                          "arguments": [
                            {
                              "isLiteral": false,
                              "value": "\"http://localhost:${TEST_LOCAL_PORT}\""
                            },
                            {
                              "isLiteral": true,
                              "value": "total_time"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "Curl size_download",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "curlRun",
                          "arguments": [
                            {
                              "isLiteral": false,
                              "value": "\"http://localhost:${TEST_LOCAL_PORT}\""
                            },
                            {
                              "isLiteral": true,
                              "value": "size_download"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Publish Docker and Helm",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "Stop and remove container"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": false,
                            "value": "\"docker stop ${ID}\""
                          }
                        }
                      ]
                    },
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": false,
                            "value": "\"Pushing ${DOCKER_REG}/${IMAGE_NAME}:${DOCKER_TAG} image to registry\""
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": false,
                            "value": "\"${WORKSPACE}/build.sh --push --registry ${DOCKER_REG} --tag ${DOCKER_TAG} --docker_usr ${DOCKER_USR} --docker_psw ${DOCKER_PSW}\""
                          }
                        }
                      ]
                    },
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "Packing helm chart"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": false,
                            "value": "\"${WORKSPACE}/build.sh --pack_helm --push_helm --helm_repo ${HELM_REPO} --helm_usr ${HELM_USR} --helm_psw ${HELM_PSW}\""
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Deploy to dev",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "namespace = 'development'\n\n                    echo \"Deploying application ${ID} to ${namespace} namespace\"\n                    createNamespace (namespace)\n\n                    // Remove release if exists\n                    helmDelete (namespace, \"${ID}\")\n\n                    // Deploy with helm\n                    echo \"Deploying\"\n                    helmInstall(namespace, \"${ID}\")"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Dev tests",
              "parallel": [
                {
                  "name": "Curl http_code",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "curlTest",
                          "arguments": [
                            {
                              "isLiteral": false,
                              "value": "${namespace}"
                            },
                            {
                              "isLiteral": true,
                              "value": "http_code"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "Curl total_time",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "curlTest",
                          "arguments": [
                            {
                              "isLiteral": false,
                              "value": "${namespace}"
                            },
                            {
                              "isLiteral": true,
                              "value": "time_total"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "Curl size_download",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "curlTest",
                          "arguments": [
                            {
                              "isLiteral": false,
                              "value": "${namespace}"
                            },
                            {
                              "isLiteral": true,
                              "value": "size_download"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Cleanup dev",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "helmDelete (namespace, \"${ID}\")"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Deploy to staging",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "namespace = 'staging'\n\n                    echo \"Deploying application ${IMAGE_NAME}:${DOCKER_TAG} to ${namespace} namespace\"\n                    createNamespace (namespace)\n\n                    // Remove release if exists\n                    helmDelete (namespace, \"${ID}\")\n\n                    // Deploy with helm\n                    echo \"Deploying\"\n                    helmInstall (namespace, \"${ID}\")"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Staging tests",
              "parallel": [
                {
                  "name": "Curl http_code",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "curlTest",
                          "arguments": [
                            {
                              "isLiteral": false,
                              "value": "${namespace}"
                            },
                            {
                              "isLiteral": true,
                              "value": "http_code"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "Curl total_time",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "curlTest",
                          "arguments": [
                            {
                              "isLiteral": false,
                              "value": "${namespace}"
                            },
                            {
                              "isLiteral": true,
                              "value": "time_total"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "Curl size_download",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "curlTest",
                          "arguments": [
                            {
                              "isLiteral": false,
                              "value": "${namespace}"
                            },
                            {
                              "isLiteral": true,
                              "value": "size_download"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Cleanup staging",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "helmDelete (namespace, \"${ID}\")"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Go for Production?",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "milestone",
                      "arguments": [
                        {
                          "key": "ordinal",
                          "value": {
                            "isLiteral": true,
                            "value": 1
                          }
                        }
                      ]
                    },
                    {
                      "name": "input",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "Proceed and deploy to Production?"
                          }
                        }
                      ]
                    },
                    {
                      "name": "milestone",
                      "arguments": [
                        {
                          "key": "ordinal",
                          "value": {
                            "isLiteral": true,
                            "value": 2
                          }
                        }
                      ]
                    },
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "DEPLOY_PROD = true"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "allOf",
                    "children": [
                      {
                        "name": "environment",
                        "arguments": [
                          {
                            "key": "name",
                            "value": {
                              "isLiteral": true,
                              "value": "GIT_BRANCH"
                            }
                          },
                          {
                            "key": "value",
                            "value": {
                              "isLiteral": true,
                              "value": "master"
                            }
                          }
                        ]
                      },
                      {
                        "name": "environment",
                        "arguments": [
                          {
                            "key": "name",
                            "value": {
                              "isLiteral": true,
                              "value": "DEPLOY_TO_PROD"
                            }
                          },
                          {
                            "key": "value",
                            "value": {
                              "isLiteral": true,
                              "value": "false"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            },
            {
              "name": "Deploy to Production",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "DEPLOY_PROD = true\n                    namespace = 'production'\n\n                    echo \"Deploying application ${IMAGE_NAME}:${DOCKER_TAG} to ${namespace} namespace\"\n                    createNamespace (namespace)\n\n                    // Deploy with helm\n                    echo \"Deploying\"\n                    helmInstall (namespace, \"${ID}\")"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "anyOf",
                    "children": [
                      {
                        "name": "expression",
                        "arguments": [
                          {
                            "key": "scriptBlock",
                            "value": {
                              "isLiteral": true,
                              "value": "DEPLOY_PROD == true"
                            }
                          }
                        ]
                      },
                      {
                        "name": "environment",
                        "arguments": [
                          {
                            "key": "name",
                            "value": {
                              "isLiteral": true,
                              "value": "DEPLOY_TO_PROD"
                            }
                          },
                          {
                            "key": "value",
                            "value": {
                              "isLiteral": true,
                              "value": "true"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            },
            {
              "name": "Production tests",
              "parallel": [
                {
                  "name": "Curl http_code",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "curlTest",
                          "arguments": [
                            {
                              "isLiteral": false,
                              "value": "${namespace}"
                            },
                            {
                              "isLiteral": true,
                              "value": "http_code"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "Curl total_time",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "curlTest",
                          "arguments": [
                            {
                              "isLiteral": false,
                              "value": "${namespace}"
                            },
                            {
                              "isLiteral": true,
                              "value": "time_total"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "Curl size_download",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "curlTest",
                          "arguments": [
                            {
                              "isLiteral": false,
                              "value": "${namespace}"
                            },
                            {
                              "isLiteral": true,
                              "value": "size_download"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "expression",
                    "arguments": [
                      {
                        "key": "scriptBlock",
                        "value": {
                          "isLiteral": true,
                          "value": "DEPLOY_PROD == true"
                        }
                      }
                    ]
                  }
                ]
              }
            }
          ],
          "environment": [
            {
              "key": "IMAGE_NAME",
              "value": {
                "isLiteral": true,
                "value": "acme"
              }
            },
            {
              "key": "TEST_LOCAL_PORT",
              "value": {
                "isLiteral": true,
                "value": 8817
              }
            },
            {
              "key": "DEPLOY_PROD",
              "value": {
                "isLiteral": true,
                "value": false
              }
            },
            {
              "key": "PARAMETERS_FILE",
              "value": {
                "isLiteral": false,
                "value": "\"${JENKINS_HOME}/parameters.groovy\""
              }
            }
          ],
          "agent": {
            "type": "node",
            "arguments": [
              {
                "key": "label",
                "value": {
                  "isLiteral": true,
                  "value": "master"
                }
              }
            ]
          },
          "options": {
            "options": [
              {
                "name": "timeout",
                "arguments": [
                  {
                    "key": "time",
                    "value": {
                      "isLiteral": true,
                      "value": 60
                    }
                  },
                  {
                    "key": "unit",
                    "value": {
                      "isLiteral": true,
                      "value": "MINUTES"
                    }
                  }
                ]
              }
            ]
          },
          "parameters": {
            "parameters": [
              {
                "name": "string",
                "arguments": [
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "GIT_BRANCH"
                    }
                  },
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": true,
                      "value": "master"
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "Git branch to build"
                    }
                  }
                ]
              },
              {
                "name": "booleanParam",
                "arguments": [
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "DEPLOY_TO_PROD"
                    }
                  },
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": true,
                      "value": false
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "If build and tests are good, proceed and deploy to production without manual approval"
                    }
                  }
                ]
              },
              {
                "name": "string",
                "arguments": [
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "DOCKER_REG"
                    }
                  },
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": true,
                      "value": "Docker-Hub"
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "Docker registry"
                    }
                  }
                ]
              },
              {
                "name": "string",
                "arguments": [
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "DOCKER_REG_HUB"
                    }
                  },
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": true,
                      "value": "sugendh"
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "Docker registry_hub"
                    }
                  }
                ]
              },
              {
                "name": "string",
                "arguments": [
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "DOCKER_TAG"
                    }
                  },
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": true,
                      "value": "latest"
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "Docker tag"
                    }
                  }
                ]
              },
              {
                "name": "string",
                "arguments": [
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "DOCKER_USR"
                    }
                  },
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": true,
                      "value": "sugendh"
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "Your helm repository user"
                    }
                  }
                ]
              },
              {
                "name": "string",
                "arguments": [
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "DOCKER_PSW"
                    }
                  },
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": true,
                      "value": "Password123"
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "Your helm repository password"
                    }
                  }
                ]
              },
              {
                "name": "string",
                "arguments": [
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "IMG_PULL_SECRET"
                    }
                  },
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": true,
                      "value": "docker-reg-secret"
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "The Kubernetes secret for the Docker registry (imagePullSecrets)"
                    }
                  }
                ]
              },
              {
                "name": "string",
                "arguments": [
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "HELM_REPO"
                    }
                  },
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": true,
                      "value": "http://35.224.229.155/artifactory/helm-local"
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "Your helm repository"
                    }
                  }
                ]
              },
              {
                "name": "string",
                "arguments": [
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "HELM_USR"
                    }
                  },
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": true,
                      "value": "admin"
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "Your helm repository user"
                    }
                  }
                ]
              },
              {
                "name": "string",
                "arguments": [
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "HELM_PSW"
                    }
                  },
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": true,
                      "value": "AP8j5ZZuUam1u3zX"
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "Your helm repository password"
                    }
                  }
                ]
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "ingi-git/jenkins",
      "repo_url": "https://github.com/ingi-git/jenkins",
      "html_url_jenkinsfile": "https://github.com/ingi-git/jenkins/blob/2feefe3a2b40d3cb8cb10e9c3f6022c12ff4a5fa/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/124953801/git/blobs/a400a5d78d8fc08573b0b835085e3b12301baa68",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "ps1",
              "parallel": [
                {
                  "name": "ps1",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "powershell",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "one.ps1"
                              }
                            },
                            {
                              "key": "encoding",
                              "value": {
                                "isLiteral": true,
                                "value": "role1"
                              }
                            },
                            {
                              "key": "returnStatus",
                              "value": {
                                "isLiteral": true,
                                "value": true
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "bat",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "bat",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "dir"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Azure Login",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "withCredentials",
                      "arguments": [
                        {
                          "key": "bindings",
                          "value": {
                            "isLiteral": false,
                            "value": "${[[\n                                                              $class: 'AzureCredentialsBinding',\n                                                              credentialsId: '6f0fe5ce-2b27-4d26-8f35-0fa1d1dca208',\n                                                              clientIdVariable: 'AZURE_CLIENT_ID',\n                                                              clientSecretVariable: 'AZURE_CLIENT_SECRET',\n                                                              tenantIdVariable: 'AZURE_TENANT_ID',\n                                                              subscriptionIdVariable: 'AZURE_SUBSCRIPTION_ID'\n                                                          ]]}"
                          }
                        }
                      ],
                      "children": [
                        {
                          "name": "bat",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET --tenant $AZURE_TENANT_ID"
                              }
                            }
                          ]
                        },
                        {
                          "name": "bat",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "az account set -s $AZURE_SUBSCRIPTION_ID"
                              }
                            }
                          ]
                        },
                        {
                          "name": "bat",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "az account show"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Create VMs",
              "parallel": [
                {
                  "name": "Create VM in RG 01",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "bat",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "az group create --name $RG01 --location $REGION"
                              }
                            }
                          ]
                        },
                        {
                          "name": "bat",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "az vm create --resource-group $RG01 \\\n    --name mytest-VM \\\n    --image OpenLogic:CentOS:7.2:latest \\\n    --size Standard_D1_v2 \\\n    --admin-password $VM_PASSWORD \\\n    --admin-username $VM_USER"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "Create VM in RG 02",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "bat",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "az group create --name $RG02 --location $REGION"
                              }
                            }
                          ]
                        },
                        {
                          "name": "bat",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "az vm create --resource-group $RG02 \\\n    --name myother-VM \\\n    --image OpenLogic:CentOS:7.2:latest \\\n    --size Standard_D1_v2 \\\n    --admin-password $VM_PASSWORD \\\n    --admin-username $VM_USER \\\n    --custom-data cloud-init-nginx.txt"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Run scripts on VM01",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "bat",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "az vm run-command invoke --resource-group $RG01 --name mytest-VM --command-id 'RunShellScript' --scripts \"curl -sSL https://get.docker.com/ | sh && rpm --import https://get.docker.com/gpg && systemctl enable docker.service && systemctl start docker.service\""
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Delete RGs",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "input",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "ok to clean up"
                          }
                        }
                      ]
                    },
                    {
                      "name": "bat",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "az group delete --name $RG01 --yes"
                          }
                        }
                      ]
                    },
                    {
                      "name": "bat",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "az group delete --name $RG02 --yes"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "environment": [
            {
              "key": "REGION",
              "value": {
                "isLiteral": true,
                "value": "northeurope"
              }
            },
            {
              "key": "RG01",
              "value": {
                "isLiteral": true,
                "value": "IO-NEU-TEST-RG-01"
              }
            },
            {
              "key": "RG02",
              "value": {
                "isLiteral": true,
                "value": "IO-NEU-TEST-RG-02"
              }
            },
            {
              "key": "VM_USER",
              "value": {
                "isLiteral": true,
                "value": "azureadmin"
              }
            },
            {
              "key": "VM_PASSWORD",
              "value": {
                "isLiteral": true,
                "value": "Puur44l$!u1"
              }
            }
          ],
          "agent": {
            "type": "any"
          }
        }
      }
    },
    {
      "full_repo_name": "jaemnkm/blockchain",
      "repo_url": "https://github.com/jaemnkm/blockchain",
      "html_url_jenkinsfile": "https://github.com/jaemnkm/blockchain/blob/223cfa80db7a67da2bad85a0a646762c24ba4b08/hyperledger_project/framework/Hyperledger_indy-node/Jenkinsfile.ci",
      "api_url_jenkinsfile": "https://api.github.com/repositories/118075022/git/blobs/b5edb3d4e99637697fded8a2b49cb1d8200e9f84",
      "jenkins_pipeline": [
        {
          "error": "Jenkinsfile content '#!/usr/bin/env groovy\n\n/*\n * This Jenkinsfile is intended to run on https://ci.evernym.com and may fail anywhere else.\n *\n * Environment requirements:\n *  - environment variable:\n *      - INDY_AGENT_LINUX_DOCKER_LABEL: label for agents with ability\n *          to run linux docker containers\n *      - (optional) INDY_AGENT_WINDOWS_LABEL: label for windows agents\n *  - agents:\n *      - linux:\n *          - docker\n *      - windows:\n *          - python3.5 + virtualenv\n *          - cygwin\n */\n\nname = 'indy-node'\n\ndef config = [\n    codeValidation: true,\n    runTests: true,\n    failFast: false,\n    sendNotif: true\n]\n\n\n// TODO enable windows\ndef labels = [\n    linux: env.INDY_AGENT_LINUX_DOCKER_LABEL ?: 'linux'\n]\n\nif (env.INDY_AGENT_WINDOWS_LABEL) {\n    labels[windows] = env.INDY_AGENT_WINDOWS_LABEL\n}\n\ndef wsCleanup() {\n    try {\n        cleanWs()\n    } catch (NoSuchMethodError ex) {\n        echo \"WARNING: failed to clean the workspace, seems ws-cleanup plugin is not installed\"\n    }\n}\n\ndef buildDocker(imageName, dockerfile) {\n    def uid = sh(returnStdout: true, script: 'id -u').trim()\n    return docker.build(\"$imageName\", \"--build-arg uid=$uid -f $dockerfile\")\n}\n\n\ndef install(options=[:]) {\n    options.pip = options.pip ?: 'pip'\n    options.isVEnv = options.isVEnv ?: false\n    options.deps = options.deps ?: []\n\n    for (def dep : options.deps) {\n        sh \"$options.pip install \" + (options.isVEnv ? \"-U\" : \"\") + \" $dep\"\n    }\n\n    // TODO check that `--ignore-installed` case works when windows is enabled\n    // (makes sense only for virtual envs with `--system-site-packages`)\n    sh \"$options.pip install \" + (options.isVEnv ? \"--ignore-installed\" : \"\") + \" .[tests]\"\n}\n\n\ndef withTestEnv(body) {\n    echo 'Test: Checkout csm'\n    checkout scm\n\n    if (isUnix()) {\n        echo 'Test: Build docker image'\n\n        buildDocker(\"hyperledger/indy-node-ci\", \"ci/ubuntu.dockerfile ci\").inside {\n            echo 'Test: Install dependencies'\n            install()\n            body.call('python')\n        }\n    } else { // windows expected\n        echo 'Test: Build virtualenv'\n        def virtualEnvDir = \".venv\"\n        sh \"virtualenv --system-site-packages $virtualEnvDir\"\n\n        echo 'Test: Install dependencies'\n        install(pip: \"$virtualEnvDir/Scripts/pip\", isVenv: true)\n        body.call(\"$virtualEnvDir/Scripts/python\")\n    }\n}\n\n\ndef test(options=[:]) {\n    options.resFile = options.resFile ?: 'test-result.txt'\n    options.testDir = options.testDir ?: '.'\n    options.python = options.python ?: 'python'\n    options.useRunner = options.useRunner ?: false\n    options.testOnlySlice = options.testOnlySlice ?: '1/1'\n\n    try {\n        if (options.useRunner) {\n            sh \"PYTHONASYNCIODEBUG='0' $options.python runner.py --pytest \\\"$options.python -m pytest\\\" --dir $options.testDir --output \\\"$options.resFile\\\" --test-only-slice \\\"$options.testOnlySlice\\\"\"\n        } else {\n            sh \"$options.python -m pytest --junitxml=$options.resFile $options.testDir\"\n        }\n    }\n    finally {\n        try {\n            sh \"ls -la $options.resFile\"\n        } catch (Exception ex) {\n            // pass\n        }\n\n        if (options.useRunner) {\n            archiveArtifacts allowEmptyArchive: true, artifacts: \"$options.resFile\"\n        } else {\n            junit \"$options.resFile\"\n        }\n    }\n}\n\n\ndef staticCodeValidation() {\n    try {\n        echo 'Static code validation'\n        checkout scm\n\n        buildDocker('code-validation', 'ci/code-validation.dockerfile ci').inside {\n            sh \"python3 -m flake8\"\n        }\n    }\n    finally {\n        echo 'Static code validation: Cleanup'\n        wsCleanup()\n    }\n}\n\n\ndef tests = [\n    common: { python ->\n        test(\n            resFile: \"test-result-common.${NODE_NAME}.xml\",\n            testDir: 'indy_common',\n            python: python\n        )\n    },\n    client: { python ->\n        test(\n            resFile: \"test-result-client.${NODE_NAME}.txt\",\n            testDir: 'indy_client',\n            python: python,\n            useRunner: true\n        )\n    },\n    node: { python ->\n        test(\n            resFile: \"test-result-node.${NODE_NAME}.txt\",\n            testDir: 'indy_node',\n            python: python,\n            useRunner: true\n        )\n    },\n].collect {k, v -> [k, v]}\n\n\ndef builds = [:]\ndef _labels = labels.collect {k, v -> v}\nfor (i = 0; i < _labels.size(); i++) {\n    def label = _labels[i]\n    def descr = \"${label}Test\"\n\n    for(j = 0; j < tests.size(); j++) {\n        def part = tests[j][0]\n        def testFn = tests[j][1]\n        def currDescr = \"${descr}-${part}\"\n        builds[(currDescr)] = {\n            stage(currDescr) {\n                node(label) {\n                    try {\n                        withTestEnv() { python ->\n                            echo 'Test'\n                            testFn(python)\n                        }\n                    }\n                    finally {\n                        echo 'Cleanup'\n                        wsCleanup()\n                    }\n                }\n            }\n        }\n    }\n}\n\n// PIPELINE\n\ntry {\n    timeout(60) {\n        stage('Static code validation') {\n            if (config.codeValidation) {\n                node(labels.linux) {\n                    staticCodeValidation()\n                }\n            }\n        }\n        stage('Build / Test') {\n            if (config.runTests) {\n                builds.failFast = config.failFast\n                parallel builds\n            }\n        }\n        currentBuild.result = 'SUCCESS'\n    }\n} catch (Exception err) {\n    println(err.toString())\n    currentBuild.result = 'FAILURE'\n} finally {\n    stage('Build result notification') {\n        if (config.sendNotif) {\n            def emailMessage = [\n                body: '$DEFAULT_CONTENT',\n                replyTo: '$DEFAULT_REPLYTO',\n                subject: '$DEFAULT_SUBJECT',\n                recipientProviders: [[$class: 'DevelopersRecipientProvider'], [$class: 'RequesterRecipientProvider']]\n            ]\n            emailext emailMessage\n        }\n    }\n}\n' did not contain the 'pipeline' step"
        }
      ]
    },
    {
      "full_repo_name": "xebialabs/license-data",
      "repo_url": "https://github.com/xebialabs/license-data",
      "html_url_jenkinsfile": "https://github.com/xebialabs/license-data/blob/de851c56c6b217d045c8062ca1dbcee0219dd193/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/29864364/git/blobs/731ece499b05ed9e19dd0c9407ff26f757ebf600",
      "jenkins_pipeline": [
        {
          "error": [
            "Tool type \"jdk\" does not have an install of \"JDK 8u60\" configured - did you mean \"null\"? @ line 41, column 13.",
            "Invalid option type \"ansiColor\". Valid option types: [authorizationMatrix, buildDiscarder, catchError, checkoutToSubdirectory, disableConcurrentBuilds, disableResume, durabilityHint, gitLabConnection, gitlabBuilds, gitlabCommitStatus, overrideIndexTriggers, retry, script, skipDefaultCheckout, skipStagesAfterUnstable, timeout, timestamps, waitUntil, withContext, withCredentials, withEnv, ws] @ line 25, column 5."
          ]
        }
      ]
    },
    {
      "full_repo_name": "wso2/testgrid",
      "repo_url": "https://github.com/wso2/testgrid",
      "html_url_jenkinsfile": "https://github.com/wso2/testgrid/blob/dbced56c2b5b5d0ac914cf6f7950c2526f209b74/jenkins/pipelines/test-jobs/wso2apim-2.1.0-LTS/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/108240819/git/blobs/4e17f64c8a78205e10cbeab0e63215c5aca66432",
      "jenkins_pipeline": [
        {
          "error": "Tool type \"jdk\" does not have an install of \"jdk8\" configured - did you mean \"null\"? @ line 41, column 13."
        }
      ]
    }
  ]
}