{
  "research_question_3": "What are the most and the least frequent operations in pipeline stages?",
  "counts_of_operation_stages": {
    "initialize": 1,
    "build develop apk": 1,
    "build beta apk": 1,
    "build prod apk": 1,
    "upload": 1,
    "report": 1,
    "check source": 1,
    "validate and tokenize": 1,
    "copy to temp": 1,
    "deploy to api cloud": 1,
    "test": 2,
    "test - flaky": 1,
    "deploy to stage": 1,
    "scm: code update": 1,
    "docker build": 1,
    "run test": 1,
    "init": 1,
    "kangaroo-common": 1,
    "kangaroo-server-authz": 1,
    "integration": 1,
    "build with unit testing": 10,
    "integration tests": 10,
    "sonar scan execution": 7,
    "sonar scan result check": 7,
    "development deploy approval and deployment": 8,
    "dev sanity check": 7,
    "release and publish artifact": 8,
    "deploy to acceptance": 8,
    "acc e2e tests": 8,
    "build": 1,
    "dockerize": 1,
    "deploy to ec2": 1,
    "sonar check": 2,
    "itt deploy approval and deployment": 2,
    "create build": 1,
    "deploy": 1,
    "preparation": 1,
    "clean build": 1,
    "build release": 1,
    "sonarqube analysis": 1,
    "sonarqube quality gate": 1,
    "unit test report": 1,
    "code coverage report": 1,
    "maven nexus deploy": 1,
    "jira update issues": 1,
    "security dependency check": 1,
    "security dependency publisher": 1,
    "aws code deploy": 1,
    "ensure env and branch": 1,
    "ensure cf_version and ami_id when refresh_only is false": 1,
    "notify hipchat": 1,
    "install requirements": 1,
    "set private key file": 1,
    "checkout": 1,
    "create app server": 1,
    "build app server": 1,
    "deploy/refresh code": 1,
    "set name and description": 1,
    "delete jaeger": 1,
    "delete old job": 1,
    "cleanup, checkout, build": 1,
    "deploy cassandra": 1,
    "deploy elasticsearch": 1,
    "deploy jaeger with cassandra": 1,
    "deploy jaeger with elasticsearch": 1,
    "wait for jaeger deployment": 1,
    "run tests": 1,
    "delete jaeger at end": 1,
    "delete job at end": 1,
    "cleanup pods": 1
  },
  "project_details": [
    {
      "full_repo_name": "flaviodev/delta-rent-a-car",
      "repo_url": "https://github.com/flaviodev/delta-rent-a-car",
      "html_url_jenkinsfile": "https://github.com/flaviodev/delta-rent-a-car/blob/0acb102301c91e7be0072b52214f750ce8859b09/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/101085413/git/blobs/650439897c0478b09aa38e5e5cb2d005d5e30be2",
      "jenkins_pipeline": [
        {
          "error": [
            "Tool type \"maven\" does not have an install of \"mvn3\" configured - did you mean \"Jenkins_maven\"? @ line 5, column 15.",
            "Tool type \"jdk\" does not have an install of \"jdk8\" configured - did you mean \"null\"? @ line 6, column 13."
          ]
        }
      ]
    },
    {
      "full_repo_name": "fidalcastro/pipelinedemo",
      "repo_url": "https://github.com/fidalcastro/pipelinedemo",
      "html_url_jenkinsfile": "https://github.com/fidalcastro/pipelinedemo/blob/10acd4d02c2ec449a76862e30e1ab84c5e03fa79/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/52977577/git/blobs/56460f276bef8502840d8ca448a907d91fb7b36f",
      "jenkins_pipeline": [
        {
          "error": "Tool type \"ant\" does not have an install of \"ant1.9\" configured - did you mean \"null\"? @ line 5, column 9."
        }
      ]
    },
    {
      "full_repo_name": "TomCzHen/jenkins-android-sample",
      "repo_url": "https://github.com/TomCzHen/jenkins-android-sample",
      "html_url_jenkinsfile": "https://github.com/TomCzHen/jenkins-android-sample/blob/d6e7eb107d9f9ee21285831d9c9db40abc34675d/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/107942197/git/blobs/a45bee6ae8b8f8c2f60b488cf9b5b1c5204d8100",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Initialize",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "withCredentials",
                      "arguments": {
                        "isLiteral": false,
                        "value": "${[\n                        string(credentialsId: 'BETA_SECRET_KEY', variable: 'SECRET_KEY'),\n                        string(credentialsId: 'PROD_SECRET_KEY', variable: 'SECRET_KEY')\n                ]}"
                      },
                      "children": []
                    }
                  ]
                }
              ],
              "post": {
                "conditions": [
                  {
                    "condition": "failure",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "echo",
                          "arguments": [
                            {
                              "key": "message",
                              "value": {
                                "isLiteral": true,
                                "value": "Check Credentials Failure, Please Check Credentials Config!"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  },
                  {
                    "condition": "success",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "echo",
                          "arguments": [
                            {
                              "key": "message",
                              "value": {
                                "isLiteral": true,
                                "value": "Check Credentials Success!"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  }
                ]
              }
            },
            {
              "name": "Build Develop APK",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "withCredentials",
                      "arguments": {
                        "isLiteral": false,
                        "value": "${[string(credentialsId: 'BETA_SECRET_KEY', variable: 'SECRET_KEY')]}"
                      },
                      "children": [
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "./gradlew clean assembleDevDebug"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "branch",
                    "arguments": {
                      "isLiteral": true,
                      "value": "master"
                    }
                  }
                ]
              },
              "post": {
                "conditions": [
                  {
                    "condition": "failure",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "echo",
                          "arguments": [
                            {
                              "key": "message",
                              "value": {
                                "isLiteral": true,
                                "value": "Build Develop APK Failure!"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  },
                  {
                    "condition": "success",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "echo",
                          "arguments": [
                            {
                              "key": "message",
                              "value": {
                                "isLiteral": true,
                                "value": "Build Develop APK Success!"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  }
                ]
              }
            },
            {
              "name": "Build Beta APK",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "withCredentials",
                      "arguments": {
                        "isLiteral": false,
                        "value": "${[string(credentialsId: 'BETA_SECRET_KEY', variable: 'SECRET_KEY')]}"
                      },
                      "children": [
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "./gradlew clean assembleBetaDebug"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "branch",
                    "arguments": {
                      "isLiteral": true,
                      "value": "beta"
                    }
                  }
                ]
              },
              "post": {
                "conditions": [
                  {
                    "condition": "failure",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "echo",
                          "arguments": [
                            {
                              "key": "message",
                              "value": {
                                "isLiteral": true,
                                "value": "Build Beta APK Failure!"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  },
                  {
                    "condition": "success",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "echo",
                          "arguments": [
                            {
                              "key": "message",
                              "value": {
                                "isLiteral": true,
                                "value": "Build Beta APK Success!"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  }
                ]
              }
            },
            {
              "name": "Build Prod APK",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "withCredentials",
                      "arguments": {
                        "isLiteral": false,
                        "value": "${[string(credentialsId: 'PROD_SECRET_KEY', variable: 'SECRET_KEY')]}"
                      },
                      "children": [
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "./gradlew clean assembleProd"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "branch",
                    "arguments": {
                      "isLiteral": true,
                      "value": "prod"
                    }
                  }
                ]
              },
              "post": {
                "conditions": [
                  {
                    "condition": "failure",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "echo",
                          "arguments": [
                            {
                              "key": "message",
                              "value": {
                                "isLiteral": true,
                                "value": "Build Prod APK Failure!"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  },
                  {
                    "condition": "success",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "signAndroidApks",
                          "arguments": [
                            {
                              "key": "keyStoreId",
                              "value": {
                                "isLiteral": true,
                                "value": "ANDROID_SIGN_KEY_STORE"
                              }
                            },
                            {
                              "key": "keyAlias",
                              "value": {
                                "isLiteral": true,
                                "value": "tomczhen"
                              }
                            },
                            {
                              "key": "apksToSign",
                              "value": {
                                "isLiteral": true,
                                "value": "**/*-prod-release-unsigned.apk"
                              }
                            },
                            {
                              "key": "archiveSignedApks",
                              "value": {
                                "isLiteral": true,
                                "value": false
                              }
                            },
                            {
                              "key": "archiveUnsignedApks",
                              "value": {
                                "isLiteral": true,
                                "value": false
                              }
                            }
                          ]
                        }
                      ]
                    }
                  }
                ]
              }
            },
            {
              "name": "Upload",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "archiveArtifacts",
                      "arguments": [
                        {
                          "key": "artifacts",
                          "value": {
                            "isLiteral": true,
                            "value": "app/build/outputs/apk/**/*.apk"
                          }
                        },
                        {
                          "key": "fingerprint",
                          "value": {
                            "isLiteral": true,
                            "value": true
                          }
                        },
                        {
                          "key": "onlyIfSuccessful",
                          "value": {
                            "isLiteral": true,
                            "value": true
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "post": {
                "conditions": [
                  {
                    "condition": "failure",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "echo",
                          "arguments": [
                            {
                              "key": "message",
                              "value": {
                                "isLiteral": true,
                                "value": "Archive Failure!"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  },
                  {
                    "condition": "success",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "echo",
                          "arguments": [
                            {
                              "key": "message",
                              "value": {
                                "isLiteral": true,
                                "value": "Archive Success!"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  }
                ]
              }
            },
            {
              "name": "Report",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": false,
                            "value": "${getChangeString()}"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "agent": {
            "type": "label",
            "argument": {
              "isLiteral": true,
              "value": "master"
            }
          },
          "options": {
            "options": [
              {
                "name": "buildDiscarder",
                "arguments": [
                  {
                    "name": "logRotator",
                    "arguments": [
                      {
                        "key": "numToKeepStr",
                        "value": {
                          "isLiteral": true,
                          "value": "30"
                        }
                      },
                      {
                        "key": "daysToKeepStr",
                        "value": {
                          "isLiteral": true,
                          "value": "7"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "name": "timestamps",
                "arguments": []
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "AFactor/API-yamls-customers",
      "repo_url": "https://github.com/AFactor/API-yamls-customers",
      "html_url_jenkinsfile": "https://github.com/AFactor/API-yamls-customers/blob/a1b619592beef2b1af445300d671db358e5e463e/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/119030778/git/blobs/3c713a418040a933a559d9a98fc574b1784da93e",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Check Source",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "deleteDir",
                      "arguments": []
                    },
                    {
                      "name": "checkout",
                      "arguments": [
                        {
                          "key": "scm",
                          "value": {
                            "isLiteral": false,
                            "value": "[$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'PathRestriction', excludedRegions: '', includedRegions: 'products/.*']], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'jenkins-generated-ssh-key', name: 'customergit', url: 'git@github.com:AFactor/API-yamls-customers.git']]]"
                          }
                        }
                      ]
                    },
                    {
                      "name": "dir",
                      "arguments": {
                        "isLiteral": true,
                        "value": "core"
                      },
                      "children": [
                        {
                          "name": "git",
                          "arguments": [
                            {
                              "key": "url",
                              "value": {
                                "isLiteral": true,
                                "value": "git@github.com:AFactor/api-core.git"
                              }
                            },
                            {
                              "key": "credentialsId",
                              "value": {
                                "isLiteral": true,
                                "value": "jenkins-generated-ssh-key"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Validate and Tokenize",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "returnStdout",
                          "value": {
                            "isLiteral": true,
                            "value": true
                          }
                        },
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": false,
                            "value": "\"\"\" core/Scripts/validatetokenize.sh ${getChangeString()} \"\"\""
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "expression",
                    "arguments": [
                      {
                        "key": "scriptBlock",
                        "value": {
                          "isLiteral": true,
                          "value": "return  getChangeString() != \"\""
                        }
                      }
                    ]
                  }
                ]
              }
            },
            {
              "name": "Copy to temp",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "returnStdout",
                          "value": {
                            "isLiteral": true,
                            "value": true
                          }
                        },
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": false,
                            "value": "\"\"\" core/Scripts/copy.sh ${getChangeString()} \"\"\""
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "expression",
                    "arguments": [
                      {
                        "key": "scriptBlock",
                        "value": {
                          "isLiteral": true,
                          "value": "return  getChangeString() != \"\""
                        }
                      }
                    ]
                  }
                ]
              }
            },
            {
              "name": "Deploy to API Cloud",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "configFileProvider",
                      "arguments": {
                        "isLiteral": false,
                        "value": "${[configFile(fileId: '14ce0658-5942-4980-a3cf-7bef5e1bd2c9', variable: 'ciConfig')]}"
                      },
                      "children": [
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "returnStdout",
                              "value": {
                                "isLiteral": true,
                                "value": true
                              }
                            },
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "core/Scripts/deploy.sh"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "expression",
                    "arguments": [
                      {
                        "key": "scriptBlock",
                        "value": {
                          "isLiteral": true,
                          "value": "return  getChangeString() != \"\""
                        }
                      }
                    ]
                  }
                ]
              }
            }
          ],
          "environment": [
            {
              "key": "fileNames",
              "value": {
                "isLiteral": true,
                "value": "none"
              }
            }
          ],
          "agent": {
            "type": "any"
          },
          "options": {
            "options": [
              {
                "name": "skipDefaultCheckout",
                "arguments": [
                  {
                    "isLiteral": true,
                    "value": true
                  }
                ]
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "Calredman/sonar-test",
      "repo_url": "https://github.com/Calredman/sonar-test",
      "html_url_jenkinsfile": "https://github.com/Calredman/sonar-test/blob/eb5c7f4b43cb8dd615c45994cd51f87b9d6506f5/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/131998661/git/blobs/0ee95a07eff80ebb8d8848f05900e7809587b699",
      "jenkins_pipeline": [
        {
          "error": [
            "Tool type \"maven\" does not have an install of \"Default Maven\" configured - did you mean \"Jenkins_maven\"? @ line 13, column 15.",
            "Tool type \"jdk\" does not have an install of \"DefaultJDK\" configured - did you mean \"null\"? @ line 14, column 13."
          ]
        }
      ]
    },
    {
      "full_repo_name": "scoheb/declarative-ci",
      "repo_url": "https://github.com/scoheb/declarative-ci",
      "html_url_jenkinsfile": "https://github.com/scoheb/declarative-ci/blob/45dd263b2a913de6f94ce8f4b967b0f2ed6348d1/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/103441317/git/blobs/221ab85a1012aac52bbf8bf5f6662e8af2dece81",
      "jenkins_pipeline": [
        {
          "error": "Invalid agent type \"kubernetes\" specified. Must be one of [docker, dockerfile, label, any, none] @ line 25, column 7."
        }
      ]
    },
    {
      "full_repo_name": "mytran/test",
      "repo_url": "https://github.com/mytran/test",
      "html_url_jenkinsfile": "https://github.com/mytran/test/blob/5baca10608f9aed4442aff046ab69a89e86128a5/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/131998182/git/blobs/d42134873c652646d9053d8fcbe8249b0f534771",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Test",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "milestone",
                      "arguments": [
                        {
                          "key": "ordinal",
                          "value": {
                            "isLiteral": true,
                            "value": null
                          }
                        }
                      ]
                    },
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": false,
                            "value": "\"Running ${env.BUILD_ID} on ${env.JENKINS_URL}\""
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "env"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Test - Flaky",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "milestone",
                      "arguments": [
                        {
                          "key": "ordinal",
                          "value": {
                            "isLiteral": true,
                            "value": null
                          }
                        }
                      ]
                    },
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": false,
                            "value": "\"Running ${env.BUILD_ID} on ${env.JENKINS_URL}\""
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "test -f /tmp"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Deploy to Stage",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "milestone",
                      "arguments": [
                        {
                          "key": "ordinal",
                          "value": {
                            "isLiteral": true,
                            "value": null
                          }
                        }
                      ]
                    },
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "Building and deploying to stage & test tier."
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "branch",
                    "arguments": {
                      "isLiteral": true,
                      "value": "master"
                    }
                  }
                ]
              }
            }
          ],
          "post": {
            "conditions": [
              {
                "condition": "always",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "properties([[$class: \"GithubProjectProperty\",\n                projectUrlStr: \"https://github.com/mytran/test\"]])"
                          }
                        }
                      ]
                    },
                    {
                      "name": "step",
                      "arguments": [
                        {
                          "key": "delegate",
                          "value": {
                            "isLiteral": false,
                            "value": "[$class: \"GitHubIssueNotifier\",\n                issueAppend: true,\n                issueLabel: \"flag:unit-test-fail\",\n                issueReopen: true,\n                issueTitle: \"$JOB_NAME $BUILD_DISPLAY_NAME failed\"]"
                          }
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "condition": "failure",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "Build failed"
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          },
          "agent": {
            "type": "any"
          }
        }
      }
    },
    {
      "full_repo_name": "eliranshani/selenium-docker-allure",
      "repo_url": "https://github.com/eliranshani/selenium-docker-allure",
      "html_url_jenkinsfile": "https://github.com/eliranshani/selenium-docker-allure/blob/60505f53cb71ab48f97fa039cbab45d73979028b/pipeline/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/97052743/git/blobs/09d01580b2d774f6201476f962cc4320e0f6462e",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "SCM: code update",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "checkout",
                      "arguments": [
                        {
                          "key": "scm",
                          "value": {
                            "isLiteral": false,
                            "value": "[\n                                $class: 'GitSCM', branches: [[name: 'master']],\n                                userRemoteConfigs: [[url: 'https://github.com/eliranshani/selenium-docker-allure.git']]\n                        ]"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "mkdir -p ./blazedemo_app/allure-results"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "rm -rf ./blazedemo_app/allure-results/*"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "chown jenkins:jenkins ./blazedemo_app/allure-results"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Docker build",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "sh \"cp selenium-base-image/Dockerfile .\"\n                            docker.build(\"blazemeter/selenium_base\")\n\n                            // copying and building selenium image\n                            sh \"cp selenium-automation-run/Dockerfile .\"\n                            docker.build(\"blazemeter/selenium_image\")"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Run test",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "try\n                            {\n                                // creating timestamp\n                                def now = new Date()\n                                tstamp = now.format(\"yyyyMMdd-HH:mm:ss.SSSS\", TimeZone.getTimeZone('UTC'))\n\n                                // running selenium tests using pytest via docker\n                                sh \"docker run \" +\n                                        \"--privileged \" +                           // The --privileged flag gives all capabilities to the container,\n                                        \"--shm-size=1g \" +                          // shared memory size is set to 1G to prevent chromedriver memory leak\n                                        \"--rm \" +                                   // remove container at the end of the session\n                                        \"-e PYTHONPATH=/code/ \" +                   // environment variable support\n                                        \"-w=/code \" +                               // setting working directory\n                                        \"-v `pwd`/blazedemo_app:/code \" +           // mount git repository to the container\n                                        \"blazemeter/selenium_image:latest \" +       // the specific image that being used (latest image by default)\n                                        \"-v\"                                        // verbose (for debugging purpose)\n                            }\n                            catch (error)\n                            {\n                                echo error.message\n                            }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "post": {
            "conditions": [
              {
                "condition": "always",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "generateAllureReport",
                      "arguments": []
                    },
                    {
                      "name": "sendSlackNotification",
                      "arguments": []
                    }
                  ]
                }
              }
            ]
          },
          "agent": {
            "type": "any"
          },
          "options": {
            "options": [
              {
                "name": "buildDiscarder",
                "arguments": [
                  {
                    "name": "logRotator",
                    "arguments": [
                      {
                        "key": "numToKeepStr",
                        "value": {
                          "isLiteral": true,
                          "value": "100"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "name": "timestamps",
                "arguments": []
              }
            ]
          },
          "parameters": {
            "parameters": [
              {
                "name": "choice",
                "arguments": [
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "DRIVER"
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "Choose browser"
                    }
                  },
                  {
                    "key": "choices",
                    "value": {
                      "isLiteral": true,
                      "value": "chrome\nfirefox\nheadless"
                    }
                  }
                ]
              },
              {
                "name": "string",
                "arguments": [
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "TESTS_TO_RUN"
                    }
                  },
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": true,
                      "value": "tests/test_purchase_tickets.py"
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "choose test to run"
                    }
                  }
                ]
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "bndynet/web-framework-for-java",
      "repo_url": "https://github.com/bndynet/web-framework-for-java",
      "html_url_jenkinsfile": "https://github.com/bndynet/web-framework-for-java/blob/adf082737a67e7be7abb2ec7ffa9aae87e7c0191/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/83320135/git/blobs/dd681ff7e68d1350ec13183a9de67e6c97063763",
      "jenkins_pipeline": [
        {
          "error": "Tool type \"maven\" does not have an install of \"Maven 3.5\" configured - did you mean \"Jenkins_maven\"? @ line 5, column 15."
        }
      ]
    },
    {
      "full_repo_name": "kstateome/canvas-api",
      "repo_url": "https://github.com/kstateome/canvas-api",
      "html_url_jenkinsfile": "https://github.com/kstateome/canvas-api/blob/f3c951129a80d3632b17cfbd9e50c1121c64d449/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/41554307/git/blobs/4f3073800d6c77aa12a2cc3e3ce77d78d4eecc18",
      "jenkins_pipeline": [
        {
          "error": [
            "Tool type \"maven\" does not have an install of \"Maven 3.5\" configured - did you mean \"Jenkins_maven\"? @ line 17, column 15.",
            "Tool type \"jdk\" does not have an install of \"Java 8\" configured - did you mean \"null\"? @ line 18, column 13."
          ]
        }
      ]
    },
    {
      "full_repo_name": "kangaroo-server/kangaroo",
      "repo_url": "https://github.com/kangaroo-server/kangaroo",
      "html_url_jenkinsfile": "https://github.com/kangaroo-server/kangaroo/blob/eb94d7399e41bf9b1c9b8a1330e09aa41d356e9f/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/56342003/git/blobs/800d71539b5a400bbf77f0a82557fe60d2d80f89",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "init",
              "branches": [
                {
                  "name": "install",
                  "steps": [
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "\n                                mvn clean install                                     -DskipTests=true                                     -Dcheckstyle.skip=true                                     -Dpmd.skip=true                                     -Dcpdskip=true\n                                mvn dependency:go-offline\n                            "
                          }
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "stat",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "sh 'env'\n                                sh 'mvn --version'"
                          }
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "vars",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "gitCommit = sh(returnStdout: true, script: 'git rev-parse HEAD').trim()\n                                jdbc_mariadb = \"jdbc:mariadb://127.0.0.1:3306/\" +\n                                        \"test_${gitCommit.substring(0, 16)}\" +\n                                        \"?useUnicode=yes\""
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "kangaroo-common",
              "branches": [
                {
                  "name": "pmd",
                  "steps": [
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "mvn pmd:check -pl kangaroo-common "
                          }
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "checkstyle",
                  "steps": [
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "mvn checkstyle:check -pl kangaroo-common"
                          }
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "unit-h2",
                  "steps": [
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "\n                            mvn test                                 -Dcheckstyle.skip=true                                 -Dpmd.skip=true                                 -Dcpdskip=true                                 -DskipTests.integration=true                                 -pl kangaroo-common                                 -Ph2                                 -Dtarget-directory=target-h2\n                        "
                          }
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "unit-mariadb",
                  "steps": [
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": false,
                            "value": "\"\"\"\n                            mvn test \\\n                                -Dcheckstyle.skip=true \\\n                                -Dpmd.skip=true \\\n                                -Dcpdskip=true \\\n                                -DskipTests.integration=true \\\n                                -pl kangaroo-common \\\n                                -Pmariadb \\\n                                -Dtarget-directory=target-mariadb \\\n                                -Dhibernate.connection.url=${jdbc_mariadb}\n                        \"\"\""
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "kangaroo-server-authz",
              "branches": [
                {
                  "name": "pmd",
                  "steps": [
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "mvn pmd:check -pl kangaroo-server-authz "
                          }
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "checkstyle",
                  "steps": [
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "mvn checkstyle:check -pl kangaroo-server-authz"
                          }
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "unit-h2",
                  "steps": [
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "\n                            mvn test                                 -Dcheckstyle.skip=true                                 -Dpmd.skip=true                                 -Dcpdskip=true                                 -DskipTests.integration=true                                 -pl kangaroo-server-authz                                 -Ph2                                 -Dtarget-directory=target-h2\n                        "
                          }
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "unit-mariadb",
                  "steps": [
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": false,
                            "value": "\"\"\"\n                            mvn test \\\n                                -Dcheckstyle.skip=true \\\n                                -Dpmd.skip=true \\\n                                -Dcpdskip=true \\\n                                -DskipTests.integration=true \\\n                                -pl kangaroo-server-authz \\\n                                -Pmariadb \\\n                                -Dtarget-directory=target-mariadb \\\n                                -Dhibernate.connection.url=${jdbc_mariadb}\n                        \"\"\""
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "integration",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "\n                    mvn integration-test verify                         -Dcheckstyle.skip=true                         -Dpmd.skip=true                         -Dcpdskip=true                         -DskipTests.unit=true                         -Ph2\n                "
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "post": {
            "conditions": [
              {
                "condition": "changed",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "notifySlack(currentBuild.currentResult)"
                          }
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "condition": "always",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "archive",
                      "arguments": [
                        {
                          "key": "includes",
                          "value": {
                            "isLiteral": true,
                            "value": "**/target/screenshots/*.png"
                          }
                        }
                      ]
                    },
                    {
                      "name": "step",
                      "arguments": [
                        {
                          "key": "delegate",
                          "value": {
                            "isLiteral": false,
                            "value": "[\n                    $class                    : 'JacocoPublisher',\n                    minimumInstructionCoverage: '100',\n                    minimumBranchCoverage     : '100',\n                    minimumComplexityCoverage : '100',\n                    minimumLineCoverage       : '100',\n                    minimumMethodCoverage     : '100',\n                    minimumClassCoverage      : '100',\n                    changeBuildStatus         : true\n            ]"
                          }
                        }
                      ]
                    },
                    {
                      "name": "junit",
                      "arguments": [
                        {
                          "key": "testResults",
                          "value": {
                            "isLiteral": true,
                            "value": "**/target-*/surefire-reports/*.xml"
                          }
                        }
                      ]
                    },
                    {
                      "name": "checkstyle",
                      "arguments": [
                        {
                          "key": "canComputeNew",
                          "value": {
                            "isLiteral": true,
                            "value": true
                          }
                        },
                        {
                          "key": "canRunOnFailed",
                          "value": {
                            "isLiteral": true,
                            "value": true
                          }
                        },
                        {
                          "key": "defaultEncoding",
                          "value": {
                            "isLiteral": true,
                            "value": ""
                          }
                        },
                        {
                          "key": "failedTotalHigh",
                          "value": {
                            "isLiteral": true,
                            "value": "0"
                          }
                        },
                        {
                          "key": "failedTotalLow",
                          "value": {
                            "isLiteral": true,
                            "value": "0"
                          }
                        },
                        {
                          "key": "failedTotalNormal",
                          "value": {
                            "isLiteral": true,
                            "value": "0"
                          }
                        },
                        {
                          "key": "healthy",
                          "value": {
                            "isLiteral": true,
                            "value": "100"
                          }
                        },
                        {
                          "key": "pattern",
                          "value": {
                            "isLiteral": true,
                            "value": "**/target-*/checkstyle-result.xml"
                          }
                        },
                        {
                          "key": "unHealthy",
                          "value": {
                            "isLiteral": true,
                            "value": "100"
                          }
                        },
                        {
                          "key": "unstableTotalAll",
                          "value": {
                            "isLiteral": true,
                            "value": "0"
                          }
                        },
                        {
                          "key": "unstableTotalHigh",
                          "value": {
                            "isLiteral": true,
                            "value": "0"
                          }
                        },
                        {
                          "key": "unstableTotalLow",
                          "value": {
                            "isLiteral": true,
                            "value": "0"
                          }
                        },
                        {
                          "key": "unstableTotalNormal",
                          "value": {
                            "isLiteral": true,
                            "value": "0"
                          }
                        }
                      ]
                    },
                    {
                      "name": "pmd",
                      "arguments": [
                        {
                          "key": "pattern",
                          "value": {
                            "isLiteral": true,
                            "value": "**/target-*/pmd.xml"
                          }
                        },
                        {
                          "key": "unstableTotalAll",
                          "value": {
                            "isLiteral": true,
                            "value": "0"
                          }
                        }
                      ]
                    },
                    {
                      "name": "cleanWs",
                      "arguments": [
                        {
                          "key": "deleteDirs",
                          "value": {
                            "isLiteral": true,
                            "value": true
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          },
          "environment": [
            {
              "key": "KANGAROO_FB_APP",
              "value": {
                "name": "credentials",
                "arguments": [
                  {
                    "isLiteral": true,
                    "value": "jenkins_facebook_app"
                  }
                ]
              }
            },
            {
              "key": "KANGAROO_GITHUB_APP",
              "value": {
                "name": "credentials",
                "arguments": [
                  {
                    "isLiteral": true,
                    "value": "jenkins_github_app"
                  }
                ]
              }
            },
            {
              "key": "KANGAROO_GITHUB_ACCOUNT",
              "value": {
                "name": "credentials",
                "arguments": [
                  {
                    "isLiteral": true,
                    "value": "jenkins_github_account"
                  }
                ]
              }
            },
            {
              "key": "KANGAROO_GOOGLE_APP",
              "value": {
                "name": "credentials",
                "arguments": [
                  {
                    "isLiteral": true,
                    "value": "jenkins_google_app"
                  }
                ]
              }
            },
            {
              "key": "KANGAROO_GOOGLE_ACCOUNT",
              "value": {
                "name": "credentials",
                "arguments": [
                  {
                    "isLiteral": true,
                    "value": "jenkins_google_account"
                  }
                ]
              }
            }
          ],
          "agent": {
            "type": "label",
            "argument": {
              "isLiteral": true,
              "value": "worker"
            }
          },
          "options": {
            "options": [
              {
                "name": "buildDiscarder",
                "arguments": [
                  {
                    "name": "logRotator",
                    "arguments": [
                      {
                        "key": "numToKeepStr",
                        "value": {
                          "isLiteral": true,
                          "value": "5"
                        }
                      }
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "gwally9/Setting_up_AWS",
      "repo_url": "https://github.com/gwally9/Setting_up_AWS",
      "html_url_jenkinsfile": "https://github.com/gwally9/Setting_up_AWS/blob/52f10ee849dc0918411a470f265f3e4b2588709f/Lots_of_Clutter/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/130426909/git/blobs/4aeb5cac662ecc88589791d3044eae1f2a3d5230",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Build with unit testing",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "echo 'Pulling...' + env.BRANCH_NAME\n                    def mvnHome = tool 'Maven 3.3.9'\n                    if (isUnix()) {\n                        def targetVersion = getDevVersion()\n                        print 'target build version...'\n                        print targetVersion\n                        sh \"'${mvnHome}/bin/mvn' -Dintegration-tests.skip=true -Dbuild.number=${targetVersion} clean package\"\n                        def pom = readMavenPom file: 'pom.xml'\n                        // get the current development version \n                        developmentArtifactVersion = \"${pom.version}-${targetVersion}\"\n                        print pom.version\n                        // execute the unit testing and collect the reports\n                        junit '**//*target/surefire-reports/TEST-*.xml'\n                        archive 'target*//*.jar'\n                    } else {\n                        bat(/\"${mvnHome}\\bin\\mvn\" -Dintegration-tests.skip=true clean package/)\n                        def pom = readMavenPom file: 'pom.xml'\n                        print pom.version\n                        junit '**//*target/surefire-reports/TEST-*.xml'\n                        archive 'target*//*.jar'\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Integration tests",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def mvnHome = tool 'Maven 3.3.9'\n                    if (isUnix()) {\n                        // just to trigger the integration test without unit testing\n                        sh \"'${mvnHome}/bin/mvn'  verify -Dunit-tests.skip=true\"\n                    } else {\n                        bat(/\"${mvnHome}\\bin\\mvn\" verify -Dunit-tests.skip=true/)\n                    }"
                          }
                        }
                      ]
                    },
                    {
                      "name": "cucumber",
                      "arguments": [
                        {
                          "key": "buildStatus",
                          "value": {
                            "isLiteral": true,
                            "value": null
                          }
                        },
                        {
                          "key": "fileIncludePattern",
                          "value": {
                            "isLiteral": true,
                            "value": "**/cucumber.json"
                          }
                        },
                        {
                          "key": "jsonReportDirectory",
                          "value": {
                            "isLiteral": true,
                            "value": "target"
                          }
                        },
                        {
                          "key": "sortingMethod",
                          "value": {
                            "isLiteral": true,
                            "value": "ALPHABETICAL"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Sonar scan execution",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def mvnHome = tool 'Maven 3.3.9'\n                    withSonarQubeEnv {\n                     \n                        sh \"'${mvnHome}/bin/mvn'  verify sonar:sonar -Dintegration-tests.skip=true -Dmaven.test.failure.ignore=true\"\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Sonar scan result check",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "timeout",
                      "arguments": [
                        {
                          "key": "time",
                          "value": {
                            "isLiteral": true,
                            "value": 2
                          }
                        },
                        {
                          "key": "unit",
                          "value": {
                            "isLiteral": true,
                            "value": "MINUTES"
                          }
                        }
                      ],
                      "children": [
                        {
                          "name": "retry",
                          "arguments": {
                            "isLiteral": true,
                            "value": 3
                          },
                          "children": [
                            {
                              "name": "script",
                              "arguments": [
                                {
                                  "key": "scriptBlock",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "def qg = waitForQualityGate()\n                            if (qg.status != 'OK') {\n                                error \"Pipeline aborted due to quality gate failure: ${qg.status}\"\n                            }"
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Development deploy approval and deployment",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "if (currentBuild.result == null || currentBuild.result == 'SUCCESS') {\n                        timeout(time: 3, unit: 'MINUTES') {\n                            // you can use the commented line if u have specific user group who CAN ONLY approve\n                            //input message:'Approve deployment?', submitter: 'it-ops'\n                            input message: 'Approve deployment?'\n                        }\n                        timeout(time: 2, unit: 'MINUTES') {\n                            //\n                            if (developmentArtifactVersion != null && !developmentArtifactVersion.isEmpty()) {\n                                // replace it with your application name or make it easily loaded from pom.xml\n                                def jarName = \"application-${developmentArtifactVersion}.jar\"\n                                echo \"the application is deploying ${jarName}\"\n                                // NOTE : CREATE your deployemnt JOB, where it can take parameters whoch is the jar name to fetch from jenkins workspace\n                                build job: 'ApplicationToDev', parameters: [[$class: 'StringParameterValue', name: 'jarName', value: jarName]]\n                                echo 'the application is deployed !'\n                            } else {\n                                error 'the application is not  deployed as development version is null!'\n                            }\n\n                        }\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "DEV sanity check",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sleep",
                      "arguments": [
                        {
                          "key": "time",
                          "value": {
                            "isLiteral": true,
                            "value": 45
                          }
                        }
                      ]
                    },
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "if (currentBuild.result == null || currentBuild.result == 'SUCCESS') {\n                        timeout(time: 1, unit: 'MINUTES') {\n                            script {\n                                def mvnHome = tool 'Maven 3.3.9'\n                                //NOTE : if u change the sanity test class name , change it here as well\n                                sh \"'${mvnHome}/bin/mvn' -Dtest=ApplicationSanityCheck_ITT surefire:test\"\n                            }\n\n                        }\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Release and publish artifact",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def mvnHome = tool 'Maven 3.3.9' //\n                    if (currentBuild.result == null || currentBuild.result == 'SUCCESS') {\n                        def v = getReleaseVersion()\n                        releasedVersion = v;\n                        if (v) {\n                            echo \"Building version ${v} - so released version is ${releasedVersion}\"\n                        }\n                        // jenkins user credentials ID which is transparent to the user and password change\n                        sshagent(['0000000-3b5a-454e-a8e6-c6b6114d36000']) {\n                            sh \"git tag -f v${v}\"\n                            sh \"git push -f --tags\"\n                        }\n                        sh \"'${mvnHome}/bin/mvn' -Dmaven.test.skip=true  versions:set  -DgenerateBackupPoms=false -DnewVersion=${v}\"\n                        sh \"'${mvnHome}/bin/mvn' -Dmaven.test.skip=true clean deploy\"\n\n                    } else {\n                        error \"Release is not possible. as build is not successful\"\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "branch",
                    "arguments": {
                      "isLiteral": true,
                      "value": "master"
                    }
                  }
                ]
              }
            },
            {
              "name": "Deploy to Acceptance",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "if (currentBuild.result == null || currentBuild.result == 'SUCCESS') {\n                        timeout(time: 3, unit: 'MINUTES') {\n                            //input message:'Approve deployment?', submitter: 'it-ops'\n                            input message: 'Approve deployment to UAT?'\n                        }\n                        timeout(time: 3, unit: 'MINUTES') {\n                            //  deployment job which will take the relasesed version\n                            if (releasedVersion != null && !releasedVersion.isEmpty()) {\n                                // make the applciation name for the jar configurable\n                                def jarName = \"application-${releasedVersion}.jar\"\n                                echo \"the application is deploying ${jarName}\"\n                                // NOTE : DO NOT FORGET to create your UAT deployment jar , check Job AlertManagerToUAT in Jenkins for reference\n                                // the deployemnt should be based into Nexus repo\n                                build job: 'AApplicationToACC', parameters: [[$class: 'StringParameterValue', name: 'jarName', value: jarName], [$class: 'StringParameterValue', name: 'appVersion', value: releasedVersion]]\n                                echo 'the application is deployed !'\n                            } else {\n                                error 'the application is not  deployed as released version is null!'\n                            }\n\n                        }\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "branch",
                    "arguments": {
                      "isLiteral": true,
                      "value": "master"
                    }
                  }
                ]
              }
            },
            {
              "name": "ACC E2E tests",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sleep",
                      "arguments": [
                        {
                          "key": "time",
                          "value": {
                            "isLiteral": true,
                            "value": 45
                          }
                        }
                      ]
                    },
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "if (currentBuild.result == null || currentBuild.result == 'SUCCESS') {\n                        timeout(time: 1, unit: 'MINUTES') {\n\n                            script {\n                                def mvnHome = tool 'Maven 3.3.9'\n                                // NOTE : if you change the test class name change it here as well\n                                sh \"'${mvnHome}/bin/mvn' -Dtest=ApplicationE2E surefire:test\"\n                            }\n\n                        }\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "branch",
                    "arguments": {
                      "isLiteral": true,
                      "value": "master"
                    }
                  }
                ]
              }
            }
          ],
          "post": {
            "conditions": [
              {
                "condition": "always",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "deleteDir",
                      "arguments": []
                    }
                  ]
                }
              },
              {
                "condition": "success",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sendEmail",
                      "arguments": {
                        "isLiteral": true,
                        "value": "Successful"
                      }
                    }
                  ]
                }
              },
              {
                "condition": "unstable",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sendEmail",
                      "arguments": {
                        "isLiteral": true,
                        "value": "Unstable"
                      }
                    }
                  ]
                }
              },
              {
                "condition": "failure",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sendEmail",
                      "arguments": {
                        "isLiteral": true,
                        "value": "Failed"
                      }
                    }
                  ]
                }
              }
            ]
          },
          "environment": [
            {
              "key": "EMAIL_RECIPIENTS",
              "value": {
                "isLiteral": true,
                "value": "mahmoud.romeh@test.com"
              }
            }
          ],
          "agent": {
            "type": "label",
            "argument": {
              "isLiteral": true,
              "value": "java8"
            }
          },
          "options": {
            "options": [
              {
                "name": "buildDiscarder",
                "arguments": [
                  {
                    "name": "logRotator",
                    "arguments": [
                      {
                        "key": "numToKeepStr",
                        "value": {
                          "isLiteral": true,
                          "value": "5"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "name": "timeout",
                "arguments": [
                  {
                    "key": "time",
                    "value": {
                      "isLiteral": true,
                      "value": 25
                    }
                  },
                  {
                    "key": "unit",
                    "value": {
                      "isLiteral": true,
                      "value": "MINUTES"
                    }
                  }
                ]
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "delchar/jfile",
      "repo_url": "https://github.com/delchar/jfile",
      "html_url_jenkinsfile": "https://github.com/delchar/jfile/blob/b1f6a195bd2ae431c35ee0bc8f2796013019430f/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/112597744/git/blobs/39ae20001fec4e62e54f2e0a7d5558a9834ff986",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "build",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "\n                    #!/bin/bash\n\n                    export PATH=${PATH}:/sbin\n\n                    # user vars\n                    # WDIR - work directory\n                    ##### WDIR=\"$(pwd)/src\"\n                    LuaJitVersion=${LuaJitVersion}\n\n                    mkdir -p ${WDIR}\n                    cd ${WDIR}\n\n                    NGKIT=\"${WDIR}/ngx_devel_kit\"\n                    export DESTDIR=\"${WDIR}/to_container\"\n                    export LUAJIT_INC=\"${DESTDIR}/usr/include/luajit-${LuaJitVersion}\"\n                    export LUAJIT_LIB=\"${DESTDIR}/usr/lib\"\n\n\n                    git clone http://luajit.org/git/luajit-${LuaJitVersion}.git\n                    git clone https://github.com/simpl/ngx_devel_kit.git\n                    git clone https://github.com/openresty/lua-nginx-module.git\n                    hg clone http://hg.nginx.org/nginx\n\n                    cd luajit-${LuaJitVersion}\n                    sed  -i \"s/\\/usr\\/local/\\/usr/g\" ${WDIR}/luajit-${LuaJitVersion}/Makefile\n                    make && make install\n\n                    cd ${WDIR}/nginx\n                    make -f misc/GNUmakefile release\n                    tar xf nginx-*.tar.gz\n                    cd nginx-*\n\n                    ./configure --with-cc-opt=\"-g -O2 -fPIE -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2\"                                 --with-ld-opt=\"-Wl,-Bsymbolic-functions -fPIE -pie -Wl,-z,relro -Wl,-z,now -Wl,-rpath,/usr/local/lib/lua\"                                 --prefix=/usr/share/nginx                                 --sbin-path=/usr/sbin/nginx                                 --conf-path=/etc/nginx/nginx.conf                                 --http-log-path=/var/log/nginx/access.log                                 --error-log-path=/var/log/nginx/error.log                                 --lock-path=/var/lock/nginx.lock                                 --pid-path=/run/nginx.pid                                 --http-client-body-temp-path=/var/lib/nginx/body                                 --http-fastcgi-temp-path=/var/lib/nginx/fastcgi                                 --http-proxy-temp-path=/var/lib/nginx/proxy                                 --http-scgi-temp-path=/var/lib/nginx/scgi                                 --http-uwsgi-temp-path=/var/lib/nginx/uwsgi                                 --with-debug                                 --with-pcre-jit                                 --with-http_ssl_module                                 --with-http_stub_status_module                                 --with-http_realip_module                                 --with-http_auth_request_module                                 --with-http_addition_module                                 --with-http_dav_module                                 --with-http_geoip_module                                 --with-http_gunzip_module                                 --with-http_gzip_static_module                                 --with-http_image_filter_module                                 --with-http_v2_module                                 --with-http_sub_module                                 --with-http_xslt_module                                 --with-stream                                 --with-stream_ssl_module                                 --with-mail                                 --with-mail_ssl_module                                 --with-threads                                 --add-module=\"${WDIR}/lua-nginx-module\"                                 --add-module=\"${WDIR}/ngx_devel_kit\"                                 --user=nginx                                 --group=nginx\n\n                    make -j$(($(nproc) +1))\n                    make install\n\n                    cd $DESTDIR\n                    tar -cpf ${WORKSPACE}/nginx_lua.tgz .\n                    "
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "dockerize",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "\n                    cd ${WORKSPACE}\n                    docker build --tag ${doc_hub_USR}/${doc_image_name} -f Dockerfile .\n                   "
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "post": {
                "conditions": [
                  {
                    "condition": "success",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "\n                        docker login --username ${doc_hub_USR} --password ${doc_hub_PSW}\n                        docker push ${doc_hub_USR}/${doc_image_name}\n                        "
                              }
                            }
                          ]
                        }
                      ]
                    }
                  },
                  {
                    "condition": "always",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": " docker logout "
                              }
                            }
                          ]
                        }
                      ]
                    }
                  }
                ]
              }
            },
            {
              "name": "deploy to ec2",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "\n                    #get docker-machine if not found in system\n                    if ! [ -x \"$(command -v docker-machine)\" ]; then\n                        dm_ver=$(curl -L https://github.com/docker/machine/releases/latest -s -w '%{url_effective}' -o /dev/null| cut -f8 -d'/')\n                        curl -L https://github.com/docker/machine/releases/download/${dm_ver}/docker-machine-`uname -s`-`uname -m` > ${WORKSPACE}/docker-machine\n                        chmod +x ${WORKSPACE}/docker-machine\n                    fi\n\n                    if  [ \"$(${WORKSPACE}/docker-machine ls --format {{.Name}} 2>&1)\" != \"${ec2_instance_name}\" ]; then\n                        # test on digital ocean\n                        # ${WORKSPACE}/docker-machine create --driver digitalocean --digitalocean-access-token ${aws_key} --digitalocean-size 512mb  ${ec2_instance_name}\n\n                        # gen amazonec2-open-port list\n                        for port in ${ports}; do\n                            aws_ports=\"${aws_ports} --amazonec2-open-port ${port##*:}\"\n                        done\n\n                        ${WORKSPACE}/docker-machine create  --driver amazonec2 --amazonec2-access-key ${aws_key} --amazonec2-secret-key ${aws_secr} --amazonec2-open-port ${aws_ports} --amazonec2-region us-west-1 --amazonec2-instance-type t2.micro ${ec2_instance_name}\n                    else\n                        flag=1\n                    fi\n\n                    ${WORKSPACE}/docker-machine env ${ec2_instance_name}\n                    eval $(${WORKSPACE}/docker-machine env ${ec2_instance_name})\n\n                    # remove old container/images if instance exists\n                    for container in $(docker ps -a  --format \"{{.Names}}\"); do\n                        if [ \"${container}\" = \"${container_name}\" ]; then\n                            docker rm -f ${container_name}\n                        fi\n                    done\n                    # gen docker port map list\n                    for port in ${ports}; do\n                        mports=${mports}\" -p ${port}\"\n                    done\n\n                    docker run --name ${container_name} ${mports} -d ${docker_opts} ${doc_hub_USR}/${doc_image_name}\n                    "
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "post": {
            "conditions": [
              {
                "condition": "always",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "\n                echo Cleaning...\n                rm -rf ${WDIR}\n                rm ${WORKSPACE}/docker-machine\n                "
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          },
          "environment": [
            {
              "key": "LuaJitVersion",
              "value": {
                "isLiteral": true,
                "value": "2.0"
              }
            },
            {
              "key": "WDIR",
              "value": {
                "isLiteral": false,
                "value": "\"${WORKSPACE}/build_env_${BUILD_ID}\""
              }
            },
            {
              "key": "doc_hub",
              "value": {
                "name": "credentials",
                "arguments": [
                  {
                    "isLiteral": true,
                    "value": "26ab0fac-b2a0-43bb-8644-79f06c325f44"
                  }
                ]
              }
            },
            {
              "key": "aws_key",
              "value": {
                "name": "credentials",
                "arguments": [
                  {
                    "isLiteral": true,
                    "value": "262e2f51-7741-48f9-bc7b-9063697ed639"
                  }
                ]
              }
            },
            {
              "key": "aws_secr",
              "value": {
                "name": "credentials",
                "arguments": [
                  {
                    "isLiteral": true,
                    "value": "35477fb8-0f9c-4438-b109-fce84073b7ce"
                  }
                ]
              }
            },
            {
              "key": "ec2_instance_name",
              "value": {
                "isLiteral": true,
                "value": "NginxLua1"
              }
            },
            {
              "key": "doc_image_name",
              "value": {
                "isLiteral": true,
                "value": "nginx_lua"
              }
            },
            {
              "key": "container_name",
              "value": {
                "isLiteral": true,
                "value": "nginx_with_lua"
              }
            },
            {
              "key": "ports",
              "value": {
                "isLiteral": true,
                "value": "80:80"
              }
            },
            {
              "key": "docker_opts",
              "value": {
                "isLiteral": true,
                "value": ""
              }
            }
          ],
          "agent": {
            "type": "node",
            "arguments": [
              {
                "key": "label",
                "value": {
                  "isLiteral": true,
                  "value": "master"
                }
              }
            ]
          },
          "triggers": {
            "triggers": [
              {
                "name": "pollSCM",
                "arguments": [
                  {
                    "isLiteral": true,
                    "value": "* * * * *"
                  }
                ]
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "yogireddy3/jenkin-project",
      "repo_url": "https://github.com/yogireddy3/jenkin-project",
      "html_url_jenkinsfile": "https://github.com/yogireddy3/jenkin-project/blob/f0dc8018216057a213281cc23abb24f95a4df925/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/129082127/git/blobs/f0a33547f6bd64bb96c71ac8f2f65daa563750da",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Build with unit testing",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "echo 'Pulling...' + env.BRANCH_NAME\n                    def mvnHome = tool 'Maven 3.3.9'\n                    if (isUnix()) {\n                        def targetVersion = getDevVersion()\n                        print 'target build version...'\n                        print targetVersion\n                        sh \"'${mvnHome}/bin/mvn' -Dintegration-tests.skip=true -Dbuild.number=${targetVersion} clean package\"\n                        def pom = readMavenPom file: 'pom.xml'\n                        // get the current development version\n                        developmentArtifactVersion = \"${pom.version}-${targetVersion}\"\n                        print pom.version\n                        // execute the unit testing and collect the reports\n                        junit '**//*target/surefire-reports/TEST-*.xml'\n                        archive 'target*//*.jar'\n                    } else {\n                        bat(/\"${mvnHome}\\bin\\mvn\" -Dintegration-tests.skip=true clean package/)\n                        def pom = readMavenPom file: 'pom.xml'\n                        print pom.version\n                        junit '**//*target/surefire-reports/TEST-*.xml'\n                        archive 'target*//*.jar'\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Integration tests",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def mvnHome = tool 'Maven 3.3.9'\n                    if (isUnix()) {\n                        // just to trigger the integration test without unit testing\n                        sh \"'${mvnHome}/bin/mvn'  verify -Dunit-tests.skip=true\"\n                    } else {\n                        bat(/\"${mvnHome}\\bin\\mvn\" verify -Dunit-tests.skip=true/)\n                    }"
                          }
                        }
                      ]
                    },
                    {
                      "name": "cucumber",
                      "arguments": [
                        {
                          "key": "buildStatus",
                          "value": {
                            "isLiteral": true,
                            "value": null
                          }
                        },
                        {
                          "key": "fileIncludePattern",
                          "value": {
                            "isLiteral": true,
                            "value": "**/cucumber.json"
                          }
                        },
                        {
                          "key": "jsonReportDirectory",
                          "value": {
                            "isLiteral": true,
                            "value": "target"
                          }
                        },
                        {
                          "key": "sortingMethod",
                          "value": {
                            "isLiteral": true,
                            "value": "ALPHABETICAL"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Sonar scan execution",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def mvnHome = tool 'Maven 3.3.9'\n                    withSonarQubeEnv {\n\n                        sh \"'${mvnHome}/bin/mvn'  verify sonar:sonar -Dintegration-tests.skip=true -Dmaven.test.failure.ignore=true\"\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Sonar scan result check",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "timeout",
                      "arguments": [
                        {
                          "key": "time",
                          "value": {
                            "isLiteral": true,
                            "value": 2
                          }
                        },
                        {
                          "key": "unit",
                          "value": {
                            "isLiteral": true,
                            "value": "MINUTES"
                          }
                        }
                      ],
                      "children": [
                        {
                          "name": "retry",
                          "arguments": {
                            "isLiteral": true,
                            "value": 3
                          },
                          "children": [
                            {
                              "name": "script",
                              "arguments": [
                                {
                                  "key": "scriptBlock",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "def qg = waitForQualityGate()\n                            if (qg.status != 'OK') {\n                                error \"Pipeline aborted due to quality gate failure: ${qg.status}\"\n                            }"
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Development deploy approval and deployment",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "if (currentBuild.result == null || currentBuild.result == 'SUCCESS') {\n                        timeout(time: 3, unit: 'MINUTES') {\n                            // you can use the commented line if u have specific user group who CAN ONLY approve\n                            //input message:'Approve deployment?', submitter: 'it-ops'\n                            input message: 'Approve deployment?'\n                        }\n                        timeout(time: 2, unit: 'MINUTES') {\n                            //\n                            if (developmentArtifactVersion != null && !developmentArtifactVersion.isEmpty()) {\n                                // replace it with your application name or make it easily loaded from pom.xml\n                                def jarName = \"application-${developmentArtifactVersion}.jar\"\n                                echo \"the application is deploying ${jarName}\"\n                                // NOTE : CREATE your deployemnt JOB, where it can take parameters whoch is the jar name to fetch from jenkins workspace\n                                build job: 'ApplicationToDev', parameters: [[$class: 'StringParameterValue', name: 'jarName', value: jarName]]\n                                echo 'the application is deployed !'\n                            } else {\n                                error 'the application is not  deployed as development version is null!'\n                            }\n\n                        }\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "DEV sanity check",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sleep",
                      "arguments": [
                        {
                          "key": "time",
                          "value": {
                            "isLiteral": true,
                            "value": 45
                          }
                        }
                      ]
                    },
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "if (currentBuild.result == null || currentBuild.result == 'SUCCESS') {\n                        timeout(time: 1, unit: 'MINUTES') {\n                            script {\n                                def mvnHome = tool 'Maven 3.3.9'\n                                //NOTE : if u change the sanity test class name , change it here as well\n                                sh \"'${mvnHome}/bin/mvn' -Dtest=ApplicationSanityCheck_ITT surefire:test\"\n                            }\n\n                        }\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Release and publish artifact",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def mvnHome = tool 'Maven 3.3.9' //\n                    if (currentBuild.result == null || currentBuild.result == 'SUCCESS') {\n                        def v = getReleaseVersion()\n                        releasedVersion = v;\n                        if (v) {\n                            echo \"Building version ${v} - so released version is ${releasedVersion}\"\n                        }\n                        // jenkins user credentials ID which is transparent to the user and password change\n                        sshagent(['0000000-3b5a-454e-a8e6-c6b6114d36000']) {\n                            sh \"git tag -f v${v}\"\n                            sh \"git push -f --tags\"\n                        }\n                        sh \"'${mvnHome}/bin/mvn' -Dmaven.test.skip=true  versions:set  -DgenerateBackupPoms=false -DnewVersion=${v}\"\n                        sh \"'${mvnHome}/bin/mvn' -Dmaven.test.skip=true clean deploy\"\n\n                    } else {\n                        error \"Release is not possible. as build is not successful\"\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "branch",
                    "arguments": {
                      "isLiteral": true,
                      "value": "master"
                    }
                  }
                ]
              }
            },
            {
              "name": "Deploy to Acceptance",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "if (currentBuild.result == null || currentBuild.result == 'SUCCESS') {\n                        timeout(time: 3, unit: 'MINUTES') {\n                            //input message:'Approve deployment?', submitter: 'it-ops'\n                            input message: 'Approve deployment to UAT?'\n                        }\n                        timeout(time: 3, unit: 'MINUTES') {\n                            //  deployment job which will take the relasesed version\n                            if (releasedVersion != null && !releasedVersion.isEmpty()) {\n                                // make the applciation name for the jar configurable\n                                def jarName = \"application-${releasedVersion}.jar\"\n                                echo \"the application is deploying ${jarName}\"\n                                // NOTE : DO NOT FORGET to create your UAT deployment jar , check Job AlertManagerToUAT in Jenkins for reference\n                                // the deployemnt should be based into Nexus repo\n                                build job: 'AApplicationToACC', parameters: [[$class: 'StringParameterValue', name: 'jarName', value: jarName], [$class: 'StringParameterValue', name: 'appVersion', value: releasedVersion]]\n                                echo 'the application is deployed !'\n                            } else {\n                                error 'the application is not  deployed as released version is null!'\n                            }\n\n                        }\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "branch",
                    "arguments": {
                      "isLiteral": true,
                      "value": "master"
                    }
                  }
                ]
              }
            },
            {
              "name": "ACC E2E tests",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sleep",
                      "arguments": [
                        {
                          "key": "time",
                          "value": {
                            "isLiteral": true,
                            "value": 45
                          }
                        }
                      ]
                    },
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "if (currentBuild.result == null || currentBuild.result == 'SUCCESS') {\n                        timeout(time: 1, unit: 'MINUTES') {\n\n                            script {\n                                def mvnHome = tool 'Maven 3.3.9'\n                                // NOTE : if you change the test class name change it here as well\n                                sh \"'${mvnHome}/bin/mvn' -Dtest=ApplicationE2E surefire:test\"\n                            }\n\n                        }\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "branch",
                    "arguments": {
                      "isLiteral": true,
                      "value": "master"
                    }
                  }
                ]
              }
            }
          ],
          "post": {
            "conditions": [
              {
                "condition": "always",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "deleteDir",
                      "arguments": []
                    }
                  ]
                }
              },
              {
                "condition": "success",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sendEmail",
                      "arguments": {
                        "isLiteral": true,
                        "value": "Successful"
                      }
                    }
                  ]
                }
              },
              {
                "condition": "unstable",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sendEmail",
                      "arguments": {
                        "isLiteral": true,
                        "value": "Unstable"
                      }
                    }
                  ]
                }
              },
              {
                "condition": "failure",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sendEmail",
                      "arguments": {
                        "isLiteral": true,
                        "value": "Failed"
                      }
                    }
                  ]
                }
              }
            ]
          },
          "environment": [
            {
              "key": "EMAIL_RECIPIENTS",
              "value": {
                "isLiteral": true,
                "value": "mahmoud.romeh@test.com"
              }
            }
          ],
          "agent": {
            "type": "label",
            "argument": {
              "isLiteral": true,
              "value": "java8"
            }
          },
          "options": {
            "options": [
              {
                "name": "buildDiscarder",
                "arguments": [
                  {
                    "name": "logRotator",
                    "arguments": [
                      {
                        "key": "numToKeepStr",
                        "value": {
                          "isLiteral": true,
                          "value": "5"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "name": "timeout",
                "arguments": [
                  {
                    "key": "time",
                    "value": {
                      "isLiteral": true,
                      "value": 25
                    }
                  },
                  {
                    "key": "unit",
                    "value": {
                      "isLiteral": true,
                      "value": "MINUTES"
                    }
                  }
                ]
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "Romeh/spring-boot-sample-app",
      "repo_url": "https://github.com/Romeh/spring-boot-sample-app",
      "html_url_jenkinsfile": "https://github.com/Romeh/spring-boot-sample-app/blob/d50dd995e5613c5e56991334ea6dd8b88c322b4a/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/112953040/git/blobs/f0a33547f6bd64bb96c71ac8f2f65daa563750da",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Build with unit testing",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "echo 'Pulling...' + env.BRANCH_NAME\n                    def mvnHome = tool 'Maven 3.3.9'\n                    if (isUnix()) {\n                        def targetVersion = getDevVersion()\n                        print 'target build version...'\n                        print targetVersion\n                        sh \"'${mvnHome}/bin/mvn' -Dintegration-tests.skip=true -Dbuild.number=${targetVersion} clean package\"\n                        def pom = readMavenPom file: 'pom.xml'\n                        // get the current development version\n                        developmentArtifactVersion = \"${pom.version}-${targetVersion}\"\n                        print pom.version\n                        // execute the unit testing and collect the reports\n                        junit '**//*target/surefire-reports/TEST-*.xml'\n                        archive 'target*//*.jar'\n                    } else {\n                        bat(/\"${mvnHome}\\bin\\mvn\" -Dintegration-tests.skip=true clean package/)\n                        def pom = readMavenPom file: 'pom.xml'\n                        print pom.version\n                        junit '**//*target/surefire-reports/TEST-*.xml'\n                        archive 'target*//*.jar'\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Integration tests",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def mvnHome = tool 'Maven 3.3.9'\n                    if (isUnix()) {\n                        // just to trigger the integration test without unit testing\n                        sh \"'${mvnHome}/bin/mvn'  verify -Dunit-tests.skip=true\"\n                    } else {\n                        bat(/\"${mvnHome}\\bin\\mvn\" verify -Dunit-tests.skip=true/)\n                    }"
                          }
                        }
                      ]
                    },
                    {
                      "name": "cucumber",
                      "arguments": [
                        {
                          "key": "buildStatus",
                          "value": {
                            "isLiteral": true,
                            "value": null
                          }
                        },
                        {
                          "key": "fileIncludePattern",
                          "value": {
                            "isLiteral": true,
                            "value": "**/cucumber.json"
                          }
                        },
                        {
                          "key": "jsonReportDirectory",
                          "value": {
                            "isLiteral": true,
                            "value": "target"
                          }
                        },
                        {
                          "key": "sortingMethod",
                          "value": {
                            "isLiteral": true,
                            "value": "ALPHABETICAL"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Sonar scan execution",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def mvnHome = tool 'Maven 3.3.9'\n                    withSonarQubeEnv {\n\n                        sh \"'${mvnHome}/bin/mvn'  verify sonar:sonar -Dintegration-tests.skip=true -Dmaven.test.failure.ignore=true\"\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Sonar scan result check",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "timeout",
                      "arguments": [
                        {
                          "key": "time",
                          "value": {
                            "isLiteral": true,
                            "value": 2
                          }
                        },
                        {
                          "key": "unit",
                          "value": {
                            "isLiteral": true,
                            "value": "MINUTES"
                          }
                        }
                      ],
                      "children": [
                        {
                          "name": "retry",
                          "arguments": {
                            "isLiteral": true,
                            "value": 3
                          },
                          "children": [
                            {
                              "name": "script",
                              "arguments": [
                                {
                                  "key": "scriptBlock",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "def qg = waitForQualityGate()\n                            if (qg.status != 'OK') {\n                                error \"Pipeline aborted due to quality gate failure: ${qg.status}\"\n                            }"
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Development deploy approval and deployment",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "if (currentBuild.result == null || currentBuild.result == 'SUCCESS') {\n                        timeout(time: 3, unit: 'MINUTES') {\n                            // you can use the commented line if u have specific user group who CAN ONLY approve\n                            //input message:'Approve deployment?', submitter: 'it-ops'\n                            input message: 'Approve deployment?'\n                        }\n                        timeout(time: 2, unit: 'MINUTES') {\n                            //\n                            if (developmentArtifactVersion != null && !developmentArtifactVersion.isEmpty()) {\n                                // replace it with your application name or make it easily loaded from pom.xml\n                                def jarName = \"application-${developmentArtifactVersion}.jar\"\n                                echo \"the application is deploying ${jarName}\"\n                                // NOTE : CREATE your deployemnt JOB, where it can take parameters whoch is the jar name to fetch from jenkins workspace\n                                build job: 'ApplicationToDev', parameters: [[$class: 'StringParameterValue', name: 'jarName', value: jarName]]\n                                echo 'the application is deployed !'\n                            } else {\n                                error 'the application is not  deployed as development version is null!'\n                            }\n\n                        }\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "DEV sanity check",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sleep",
                      "arguments": [
                        {
                          "key": "time",
                          "value": {
                            "isLiteral": true,
                            "value": 45
                          }
                        }
                      ]
                    },
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "if (currentBuild.result == null || currentBuild.result == 'SUCCESS') {\n                        timeout(time: 1, unit: 'MINUTES') {\n                            script {\n                                def mvnHome = tool 'Maven 3.3.9'\n                                //NOTE : if u change the sanity test class name , change it here as well\n                                sh \"'${mvnHome}/bin/mvn' -Dtest=ApplicationSanityCheck_ITT surefire:test\"\n                            }\n\n                        }\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Release and publish artifact",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def mvnHome = tool 'Maven 3.3.9' //\n                    if (currentBuild.result == null || currentBuild.result == 'SUCCESS') {\n                        def v = getReleaseVersion()\n                        releasedVersion = v;\n                        if (v) {\n                            echo \"Building version ${v} - so released version is ${releasedVersion}\"\n                        }\n                        // jenkins user credentials ID which is transparent to the user and password change\n                        sshagent(['0000000-3b5a-454e-a8e6-c6b6114d36000']) {\n                            sh \"git tag -f v${v}\"\n                            sh \"git push -f --tags\"\n                        }\n                        sh \"'${mvnHome}/bin/mvn' -Dmaven.test.skip=true  versions:set  -DgenerateBackupPoms=false -DnewVersion=${v}\"\n                        sh \"'${mvnHome}/bin/mvn' -Dmaven.test.skip=true clean deploy\"\n\n                    } else {\n                        error \"Release is not possible. as build is not successful\"\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "branch",
                    "arguments": {
                      "isLiteral": true,
                      "value": "master"
                    }
                  }
                ]
              }
            },
            {
              "name": "Deploy to Acceptance",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "if (currentBuild.result == null || currentBuild.result == 'SUCCESS') {\n                        timeout(time: 3, unit: 'MINUTES') {\n                            //input message:'Approve deployment?', submitter: 'it-ops'\n                            input message: 'Approve deployment to UAT?'\n                        }\n                        timeout(time: 3, unit: 'MINUTES') {\n                            //  deployment job which will take the relasesed version\n                            if (releasedVersion != null && !releasedVersion.isEmpty()) {\n                                // make the applciation name for the jar configurable\n                                def jarName = \"application-${releasedVersion}.jar\"\n                                echo \"the application is deploying ${jarName}\"\n                                // NOTE : DO NOT FORGET to create your UAT deployment jar , check Job AlertManagerToUAT in Jenkins for reference\n                                // the deployemnt should be based into Nexus repo\n                                build job: 'AApplicationToACC', parameters: [[$class: 'StringParameterValue', name: 'jarName', value: jarName], [$class: 'StringParameterValue', name: 'appVersion', value: releasedVersion]]\n                                echo 'the application is deployed !'\n                            } else {\n                                error 'the application is not  deployed as released version is null!'\n                            }\n\n                        }\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "branch",
                    "arguments": {
                      "isLiteral": true,
                      "value": "master"
                    }
                  }
                ]
              }
            },
            {
              "name": "ACC E2E tests",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sleep",
                      "arguments": [
                        {
                          "key": "time",
                          "value": {
                            "isLiteral": true,
                            "value": 45
                          }
                        }
                      ]
                    },
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "if (currentBuild.result == null || currentBuild.result == 'SUCCESS') {\n                        timeout(time: 1, unit: 'MINUTES') {\n\n                            script {\n                                def mvnHome = tool 'Maven 3.3.9'\n                                // NOTE : if you change the test class name change it here as well\n                                sh \"'${mvnHome}/bin/mvn' -Dtest=ApplicationE2E surefire:test\"\n                            }\n\n                        }\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "branch",
                    "arguments": {
                      "isLiteral": true,
                      "value": "master"
                    }
                  }
                ]
              }
            }
          ],
          "post": {
            "conditions": [
              {
                "condition": "always",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "deleteDir",
                      "arguments": []
                    }
                  ]
                }
              },
              {
                "condition": "success",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sendEmail",
                      "arguments": {
                        "isLiteral": true,
                        "value": "Successful"
                      }
                    }
                  ]
                }
              },
              {
                "condition": "unstable",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sendEmail",
                      "arguments": {
                        "isLiteral": true,
                        "value": "Unstable"
                      }
                    }
                  ]
                }
              },
              {
                "condition": "failure",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sendEmail",
                      "arguments": {
                        "isLiteral": true,
                        "value": "Failed"
                      }
                    }
                  ]
                }
              }
            ]
          },
          "environment": [
            {
              "key": "EMAIL_RECIPIENTS",
              "value": {
                "isLiteral": true,
                "value": "mahmoud.romeh@test.com"
              }
            }
          ],
          "agent": {
            "type": "label",
            "argument": {
              "isLiteral": true,
              "value": "java8"
            }
          },
          "options": {
            "options": [
              {
                "name": "buildDiscarder",
                "arguments": [
                  {
                    "name": "logRotator",
                    "arguments": [
                      {
                        "key": "numToKeepStr",
                        "value": {
                          "isLiteral": true,
                          "value": "5"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "name": "timeout",
                "arguments": [
                  {
                    "key": "time",
                    "value": {
                      "isLiteral": true,
                      "value": 25
                    }
                  },
                  {
                    "key": "unit",
                    "value": {
                      "isLiteral": true,
                      "value": "MINUTES"
                    }
                  }
                ]
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "CyanZero/first",
      "repo_url": "https://github.com/CyanZero/first",
      "html_url_jenkinsfile": "https://github.com/CyanZero/first/blob/7c9c39dafb6681d4cbfbe81e4e0055f2a9939ad1/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/96007123/git/blobs/49b2518d1c5922218182269ef802a89d8361f359",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Build with unit testing",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "echo 'Pulling...' + env.BRANCH_NAME\n                    def mvnHome = tool 'Maven3'\n                    if (isUnix()) {\n                        def targetVersion = getDevVersion()\n                        print 'target build version...'\n                        print targetVersion\n                        sh \"'${mvnHome}/bin/mvn' -Dintegration-tests.skip=true -Dbuild.number=${targetVersion} clean package\"\n                        def pom = readMavenPom file: 'pom.xml'\n                        // get the current development version\n                        developmentArtifactVersion = \"${pom.version}-${targetVersion}\"\n                        print pom.version\n                        // execute the unit testing and collect the reports\n                        // junit '**//*target/surefire-reports/TEST-*.xml'\n                        archive 'target*//*.jar'\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Integration tests",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "print 'Integration test is skipped'"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Development deploy approval and deployment",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "if (currentBuild.result == null || currentBuild.result == 'SUCCESS') {\n                        timeout(time: 3, unit: 'MINUTES') {\n                            // you can use the commented line if u have specific user group who CAN ONLY approve\n                            //input message:'Approve deployment?', submitter: 'it-ops'\n                            input message: 'Approve deployment?'\n                        }\n                        timeout(time: 2, unit: 'MINUTES') {\n                            //\n                            if (developmentArtifactVersion != null && !developmentArtifactVersion.isEmpty()) {\n                                // replace it with your application name or make it easily loaded from pom.xml\n                                def jarName = \"application-${developmentArtifactVersion}.jar\"\n                                echo \"the application is deploying ${jarName}\"\n                                // NOTE : CREATE your deployemnt JOB, where it can take parameters whoch is the jar name to fetch from jenkins workspace\n                                build job: 'ApplicationToDev', parameters: [[$class: 'StringParameterValue', name: 'jarName', value: jarName]]\n                                echo 'the application is deployed !'\n                            } else {\n                                error 'the application is not  deployed as development version is null!'\n                            }\n\n                        }\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Release and publish artifact",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def mvnHome = tool 'Maven 3.3.9' //\n                    if (currentBuild.result == null || currentBuild.result == 'SUCCESS') {\n                        def v = getReleaseVersion()\n                        releasedVersion = v;\n                        if (v) {\n                            echo \"Building version ${v} - so released version is ${releasedVersion}\"\n                        }\n                        // jenkins user credentials ID which is transparent to the user and password change\n                        sshagent(['0000000-3b5a-454e-a8e6-c6b6114d36000']) {\n                            sh \"git tag -f v${v}\"\n                            sh \"git push -f --tags\"\n                        }\n                        sh \"'${mvnHome}/bin/mvn' -Dmaven.test.skip=true  versions:set  -DgenerateBackupPoms=false -DnewVersion=${v}\"\n                        sh \"'${mvnHome}/bin/mvn' -Dmaven.test.skip=true clean deploy\"\n\n                    } else {\n                        error \"Release is not possible. as build is not successful\"\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "branch",
                    "arguments": {
                      "isLiteral": true,
                      "value": "master"
                    }
                  }
                ]
              }
            },
            {
              "name": "Deploy to Acceptance",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "if (currentBuild.result == null || currentBuild.result == 'SUCCESS') {\n                        timeout(time: 3, unit: 'MINUTES') {\n                            //input message:'Approve deployment?', submitter: 'it-ops'\n                            input message: 'Approve deployment to UAT?'\n                        }\n                        timeout(time: 3, unit: 'MINUTES') {\n                            //  deployment job which will take the relasesed version\n                            if (releasedVersion != null && !releasedVersion.isEmpty()) {\n                                // make the applciation name for the jar configurable\n                                def jarName = \"application-${releasedVersion}.jar\"\n                                echo \"the application is deploying ${jarName}\"\n                                // NOTE : DO NOT FORGET to create your UAT deployment jar , check Job AlertManagerToUAT in Jenkins for reference\n                                // the deployemnt should be based into Nexus repo\n                                build job: 'AApplicationToACC', parameters: [[$class: 'StringParameterValue', name: 'jarName', value: jarName], [$class: 'StringParameterValue', name: 'appVersion', value: releasedVersion]]\n                                echo 'the application is deployed !'\n                            } else {\n                                error 'the application is not  deployed as released version is null!'\n                            }\n\n                        }\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "branch",
                    "arguments": {
                      "isLiteral": true,
                      "value": "master"
                    }
                  }
                ]
              }
            },
            {
              "name": "ACC E2E tests",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "echo 'ACC E2E test is skipped'"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "branch",
                    "arguments": {
                      "isLiteral": true,
                      "value": "master"
                    }
                  }
                ]
              }
            }
          ],
          "post": {
            "conditions": [
              {
                "condition": "always",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "deleteDir",
                      "arguments": []
                    }
                  ]
                }
              },
              {
                "condition": "success",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sendEmail",
                      "arguments": {
                        "isLiteral": true,
                        "value": "Successful"
                      }
                    }
                  ]
                }
              },
              {
                "condition": "unstable",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sendEmail",
                      "arguments": {
                        "isLiteral": true,
                        "value": "Unstable"
                      }
                    }
                  ]
                }
              },
              {
                "condition": "failure",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sendEmail",
                      "arguments": {
                        "isLiteral": true,
                        "value": "Failed"
                      }
                    }
                  ]
                }
              }
            ]
          },
          "environment": [
            {
              "key": "EMAIL_RECIPIENTS",
              "value": {
                "isLiteral": true,
                "value": "cyanzhoufeng@gmail.com"
              }
            }
          ],
          "agent": {
            "type": "any"
          },
          "options": {
            "options": [
              {
                "name": "buildDiscarder",
                "arguments": [
                  {
                    "name": "logRotator",
                    "arguments": [
                      {
                        "key": "numToKeepStr",
                        "value": {
                          "isLiteral": true,
                          "value": "5"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "name": "timeout",
                "arguments": [
                  {
                    "key": "time",
                    "value": {
                      "isLiteral": true,
                      "value": 25
                    }
                  },
                  {
                    "key": "unit",
                    "value": {
                      "isLiteral": true,
                      "value": "MINUTES"
                    }
                  }
                ]
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "Romeh/spring-boot-ignite",
      "repo_url": "https://github.com/Romeh/spring-boot-ignite",
      "html_url_jenkinsfile": "https://github.com/Romeh/spring-boot-ignite/blob/8b8638c76a6836d23ae6c403aa0f1c0234dcbeb0/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/110881779/git/blobs/c426f63d3734ed5729bb47675e09062b3abade76",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Build With Unit Testing",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "echo 'Pulling...' + env.BRANCH_NAME\n                    def mvnHome = tool 'Maven 3.3.9'\n                    if (isUnix()) {\n                        sh \"'${mvnHome}/bin/mvn' -Dmaven.test.failure.ignore clean package\"\n                        def pom = readMavenPom file: 'pom.xml'\n                        print pom.version\n                        junit '**/target/surefire-reports/TEST-*.xml'\n                        archive 'target/*.jar'\n                    } else {\n                        bat(/\"${mvnHome}\\bin\\mvn\" -Dmaven.test.failure.ignore clean package/)\n                        def pom = readMavenPom file: 'pom.xml'\n                        print pom.version\n                        junit '**/target/surefire-reports/TEST-*.xml'\n                        archive 'target/*.jar'\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Integration Tests",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def mvnHome = tool 'Maven 3.3.9'\n                    if (isUnix()) {\n                        sh \"'${mvnHome}/bin/mvn'  verify -Dunit-tests.skip=true\"\n                    } else {\n                        bat(/\"${mvnHome}\\bin\\mvn\" verify -Dunit-tests.skip=true/)\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Sonar Check",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def mvnHome = tool 'Maven 3.3.9'\n                    // replace it with your sonar server\n                    sh \"'${mvnHome}/bin/mvn'  verify sonar:sonar -Dsonar.host.url=http://romehjava.bc/sonar/ -Dmaven.test.failure.ignore=true\""
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "ITT Deploy Approval and deployment",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "timeout",
                      "arguments": [
                        {
                          "key": "time",
                          "value": {
                            "isLiteral": true,
                            "value": 3
                          }
                        },
                        {
                          "key": "unit",
                          "value": {
                            "isLiteral": true,
                            "value": "MINUTES"
                          }
                        }
                      ],
                      "children": [
                        {
                          "name": "input",
                          "arguments": [
                            {
                              "key": "message",
                              "value": {
                                "isLiteral": true,
                                "value": "Approve deployment?"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "name": "timeout",
                      "arguments": [
                        {
                          "key": "time",
                          "value": {
                            "isLiteral": true,
                            "value": 2
                          }
                        },
                        {
                          "key": "unit",
                          "value": {
                            "isLiteral": true,
                            "value": "MINUTES"
                          }
                        }
                      ],
                      "children": [
                        {
                          "name": "build",
                          "arguments": [
                            {
                              "key": "job",
                              "value": {
                                "isLiteral": true,
                                "value": "AlertManagerToITT"
                              }
                            }
                          ]
                        },
                        {
                          "name": "echo",
                          "arguments": [
                            {
                              "key": "message",
                              "value": {
                                "isLiteral": true,
                                "value": "the application is deployed !"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "expression",
                    "arguments": [
                      {
                        "key": "scriptBlock",
                        "value": {
                          "isLiteral": true,
                          "value": "currentBuild.result == null || currentBuild.result == 'SUCCESS' && env.BRANCH_NAME == 'master'"
                        }
                      }
                    ]
                  }
                ]
              }
            }
          ],
          "post": {
            "conditions": [
              {
                "condition": "always",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "deleteDir",
                      "arguments": []
                    }
                  ]
                }
              },
              {
                "condition": "success",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sendEmail",
                      "arguments": {
                        "isLiteral": true,
                        "value": "Successful"
                      }
                    }
                  ]
                }
              },
              {
                "condition": "unstable",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sendEmail",
                      "arguments": {
                        "isLiteral": true,
                        "value": "Unstable"
                      }
                    }
                  ]
                }
              },
              {
                "condition": "failure",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sendEmail",
                      "arguments": {
                        "isLiteral": true,
                        "value": "Failed"
                      }
                    }
                  ]
                }
              }
            ]
          },
          "environment": [
            {
              "key": "EMAIL_RECIPIENTS",
              "value": {
                "isLiteral": true,
                "value": "mahmoud.romih@test.com"
              }
            }
          ],
          "agent": {
            "type": "label",
            "argument": {
              "isLiteral": true,
              "value": "jdk8"
            }
          },
          "options": {
            "options": [
              {
                "name": "buildDiscarder",
                "arguments": [
                  {
                    "name": "logRotator",
                    "arguments": [
                      {
                        "key": "numToKeepStr",
                        "value": {
                          "isLiteral": true,
                          "value": "10"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "name": "timeout",
                "arguments": [
                  {
                    "key": "time",
                    "value": {
                      "isLiteral": true,
                      "value": 20
                    }
                  },
                  {
                    "key": "unit",
                    "value": {
                      "isLiteral": true,
                      "value": "MINUTES"
                    }
                  }
                ]
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "jcervelin/sample-cucumber",
      "repo_url": "https://github.com/jcervelin/sample-cucumber",
      "html_url_jenkinsfile": "https://github.com/jcervelin/sample-cucumber/blob/670b82d6fe31940e2126f0a9a2f44f8febd96930/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/122145970/git/blobs/37b472254778f4d30b9515fbe2bb95f8c40b58de",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Build with unit testing",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "echo 'Pulling...' + env.BRANCH_NAME\n                    def mvnHome = tool 'Maven 3.3.9'\n                    if (isUnix()) {\n                        def targetVersion = getDevVersion()\n                        print 'target build version...'\n                        print targetVersion\n                        sh \"'${mvnHome}/bin/mvn' -Dintegration-tests.skip=true -Dbuild.number=${targetVersion} clean package\"\n                        def pom = readMavenPom file: 'pom.xml'\n                        // get the current development version\n                        developmentArtifactVersion = \"${pom.version}-${targetVersion}\"\n                        print pom.version\n                        // execute the unit testing and collect the reports\n                        junit '**//*target/surefire-reports/TEST-*.xml'\n                        archive 'target*//*.jar'\n                    } else {\n                        bat(/\"${mvnHome}\\bin\\mvn\" -Dintegration-tests.skip=true clean package/)\n                        def pom = readMavenPom file: 'pom.xml'\n                        print pom.version\n                        junit '**//*target/surefire-reports/TEST-*.xml'\n                        archive 'target*//*.jar'\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Integration tests",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def mvnHome = tool 'Maven 3.3.9'\n                    if (isUnix()) {\n                        // just to trigger the integration test without unit testing\n                        sh \"'${mvnHome}/bin/mvn'  verify -Dunit-tests.skip=true\"\n                    } else {\n                        bat(/\"${mvnHome}\\bin\\mvn\" verify -Dunit-tests.skip=true/)\n                    }"
                          }
                        }
                      ]
                    },
                    {
                      "name": "cucumber",
                      "arguments": [
                        {
                          "key": "buildStatus",
                          "value": {
                            "isLiteral": true,
                            "value": null
                          }
                        },
                        {
                          "key": "fileIncludePattern",
                          "value": {
                            "isLiteral": true,
                            "value": "**/cucumber.json"
                          }
                        },
                        {
                          "key": "jsonReportDirectory",
                          "value": {
                            "isLiteral": true,
                            "value": "target"
                          }
                        },
                        {
                          "key": "sortingMethod",
                          "value": {
                            "isLiteral": true,
                            "value": "ALPHABETICAL"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Sonar scan execution",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def mvnHome = tool 'Maven 3.3.9'\n                    withSonarQubeEnv {\n\n                        sh \"'${mvnHome}/bin/mvn'  verify sonar:sonar -Dintegration-tests.skip=true -Dmaven.test.failure.ignore=true\"\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Sonar scan result check",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "timeout",
                      "arguments": [
                        {
                          "key": "time",
                          "value": {
                            "isLiteral": true,
                            "value": 2
                          }
                        },
                        {
                          "key": "unit",
                          "value": {
                            "isLiteral": true,
                            "value": "MINUTES"
                          }
                        }
                      ],
                      "children": [
                        {
                          "name": "retry",
                          "arguments": {
                            "isLiteral": true,
                            "value": 3
                          },
                          "children": [
                            {
                              "name": "script",
                              "arguments": [
                                {
                                  "key": "scriptBlock",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "def qg = waitForQualityGate()\n                            if (qg.status != 'OK') {\n                                error \"Pipeline aborted due to quality gate failure: ${qg.status}\"\n                            }"
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Development deploy approval and deployment",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "if (currentBuild.result == null || currentBuild.result == 'SUCCESS') {\n                        timeout(time: 3, unit: 'MINUTES') {\n                            // you can use the commented line if u have specific user group who CAN ONLY approve\n                            //input message:'Approve deployment?', submitter: 'it-ops'\n                            input message: 'Approve deployment?'\n                        }\n                        timeout(time: 2, unit: 'MINUTES') {\n                            //\n                            if (developmentArtifactVersion != null && !developmentArtifactVersion.isEmpty()) {\n                                // replace it with your application name or make it easily loaded from pom.xml\n                                def jarName = \"application-${developmentArtifactVersion}.jar\"\n                                echo \"the application is deploying ${jarName}\"\n                                // NOTE : CREATE your deployemnt JOB, where it can take parameters whoch is the jar name to fetch from jenkins workspace\n                                build job: 'ApplicationToDev', parameters: [[$class: 'StringParameterValue', name: 'jarName', value: jarName]]\n                                echo 'the application is deployed !'\n                            } else {\n                                error 'the application is not  deployed as development version is null!'\n                            }\n\n                        }\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "DEV sanity check",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sleep",
                      "arguments": [
                        {
                          "key": "time",
                          "value": {
                            "isLiteral": true,
                            "value": 45
                          }
                        }
                      ]
                    },
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "if (currentBuild.result == null || currentBuild.result == 'SUCCESS') {\n                        timeout(time: 1, unit: 'MINUTES') {\n                            script {\n                                def mvnHome = tool 'Maven 3.3.9'\n                                //NOTE : if u change the sanity test class name , change it here as well\n                                sh \"'${mvnHome}/bin/mvn' -Dtest=ApplicationSanityCheck_ITT surefire:test\"\n                            }\n\n                        }\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Release and publish artifact",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def mvnHome = tool 'Maven 3.3.9' //\n                    if (currentBuild.result == null || currentBuild.result == 'SUCCESS') {\n                        def v = getReleaseVersion()\n                        releasedVersion = v;\n                        if (v) {\n                            echo \"Building version ${v} - so released version is ${releasedVersion}\"\n                        }\n                        // jenkins user credentials ID which is transparent to the user and password change\n                        sshagent(['0000000-3b5a-454e-a8e6-c6b6114d36000']) {\n                            sh \"git tag -f v${v}\"\n                            sh \"git push -f --tags\"\n                        }\n                        sh \"'${mvnHome}/bin/mvn' -Dmaven.test.skip=true  versions:set  -DgenerateBackupPoms=false -DnewVersion=${v}\"\n                        sh \"'${mvnHome}/bin/mvn' -Dmaven.test.skip=true clean deploy\"\n\n                    } else {\n                        error \"Release is not possible. as build is not successful\"\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "branch",
                    "arguments": {
                      "isLiteral": true,
                      "value": "master"
                    }
                  }
                ]
              }
            },
            {
              "name": "Deploy to Acceptance",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "if (currentBuild.result == null || currentBuild.result == 'SUCCESS') {\n                        timeout(time: 3, unit: 'MINUTES') {\n                            //input message:'Approve deployment?', submitter: 'it-ops'\n                            input message: 'Approve deployment to UAT?'\n                        }\n                        timeout(time: 3, unit: 'MINUTES') {\n                            //  deployment job which will take the relasesed version\n                            if (releasedVersion != null && !releasedVersion.isEmpty()) {\n                                // make the applciation name for the jar configurable\n                                def jarName = \"application-${releasedVersion}.jar\"\n                                echo \"the application is deploying ${jarName}\"\n                                // NOTE : DO NOT FORGET to create your UAT deployment jar , check Job AlertManagerToUAT in Jenkins for reference\n                                // the deployemnt should be based into Nexus repo\n                                build job: 'AApplicationToACC', parameters: [[$class: 'StringParameterValue', name: 'jarName', value: jarName], [$class: 'StringParameterValue', name: 'appVersion', value: releasedVersion]]\n                                echo 'the application is deployed !'\n                            } else {\n                                error 'the application is not  deployed as released version is null!'\n                            }\n\n                        }\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "branch",
                    "arguments": {
                      "isLiteral": true,
                      "value": "master"
                    }
                  }
                ]
              }
            },
            {
              "name": "ACC E2E tests",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sleep",
                      "arguments": [
                        {
                          "key": "time",
                          "value": {
                            "isLiteral": true,
                            "value": 45
                          }
                        }
                      ]
                    },
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "if (currentBuild.result == null || currentBuild.result == 'SUCCESS') {\n                        timeout(time: 1, unit: 'MINUTES') {\n\n                            script {\n                                def mvnHome = tool 'Maven 3.3.9'\n                                // NOTE : if you change the test class name change it here as well\n                                sh \"'${mvnHome}/bin/mvn' -Dtest=ApplicationE2E surefire:test\"\n                            }\n\n                        }\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "branch",
                    "arguments": {
                      "isLiteral": true,
                      "value": "master"
                    }
                  }
                ]
              }
            }
          ],
          "post": {
            "conditions": [
              {
                "condition": "always",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "deleteDir",
                      "arguments": []
                    }
                  ]
                }
              },
              {
                "condition": "success",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sendEmail",
                      "arguments": {
                        "isLiteral": true,
                        "value": "Successful"
                      }
                    }
                  ]
                }
              },
              {
                "condition": "unstable",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sendEmail",
                      "arguments": {
                        "isLiteral": true,
                        "value": "Unstable"
                      }
                    }
                  ]
                }
              },
              {
                "condition": "failure",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sendEmail",
                      "arguments": {
                        "isLiteral": true,
                        "value": "Failed"
                      }
                    }
                  ]
                }
              }
            ]
          },
          "environment": [
            {
              "key": "EMAIL_RECIPIENTS",
              "value": {
                "isLiteral": true,
                "value": "test@test.com"
              }
            }
          ],
          "agent": {
            "type": "label",
            "argument": {
              "isLiteral": true,
              "value": "java8"
            }
          },
          "options": {
            "options": [
              {
                "name": "buildDiscarder",
                "arguments": [
                  {
                    "name": "logRotator",
                    "arguments": [
                      {
                        "key": "numToKeepStr",
                        "value": {
                          "isLiteral": true,
                          "value": "5"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "name": "timeout",
                "arguments": [
                  {
                    "key": "time",
                    "value": {
                      "isLiteral": true,
                      "value": 25
                    }
                  },
                  {
                    "key": "unit",
                    "value": {
                      "isLiteral": true,
                      "value": "MINUTES"
                    }
                  }
                ]
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "murmangit/spring-boot-maven-archtypes",
      "repo_url": "https://github.com/murmangit/spring-boot-maven-archtypes",
      "html_url_jenkinsfile": "https://github.com/murmangit/spring-boot-maven-archtypes/blob/f26539a24fa3fff87e86b789b12b0a0bc0fa1c6d/maven-archtypes/src/main/resources/archetype-resources/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/131196808/git/blobs/f0a33547f6bd64bb96c71ac8f2f65daa563750da",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Build with unit testing",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "echo 'Pulling...' + env.BRANCH_NAME\n                    def mvnHome = tool 'Maven 3.3.9'\n                    if (isUnix()) {\n                        def targetVersion = getDevVersion()\n                        print 'target build version...'\n                        print targetVersion\n                        sh \"'${mvnHome}/bin/mvn' -Dintegration-tests.skip=true -Dbuild.number=${targetVersion} clean package\"\n                        def pom = readMavenPom file: 'pom.xml'\n                        // get the current development version\n                        developmentArtifactVersion = \"${pom.version}-${targetVersion}\"\n                        print pom.version\n                        // execute the unit testing and collect the reports\n                        junit '**//*target/surefire-reports/TEST-*.xml'\n                        archive 'target*//*.jar'\n                    } else {\n                        bat(/\"${mvnHome}\\bin\\mvn\" -Dintegration-tests.skip=true clean package/)\n                        def pom = readMavenPom file: 'pom.xml'\n                        print pom.version\n                        junit '**//*target/surefire-reports/TEST-*.xml'\n                        archive 'target*//*.jar'\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Integration tests",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def mvnHome = tool 'Maven 3.3.9'\n                    if (isUnix()) {\n                        // just to trigger the integration test without unit testing\n                        sh \"'${mvnHome}/bin/mvn'  verify -Dunit-tests.skip=true\"\n                    } else {\n                        bat(/\"${mvnHome}\\bin\\mvn\" verify -Dunit-tests.skip=true/)\n                    }"
                          }
                        }
                      ]
                    },
                    {
                      "name": "cucumber",
                      "arguments": [
                        {
                          "key": "buildStatus",
                          "value": {
                            "isLiteral": true,
                            "value": null
                          }
                        },
                        {
                          "key": "fileIncludePattern",
                          "value": {
                            "isLiteral": true,
                            "value": "**/cucumber.json"
                          }
                        },
                        {
                          "key": "jsonReportDirectory",
                          "value": {
                            "isLiteral": true,
                            "value": "target"
                          }
                        },
                        {
                          "key": "sortingMethod",
                          "value": {
                            "isLiteral": true,
                            "value": "ALPHABETICAL"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Sonar scan execution",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def mvnHome = tool 'Maven 3.3.9'\n                    withSonarQubeEnv {\n\n                        sh \"'${mvnHome}/bin/mvn'  verify sonar:sonar -Dintegration-tests.skip=true -Dmaven.test.failure.ignore=true\"\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Sonar scan result check",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "timeout",
                      "arguments": [
                        {
                          "key": "time",
                          "value": {
                            "isLiteral": true,
                            "value": 2
                          }
                        },
                        {
                          "key": "unit",
                          "value": {
                            "isLiteral": true,
                            "value": "MINUTES"
                          }
                        }
                      ],
                      "children": [
                        {
                          "name": "retry",
                          "arguments": {
                            "isLiteral": true,
                            "value": 3
                          },
                          "children": [
                            {
                              "name": "script",
                              "arguments": [
                                {
                                  "key": "scriptBlock",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "def qg = waitForQualityGate()\n                            if (qg.status != 'OK') {\n                                error \"Pipeline aborted due to quality gate failure: ${qg.status}\"\n                            }"
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Development deploy approval and deployment",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "if (currentBuild.result == null || currentBuild.result == 'SUCCESS') {\n                        timeout(time: 3, unit: 'MINUTES') {\n                            // you can use the commented line if u have specific user group who CAN ONLY approve\n                            //input message:'Approve deployment?', submitter: 'it-ops'\n                            input message: 'Approve deployment?'\n                        }\n                        timeout(time: 2, unit: 'MINUTES') {\n                            //\n                            if (developmentArtifactVersion != null && !developmentArtifactVersion.isEmpty()) {\n                                // replace it with your application name or make it easily loaded from pom.xml\n                                def jarName = \"application-${developmentArtifactVersion}.jar\"\n                                echo \"the application is deploying ${jarName}\"\n                                // NOTE : CREATE your deployemnt JOB, where it can take parameters whoch is the jar name to fetch from jenkins workspace\n                                build job: 'ApplicationToDev', parameters: [[$class: 'StringParameterValue', name: 'jarName', value: jarName]]\n                                echo 'the application is deployed !'\n                            } else {\n                                error 'the application is not  deployed as development version is null!'\n                            }\n\n                        }\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "DEV sanity check",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sleep",
                      "arguments": [
                        {
                          "key": "time",
                          "value": {
                            "isLiteral": true,
                            "value": 45
                          }
                        }
                      ]
                    },
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "if (currentBuild.result == null || currentBuild.result == 'SUCCESS') {\n                        timeout(time: 1, unit: 'MINUTES') {\n                            script {\n                                def mvnHome = tool 'Maven 3.3.9'\n                                //NOTE : if u change the sanity test class name , change it here as well\n                                sh \"'${mvnHome}/bin/mvn' -Dtest=ApplicationSanityCheck_ITT surefire:test\"\n                            }\n\n                        }\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Release and publish artifact",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def mvnHome = tool 'Maven 3.3.9' //\n                    if (currentBuild.result == null || currentBuild.result == 'SUCCESS') {\n                        def v = getReleaseVersion()\n                        releasedVersion = v;\n                        if (v) {\n                            echo \"Building version ${v} - so released version is ${releasedVersion}\"\n                        }\n                        // jenkins user credentials ID which is transparent to the user and password change\n                        sshagent(['0000000-3b5a-454e-a8e6-c6b6114d36000']) {\n                            sh \"git tag -f v${v}\"\n                            sh \"git push -f --tags\"\n                        }\n                        sh \"'${mvnHome}/bin/mvn' -Dmaven.test.skip=true  versions:set  -DgenerateBackupPoms=false -DnewVersion=${v}\"\n                        sh \"'${mvnHome}/bin/mvn' -Dmaven.test.skip=true clean deploy\"\n\n                    } else {\n                        error \"Release is not possible. as build is not successful\"\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "branch",
                    "arguments": {
                      "isLiteral": true,
                      "value": "master"
                    }
                  }
                ]
              }
            },
            {
              "name": "Deploy to Acceptance",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "if (currentBuild.result == null || currentBuild.result == 'SUCCESS') {\n                        timeout(time: 3, unit: 'MINUTES') {\n                            //input message:'Approve deployment?', submitter: 'it-ops'\n                            input message: 'Approve deployment to UAT?'\n                        }\n                        timeout(time: 3, unit: 'MINUTES') {\n                            //  deployment job which will take the relasesed version\n                            if (releasedVersion != null && !releasedVersion.isEmpty()) {\n                                // make the applciation name for the jar configurable\n                                def jarName = \"application-${releasedVersion}.jar\"\n                                echo \"the application is deploying ${jarName}\"\n                                // NOTE : DO NOT FORGET to create your UAT deployment jar , check Job AlertManagerToUAT in Jenkins for reference\n                                // the deployemnt should be based into Nexus repo\n                                build job: 'AApplicationToACC', parameters: [[$class: 'StringParameterValue', name: 'jarName', value: jarName], [$class: 'StringParameterValue', name: 'appVersion', value: releasedVersion]]\n                                echo 'the application is deployed !'\n                            } else {\n                                error 'the application is not  deployed as released version is null!'\n                            }\n\n                        }\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "branch",
                    "arguments": {
                      "isLiteral": true,
                      "value": "master"
                    }
                  }
                ]
              }
            },
            {
              "name": "ACC E2E tests",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sleep",
                      "arguments": [
                        {
                          "key": "time",
                          "value": {
                            "isLiteral": true,
                            "value": 45
                          }
                        }
                      ]
                    },
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "if (currentBuild.result == null || currentBuild.result == 'SUCCESS') {\n                        timeout(time: 1, unit: 'MINUTES') {\n\n                            script {\n                                def mvnHome = tool 'Maven 3.3.9'\n                                // NOTE : if you change the test class name change it here as well\n                                sh \"'${mvnHome}/bin/mvn' -Dtest=ApplicationE2E surefire:test\"\n                            }\n\n                        }\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "branch",
                    "arguments": {
                      "isLiteral": true,
                      "value": "master"
                    }
                  }
                ]
              }
            }
          ],
          "post": {
            "conditions": [
              {
                "condition": "always",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "deleteDir",
                      "arguments": []
                    }
                  ]
                }
              },
              {
                "condition": "success",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sendEmail",
                      "arguments": {
                        "isLiteral": true,
                        "value": "Successful"
                      }
                    }
                  ]
                }
              },
              {
                "condition": "unstable",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sendEmail",
                      "arguments": {
                        "isLiteral": true,
                        "value": "Unstable"
                      }
                    }
                  ]
                }
              },
              {
                "condition": "failure",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sendEmail",
                      "arguments": {
                        "isLiteral": true,
                        "value": "Failed"
                      }
                    }
                  ]
                }
              }
            ]
          },
          "environment": [
            {
              "key": "EMAIL_RECIPIENTS",
              "value": {
                "isLiteral": true,
                "value": "mahmoud.romeh@test.com"
              }
            }
          ],
          "agent": {
            "type": "label",
            "argument": {
              "isLiteral": true,
              "value": "java8"
            }
          },
          "options": {
            "options": [
              {
                "name": "buildDiscarder",
                "arguments": [
                  {
                    "name": "logRotator",
                    "arguments": [
                      {
                        "key": "numToKeepStr",
                        "value": {
                          "isLiteral": true,
                          "value": "5"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "name": "timeout",
                "arguments": [
                  {
                    "key": "time",
                    "value": {
                      "isLiteral": true,
                      "value": 25
                    }
                  },
                  {
                    "key": "unit",
                    "value": {
                      "isLiteral": true,
                      "value": "MINUTES"
                    }
                  }
                ]
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "Romeh/spring-boot-quickstart-archtype",
      "repo_url": "https://github.com/Romeh/spring-boot-quickstart-archtype",
      "html_url_jenkinsfile": "https://github.com/Romeh/spring-boot-quickstart-archtype/blob/08d3387ba3634f91e4ca531ed3acf0fb4847fc63/src/main/resources/archetype-resources/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/112929218/git/blobs/f0a33547f6bd64bb96c71ac8f2f65daa563750da",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Build with unit testing",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "echo 'Pulling...' + env.BRANCH_NAME\n                    def mvnHome = tool 'Maven 3.3.9'\n                    if (isUnix()) {\n                        def targetVersion = getDevVersion()\n                        print 'target build version...'\n                        print targetVersion\n                        sh \"'${mvnHome}/bin/mvn' -Dintegration-tests.skip=true -Dbuild.number=${targetVersion} clean package\"\n                        def pom = readMavenPom file: 'pom.xml'\n                        // get the current development version\n                        developmentArtifactVersion = \"${pom.version}-${targetVersion}\"\n                        print pom.version\n                        // execute the unit testing and collect the reports\n                        junit '**//*target/surefire-reports/TEST-*.xml'\n                        archive 'target*//*.jar'\n                    } else {\n                        bat(/\"${mvnHome}\\bin\\mvn\" -Dintegration-tests.skip=true clean package/)\n                        def pom = readMavenPom file: 'pom.xml'\n                        print pom.version\n                        junit '**//*target/surefire-reports/TEST-*.xml'\n                        archive 'target*//*.jar'\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Integration tests",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def mvnHome = tool 'Maven 3.3.9'\n                    if (isUnix()) {\n                        // just to trigger the integration test without unit testing\n                        sh \"'${mvnHome}/bin/mvn'  verify -Dunit-tests.skip=true\"\n                    } else {\n                        bat(/\"${mvnHome}\\bin\\mvn\" verify -Dunit-tests.skip=true/)\n                    }"
                          }
                        }
                      ]
                    },
                    {
                      "name": "cucumber",
                      "arguments": [
                        {
                          "key": "buildStatus",
                          "value": {
                            "isLiteral": true,
                            "value": null
                          }
                        },
                        {
                          "key": "fileIncludePattern",
                          "value": {
                            "isLiteral": true,
                            "value": "**/cucumber.json"
                          }
                        },
                        {
                          "key": "jsonReportDirectory",
                          "value": {
                            "isLiteral": true,
                            "value": "target"
                          }
                        },
                        {
                          "key": "sortingMethod",
                          "value": {
                            "isLiteral": true,
                            "value": "ALPHABETICAL"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Sonar scan execution",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def mvnHome = tool 'Maven 3.3.9'\n                    withSonarQubeEnv {\n\n                        sh \"'${mvnHome}/bin/mvn'  verify sonar:sonar -Dintegration-tests.skip=true -Dmaven.test.failure.ignore=true\"\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Sonar scan result check",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "timeout",
                      "arguments": [
                        {
                          "key": "time",
                          "value": {
                            "isLiteral": true,
                            "value": 2
                          }
                        },
                        {
                          "key": "unit",
                          "value": {
                            "isLiteral": true,
                            "value": "MINUTES"
                          }
                        }
                      ],
                      "children": [
                        {
                          "name": "retry",
                          "arguments": {
                            "isLiteral": true,
                            "value": 3
                          },
                          "children": [
                            {
                              "name": "script",
                              "arguments": [
                                {
                                  "key": "scriptBlock",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "def qg = waitForQualityGate()\n                            if (qg.status != 'OK') {\n                                error \"Pipeline aborted due to quality gate failure: ${qg.status}\"\n                            }"
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Development deploy approval and deployment",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "if (currentBuild.result == null || currentBuild.result == 'SUCCESS') {\n                        timeout(time: 3, unit: 'MINUTES') {\n                            // you can use the commented line if u have specific user group who CAN ONLY approve\n                            //input message:'Approve deployment?', submitter: 'it-ops'\n                            input message: 'Approve deployment?'\n                        }\n                        timeout(time: 2, unit: 'MINUTES') {\n                            //\n                            if (developmentArtifactVersion != null && !developmentArtifactVersion.isEmpty()) {\n                                // replace it with your application name or make it easily loaded from pom.xml\n                                def jarName = \"application-${developmentArtifactVersion}.jar\"\n                                echo \"the application is deploying ${jarName}\"\n                                // NOTE : CREATE your deployemnt JOB, where it can take parameters whoch is the jar name to fetch from jenkins workspace\n                                build job: 'ApplicationToDev', parameters: [[$class: 'StringParameterValue', name: 'jarName', value: jarName]]\n                                echo 'the application is deployed !'\n                            } else {\n                                error 'the application is not  deployed as development version is null!'\n                            }\n\n                        }\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "DEV sanity check",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sleep",
                      "arguments": [
                        {
                          "key": "time",
                          "value": {
                            "isLiteral": true,
                            "value": 45
                          }
                        }
                      ]
                    },
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "if (currentBuild.result == null || currentBuild.result == 'SUCCESS') {\n                        timeout(time: 1, unit: 'MINUTES') {\n                            script {\n                                def mvnHome = tool 'Maven 3.3.9'\n                                //NOTE : if u change the sanity test class name , change it here as well\n                                sh \"'${mvnHome}/bin/mvn' -Dtest=ApplicationSanityCheck_ITT surefire:test\"\n                            }\n\n                        }\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Release and publish artifact",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def mvnHome = tool 'Maven 3.3.9' //\n                    if (currentBuild.result == null || currentBuild.result == 'SUCCESS') {\n                        def v = getReleaseVersion()\n                        releasedVersion = v;\n                        if (v) {\n                            echo \"Building version ${v} - so released version is ${releasedVersion}\"\n                        }\n                        // jenkins user credentials ID which is transparent to the user and password change\n                        sshagent(['0000000-3b5a-454e-a8e6-c6b6114d36000']) {\n                            sh \"git tag -f v${v}\"\n                            sh \"git push -f --tags\"\n                        }\n                        sh \"'${mvnHome}/bin/mvn' -Dmaven.test.skip=true  versions:set  -DgenerateBackupPoms=false -DnewVersion=${v}\"\n                        sh \"'${mvnHome}/bin/mvn' -Dmaven.test.skip=true clean deploy\"\n\n                    } else {\n                        error \"Release is not possible. as build is not successful\"\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "branch",
                    "arguments": {
                      "isLiteral": true,
                      "value": "master"
                    }
                  }
                ]
              }
            },
            {
              "name": "Deploy to Acceptance",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "if (currentBuild.result == null || currentBuild.result == 'SUCCESS') {\n                        timeout(time: 3, unit: 'MINUTES') {\n                            //input message:'Approve deployment?', submitter: 'it-ops'\n                            input message: 'Approve deployment to UAT?'\n                        }\n                        timeout(time: 3, unit: 'MINUTES') {\n                            //  deployment job which will take the relasesed version\n                            if (releasedVersion != null && !releasedVersion.isEmpty()) {\n                                // make the applciation name for the jar configurable\n                                def jarName = \"application-${releasedVersion}.jar\"\n                                echo \"the application is deploying ${jarName}\"\n                                // NOTE : DO NOT FORGET to create your UAT deployment jar , check Job AlertManagerToUAT in Jenkins for reference\n                                // the deployemnt should be based into Nexus repo\n                                build job: 'AApplicationToACC', parameters: [[$class: 'StringParameterValue', name: 'jarName', value: jarName], [$class: 'StringParameterValue', name: 'appVersion', value: releasedVersion]]\n                                echo 'the application is deployed !'\n                            } else {\n                                error 'the application is not  deployed as released version is null!'\n                            }\n\n                        }\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "branch",
                    "arguments": {
                      "isLiteral": true,
                      "value": "master"
                    }
                  }
                ]
              }
            },
            {
              "name": "ACC E2E tests",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sleep",
                      "arguments": [
                        {
                          "key": "time",
                          "value": {
                            "isLiteral": true,
                            "value": 45
                          }
                        }
                      ]
                    },
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "if (currentBuild.result == null || currentBuild.result == 'SUCCESS') {\n                        timeout(time: 1, unit: 'MINUTES') {\n\n                            script {\n                                def mvnHome = tool 'Maven 3.3.9'\n                                // NOTE : if you change the test class name change it here as well\n                                sh \"'${mvnHome}/bin/mvn' -Dtest=ApplicationE2E surefire:test\"\n                            }\n\n                        }\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "branch",
                    "arguments": {
                      "isLiteral": true,
                      "value": "master"
                    }
                  }
                ]
              }
            }
          ],
          "post": {
            "conditions": [
              {
                "condition": "always",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "deleteDir",
                      "arguments": []
                    }
                  ]
                }
              },
              {
                "condition": "success",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sendEmail",
                      "arguments": {
                        "isLiteral": true,
                        "value": "Successful"
                      }
                    }
                  ]
                }
              },
              {
                "condition": "unstable",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sendEmail",
                      "arguments": {
                        "isLiteral": true,
                        "value": "Unstable"
                      }
                    }
                  ]
                }
              },
              {
                "condition": "failure",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sendEmail",
                      "arguments": {
                        "isLiteral": true,
                        "value": "Failed"
                      }
                    }
                  ]
                }
              }
            ]
          },
          "environment": [
            {
              "key": "EMAIL_RECIPIENTS",
              "value": {
                "isLiteral": true,
                "value": "mahmoud.romeh@test.com"
              }
            }
          ],
          "agent": {
            "type": "label",
            "argument": {
              "isLiteral": true,
              "value": "java8"
            }
          },
          "options": {
            "options": [
              {
                "name": "buildDiscarder",
                "arguments": [
                  {
                    "name": "logRotator",
                    "arguments": [
                      {
                        "key": "numToKeepStr",
                        "value": {
                          "isLiteral": true,
                          "value": "5"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "name": "timeout",
                "arguments": [
                  {
                    "key": "time",
                    "value": {
                      "isLiteral": true,
                      "value": 25
                    }
                  },
                  {
                    "key": "unit",
                    "value": {
                      "isLiteral": true,
                      "value": "MINUTES"
                    }
                  }
                ]
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "Raag007/JenkinsCI-CD",
      "repo_url": "https://github.com/Raag007/JenkinsCI-CD",
      "html_url_jenkinsfile": "https://github.com/Raag007/JenkinsCI-CD/blob/c44726286cfe472aa868e4d4b67e50cb0d9652ab/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/129139339/git/blobs/378b7ddf066dce52e2036bcd7a2cc7bedb760b04",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Build with unit testing",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "echo 'Pulling...' + env.BRANCH_NAME\n                    def mvnHome = tool 'Maven 3.3.9'\n                    if (isUnix()) {\n                        def targetVersion = getDevVersion()\n                        print 'target build version...'\n                        print targetVersion\n                        sh \"'${mvnHome}/bin/mvn' -Dintegration-tests.skip=true -Dbuild.number=${targetVersion} clean package\"\n                        def pom = readMavenPom file: 'pom.xml'\n                        // get the current development version \n                        developmentArtifactVersion = \"${pom.version}-${targetVersion}\"\n                        print pom.version\n                        // execute the unit testing and collect the reports\n                        junit '**//*target/surefire-reports/TEST-*.xml'\n                        archive 'target*//*.jar'\n                    } else {\n                        bat(/\"${mvnHome}\\bin\\mvn\" -Dintegration-tests.skip=true clean package/)\n                        def pom = readMavenPom file: 'pom.xml'\n                        print pom.version\n                        junit '**//*target/surefire-reports/TEST-*.xml'\n                        archive 'target*//*.jar'\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Integration tests",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def mvnHome = tool 'Maven 3.3.9'\n                    if (isUnix()) {\n                        // just to trigger the integration test without unit testing\n                        sh \"'${mvnHome}/bin/mvn'  verify -Dunit-tests.skip=true\"\n                    } else {\n                        bat(/\"${mvnHome}\\bin\\mvn\" verify -Dunit-tests.skip=true/)\n                    }"
                          }
                        }
                      ]
                    },
                    {
                      "name": "cucumber",
                      "arguments": [
                        {
                          "key": "buildStatus",
                          "value": {
                            "isLiteral": true,
                            "value": null
                          }
                        },
                        {
                          "key": "fileIncludePattern",
                          "value": {
                            "isLiteral": true,
                            "value": "**/cucumber.json"
                          }
                        },
                        {
                          "key": "jsonReportDirectory",
                          "value": {
                            "isLiteral": true,
                            "value": "target"
                          }
                        },
                        {
                          "key": "sortingMethod",
                          "value": {
                            "isLiteral": true,
                            "value": "ALPHABETICAL"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Sonar scan execution",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def mvnHome = tool 'Maven 3.3.9'\n                    withSonarQubeEnv {\n                     \n                        sh \"'${mvnHome}/bin/mvn'  verify sonar:sonar -Dintegration-tests.skip=true -Dmaven.test.failure.ignore=true\"\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Sonar scan result check",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "timeout",
                      "arguments": [
                        {
                          "key": "time",
                          "value": {
                            "isLiteral": true,
                            "value": 2
                          }
                        },
                        {
                          "key": "unit",
                          "value": {
                            "isLiteral": true,
                            "value": "MINUTES"
                          }
                        }
                      ],
                      "children": [
                        {
                          "name": "retry",
                          "arguments": {
                            "isLiteral": true,
                            "value": 3
                          },
                          "children": [
                            {
                              "name": "script",
                              "arguments": [
                                {
                                  "key": "scriptBlock",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "def qg = waitForQualityGate()\n                            if (qg.status != 'OK') {\n                                error \"Pipeline aborted due to quality gate failure: ${qg.status}\"\n                            }"
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Development deploy approval and deployment",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "if (currentBuild.result == null || currentBuild.result == 'SUCCESS') {\n                        timeout(time: 3, unit: 'MINUTES') {\n                            // you can use the commented line if u have specific user group who CAN ONLY approve\n                            //input message:'Approve deployment?', submitter: 'it-ops'\n                            input message: 'Approve deployment?'\n                        }\n                        timeout(time: 2, unit: 'MINUTES') {\n                            //\n                            if (developmentArtifactVersion != null && !developmentArtifactVersion.isEmpty()) {\n                                // replace it with your application name or make it easily loaded from pom.xml\n                                def jarName = \"application-${developmentArtifactVersion}.jar\"\n                                echo \"the application is deploying ${jarName}\"\n                                // NOTE : CREATE your deployemnt JOB, where it can take parameters whoch is the jar name to fetch from jenkins workspace\n                                build job: 'ApplicationToDev', parameters: [[$class: 'StringParameterValue', name: 'jarName', value: jarName]]\n                                echo 'the application is deployed !'\n                            } else {\n                                error 'the application is not  deployed as development version is null!'\n                            }\n\n                        }\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "DEV sanity check",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sleep",
                      "arguments": [
                        {
                          "key": "time",
                          "value": {
                            "isLiteral": true,
                            "value": 45
                          }
                        }
                      ]
                    },
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "if (currentBuild.result == null || currentBuild.result == 'SUCCESS') {\n                        timeout(time: 1, unit: 'MINUTES') {\n                            script {\n                                def mvnHome = tool 'Maven 3.3.9'\n                                //NOTE : if u change the sanity test class name , change it here as well\n                                sh \"'${mvnHome}/bin/mvn' -Dtest=ApplicationSanityCheck_ITT surefire:test\"\n                            }\n\n                        }\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Release and publish artifact",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def mvnHome = tool 'Maven 3.3.9' //\n                    if (currentBuild.result == null || currentBuild.result == 'SUCCESS') {\n                        def v = getReleaseVersion()\n                        releasedVersion = v;\n                        if (v) {\n                            echo \"Building version ${v} - so released version is ${releasedVersion}\"\n                        }\n                        // jenkins user credentials ID which is transparent to the user and password change\n                        sshagent(['0000000-3b5a-454e-a8e6-c6b6114d36000']) {\n                            sh \"git tag -f v${v}\"\n                            sh \"git push -f --tags\"\n                        }\n                        sh \"'${mvnHome}/bin/mvn' -Dmaven.test.skip=true  versions:set  -DgenerateBackupPoms=false -DnewVersion=${v}\"\n                        sh \"'${mvnHome}/bin/mvn' -Dmaven.test.skip=true clean deploy\"\n\n                    } else {\n                        error \"Release is not possible. as build is not successful\"\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "branch",
                    "arguments": {
                      "isLiteral": true,
                      "value": "master"
                    }
                  }
                ]
              }
            },
            {
              "name": "Deploy to Acceptance",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "if (currentBuild.result == null || currentBuild.result == 'SUCCESS') {\n                        timeout(time: 3, unit: 'MINUTES') {\n                            //input message:'Approve deployment?', submitter: 'it-ops'\n                            input message: 'Approve deployment to UAT?'\n                        }\n                        timeout(time: 3, unit: 'MINUTES') {\n                            //  deployment job which will take the relasesed version\n                            if (releasedVersion != null && !releasedVersion.isEmpty()) {\n                                // make the applciation name for the jar configurable\n                                def jarName = \"application-${releasedVersion}.jar\"\n                                echo \"the application is deploying ${jarName}\"\n                                // NOTE : DO NOT FORGET to create your UAT deployment jar , check Job AlertManagerToUAT in Jenkins for reference\n                                // the deployemnt should be based into Nexus repo\n                                build job: 'AApplicationToACC', parameters: [[$class: 'StringParameterValue', name: 'jarName', value: jarName], [$class: 'StringParameterValue', name: 'appVersion', value: releasedVersion]]\n                                echo 'the application is deployed !'\n                            } else {\n                                error 'the application is not  deployed as released version is null!'\n                            }\n\n                        }\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "branch",
                    "arguments": {
                      "isLiteral": true,
                      "value": "master"
                    }
                  }
                ]
              }
            },
            {
              "name": "ACC E2E tests",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sleep",
                      "arguments": [
                        {
                          "key": "time",
                          "value": {
                            "isLiteral": true,
                            "value": 45
                          }
                        }
                      ]
                    },
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "if (currentBuild.result == null || currentBuild.result == 'SUCCESS') {\n                        timeout(time: 1, unit: 'MINUTES') {\n\n                            script {\n                                def mvnHome = tool 'Maven 3.3.9'\n                                // NOTE : if you change the test class name change it here as well\n                                sh \"'${mvnHome}/bin/mvn' -Dtest=ApplicationE2E surefire:test\"\n                            }\n\n                        }\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "branch",
                    "arguments": {
                      "isLiteral": true,
                      "value": "master"
                    }
                  }
                ]
              }
            }
          ],
          "post": {
            "conditions": [
              {
                "condition": "always",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "deleteDir",
                      "arguments": []
                    }
                  ]
                }
              },
              {
                "condition": "success",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sendEmail",
                      "arguments": {
                        "isLiteral": true,
                        "value": "Successful"
                      }
                    }
                  ]
                }
              },
              {
                "condition": "unstable",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sendEmail",
                      "arguments": {
                        "isLiteral": true,
                        "value": "Unstable"
                      }
                    }
                  ]
                }
              },
              {
                "condition": "failure",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sendEmail",
                      "arguments": {
                        "isLiteral": true,
                        "value": "Failed"
                      }
                    }
                  ]
                }
              }
            ]
          },
          "environment": [
            {
              "key": "EMAIL_RECIPIENTS",
              "value": {
                "isLiteral": true,
                "value": "mahmoud.romeh@test.com"
              }
            }
          ],
          "agent": {
            "type": "label",
            "argument": {
              "isLiteral": true,
              "value": "java8"
            }
          },
          "options": {
            "options": [
              {
                "name": "buildDiscarder",
                "arguments": [
                  {
                    "name": "logRotator",
                    "arguments": [
                      {
                        "key": "numToKeepStr",
                        "value": {
                          "isLiteral": true,
                          "value": "5"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "name": "timeout",
                "arguments": [
                  {
                    "key": "time",
                    "value": {
                      "isLiteral": true,
                      "value": 25
                    }
                  },
                  {
                    "key": "unit",
                    "value": {
                      "isLiteral": true,
                      "value": "MINUTES"
                    }
                  }
                ]
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "bordei18/ignite",
      "repo_url": "https://github.com/bordei18/ignite",
      "html_url_jenkinsfile": "https://github.com/bordei18/ignite/blob/76f653779db87e7ed1eecccae55e2fbeeee374dc/spring-boot-ignite/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/127245329/git/blobs/c426f63d3734ed5729bb47675e09062b3abade76",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Build With Unit Testing",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "echo 'Pulling...' + env.BRANCH_NAME\n                    def mvnHome = tool 'Maven 3.3.9'\n                    if (isUnix()) {\n                        sh \"'${mvnHome}/bin/mvn' -Dmaven.test.failure.ignore clean package\"\n                        def pom = readMavenPom file: 'pom.xml'\n                        print pom.version\n                        junit '**/target/surefire-reports/TEST-*.xml'\n                        archive 'target/*.jar'\n                    } else {\n                        bat(/\"${mvnHome}\\bin\\mvn\" -Dmaven.test.failure.ignore clean package/)\n                        def pom = readMavenPom file: 'pom.xml'\n                        print pom.version\n                        junit '**/target/surefire-reports/TEST-*.xml'\n                        archive 'target/*.jar'\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Integration Tests",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def mvnHome = tool 'Maven 3.3.9'\n                    if (isUnix()) {\n                        sh \"'${mvnHome}/bin/mvn'  verify -Dunit-tests.skip=true\"\n                    } else {\n                        bat(/\"${mvnHome}\\bin\\mvn\" verify -Dunit-tests.skip=true/)\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Sonar Check",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def mvnHome = tool 'Maven 3.3.9'\n                    // replace it with your sonar server\n                    sh \"'${mvnHome}/bin/mvn'  verify sonar:sonar -Dsonar.host.url=http://romehjava.bc/sonar/ -Dmaven.test.failure.ignore=true\""
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "ITT Deploy Approval and deployment",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "timeout",
                      "arguments": [
                        {
                          "key": "time",
                          "value": {
                            "isLiteral": true,
                            "value": 3
                          }
                        },
                        {
                          "key": "unit",
                          "value": {
                            "isLiteral": true,
                            "value": "MINUTES"
                          }
                        }
                      ],
                      "children": [
                        {
                          "name": "input",
                          "arguments": [
                            {
                              "key": "message",
                              "value": {
                                "isLiteral": true,
                                "value": "Approve deployment?"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "name": "timeout",
                      "arguments": [
                        {
                          "key": "time",
                          "value": {
                            "isLiteral": true,
                            "value": 2
                          }
                        },
                        {
                          "key": "unit",
                          "value": {
                            "isLiteral": true,
                            "value": "MINUTES"
                          }
                        }
                      ],
                      "children": [
                        {
                          "name": "build",
                          "arguments": [
                            {
                              "key": "job",
                              "value": {
                                "isLiteral": true,
                                "value": "AlertManagerToITT"
                              }
                            }
                          ]
                        },
                        {
                          "name": "echo",
                          "arguments": [
                            {
                              "key": "message",
                              "value": {
                                "isLiteral": true,
                                "value": "the application is deployed !"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "expression",
                    "arguments": [
                      {
                        "key": "scriptBlock",
                        "value": {
                          "isLiteral": true,
                          "value": "currentBuild.result == null || currentBuild.result == 'SUCCESS' && env.BRANCH_NAME == 'master'"
                        }
                      }
                    ]
                  }
                ]
              }
            }
          ],
          "post": {
            "conditions": [
              {
                "condition": "always",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "deleteDir",
                      "arguments": []
                    }
                  ]
                }
              },
              {
                "condition": "success",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sendEmail",
                      "arguments": {
                        "isLiteral": true,
                        "value": "Successful"
                      }
                    }
                  ]
                }
              },
              {
                "condition": "unstable",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sendEmail",
                      "arguments": {
                        "isLiteral": true,
                        "value": "Unstable"
                      }
                    }
                  ]
                }
              },
              {
                "condition": "failure",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sendEmail",
                      "arguments": {
                        "isLiteral": true,
                        "value": "Failed"
                      }
                    }
                  ]
                }
              }
            ]
          },
          "environment": [
            {
              "key": "EMAIL_RECIPIENTS",
              "value": {
                "isLiteral": true,
                "value": "mahmoud.romih@test.com"
              }
            }
          ],
          "agent": {
            "type": "label",
            "argument": {
              "isLiteral": true,
              "value": "jdk8"
            }
          },
          "options": {
            "options": [
              {
                "name": "buildDiscarder",
                "arguments": [
                  {
                    "name": "logRotator",
                    "arguments": [
                      {
                        "key": "numToKeepStr",
                        "value": {
                          "isLiteral": true,
                          "value": "10"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "name": "timeout",
                "arguments": [
                  {
                    "key": "time",
                    "value": {
                      "isLiteral": true,
                      "value": 20
                    }
                  },
                  {
                    "key": "unit",
                    "value": {
                      "isLiteral": true,
                      "value": "MINUTES"
                    }
                  }
                ]
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "kstateome/lti-attendance",
      "repo_url": "https://github.com/kstateome/lti-attendance",
      "html_url_jenkinsfile": "https://github.com/kstateome/lti-attendance/blob/7c01ac5d88b402a81f087c452d09a8967aa6b1d4/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/56523179/git/blobs/f600be03c89ae805d8dd7de8c5bfd568d5ecef80",
      "jenkins_pipeline": [
        {
          "error": [
            "Tool type \"maven\" does not have an install of \"Maven 3.5\" configured - did you mean \"Jenkins_maven\"? @ line 26, column 15.",
            "Tool type \"jdk\" does not have an install of \"Java 8\" configured - did you mean \"null\"? @ line 27, column 13."
          ]
        }
      ]
    },
    {
      "full_repo_name": "vmassol/repo1",
      "repo_url": "https://github.com/vmassol/repo1",
      "html_url_jenkinsfile": "https://github.com/vmassol/repo1/blob/9ca5ec419fbdf86cdb7f850dd32b60cd5c31f1a6/vars/testBuild2.groovy",
      "api_url_jenkinsfile": "https://api.github.com/repositories/93190088/git/blobs/a5a1f2aa85ec6bac56c658b134687673598f6a18",
      "jenkins_pipeline": [
        {
          "error": "unable to resolve class org.jvnet.hudson.plugins.groovypostbuild.GroovyPostbuildSummaryAction\n @ line 26, column 1."
        }
      ]
    },
    {
      "full_repo_name": "xwiki/xwiki-jenkins-pipeline",
      "repo_url": "https://github.com/xwiki/xwiki-jenkins-pipeline",
      "html_url_jenkinsfile": "https://github.com/xwiki/xwiki-jenkins-pipeline/blob/401f6a54ac9009e4dfaa0a9262e08ed89066909f/vars/xwikiBuild.groovy",
      "api_url_jenkinsfile": "https://api.github.com/repositories/80634587/git/blobs/a02fa85c6c22242b30aa15d4e33edd0f03461c12",
      "jenkins_pipeline": [
        {
          "error": "unable to resolve class com.jenkinsci.plugins.badge.action.BadgeAction\n @ line 26, column 1."
        }
      ]
    },
    {
      "full_repo_name": "cosnics/cosnics",
      "repo_url": "https://github.com/cosnics/cosnics",
      "html_url_jenkinsfile": "https://github.com/cosnics/cosnics/blob/e287fa36b0185e860ac57d01d51b964087db2ac3/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/76360125/git/blobs/68940393ab963b01cae324deb073c2d1b1f5e35e",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Create Build",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "Notifying slack build has started"
                          }
                        }
                      ]
                    },
                    {
                      "name": "notifySlack",
                      "arguments": []
                    },
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "Delete unsupported code"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "rm -rf src/Chamilo/Application/Survey"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "rm -rf src/Chamilo/Core/Repository/ContentObject/Survey"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "rm -rf src/Chamilo/Core/Repository/ContentObject/Bookmark"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "rm -rf src/Chamilo/Core/Repository/ContentObject/Matterhorn"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "rm -rf src/Chamilo/Core/Repository/ContentObject/PhysicalLocation"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "rm -rf src/Chamilo/Core/Repository/ContentObject/Vimeo"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "rm -rf src/Chamilo/Core/Repository/Implementation/Bitbucket"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "rm -rf src/Chamilo/Core/Repository/Implementation/Box"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "rm -rf src/Chamilo/Core/Repository/Implementation/Dropbox"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "rm -rf src/Chamilo/Core/Repository/Implementation/Flickr"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "rm -rf src/Chamilo/Core/Repository/Implementation/Hq23"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "rm -rf src/Chamilo/Core/Repository/Implementation/Matterhorn"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "rm -rf src/Chamilo/Core/Repository/Implementation/Photobucket"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "rm -rf src/Chamilo/Core/Repository/Implementation/Picase"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "rm -rf src/Chamilo/Core/Repository/Implementation/Scribd"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "rm -rf src/Chamilo/Core/Repository/Implementation/Slideshare"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "rm -rf src/Chamilo/Core/Repository/Implementation/Soundcloud"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "rm -rf src/Chamilo/Core/Repository/Implementation/Vimeo"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "rm -rf src/Chamilo/Core/Repository/Implementation/Wikimedia"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "rm -rf src/Chamilo/Core/Repository/Implementation/Wikipedia"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "rm -rf src/Chamilo/Application/Weblcms/Tool/Implementation/Ephorus"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "rm -rf src/Chamilo/Application/Weblcms/Tool/Implementation/Chat"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "rm -rf src/Chamilo/Application/Weblcms/Tool/Implementation/Geolocation"
                          }
                        }
                      ]
                    },
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "Composer update"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "composer update -o"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Deploy",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "Deploying.."
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "ansible-playbook /ansible/deploy.yml -i /ansible/hosts --extra-vars \"hosts=test remote_user=jenkins project_root=/cosnics/${BRANCH_NAME} project_local_path=${WORKSPACE}/ cosnics_url=https://demo.cosnics.org/${BRANCH_NAME}/current/web/ cosnics_deploy_database_name=cosnics-${BRANCH_NAME} cosnics_deploy_test_database_name=cosnics-${BRANCH_NAME}-test\""
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Test",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "dir",
                      "arguments": {
                        "isLiteral": false,
                        "value": "\"/cosnics/${env.BRANCH_NAME}/current/\""
                      },
                      "children": [
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "php console chamilo:phpunit:generate-config"
                              }
                            }
                          ]
                        },
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": false,
                                "value": "\"bin/phpunit -c files/configuration/phpunit.xml --log-junit ${WORKSPACE}/build-reports/phpunit-result.xml\""
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "name": "step",
                      "arguments": [
                        {
                          "key": "delegate",
                          "value": {
                            "isLiteral": false,
                            "value": "[$class: 'XUnitBuilder',\n                    thresholds: [[$class: 'FailedThreshold', unstableThreshold: '0']],\n                    tools: [[$class: 'JUnitType', pattern: \"build-reports/*.xml\"]]]"
                          }
                        }
                      ]
                    },
                    {
                      "name": "publishHTML",
                      "arguments": [
                        {
                          "key": "allowMissing",
                          "value": {
                            "isLiteral": true,
                            "value": false
                          }
                        },
                        {
                          "key": "alwaysLinkToLastBuild",
                          "value": {
                            "isLiteral": true,
                            "value": false
                          }
                        },
                        {
                          "key": "keepAll",
                          "value": {
                            "isLiteral": true,
                            "value": false
                          }
                        },
                        {
                          "key": "reportDir",
                          "value": {
                            "isLiteral": true,
                            "value": "build-reports"
                          }
                        },
                        {
                          "key": "reportFiles",
                          "value": {
                            "isLiteral": true,
                            "value": "index.html"
                          }
                        },
                        {
                          "key": "reportName",
                          "value": {
                            "isLiteral": true,
                            "value": "HTML Report"
                          }
                        },
                        {
                          "key": "reportTitles",
                          "value": {
                            "isLiteral": true,
                            "value": ""
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "post": {
            "conditions": [
              {
                "condition": "always",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "notifySlack",
                      "arguments": {
                        "isLiteral": false,
                        "value": "${currentBuild.result}"
                      }
                    }
                  ]
                }
              },
              {
                "condition": "unstable",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": false,
                            "value": "${currentBuild.result}"
                          }
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "condition": "failure",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": false,
                            "value": "${currentBuild.result}"
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          },
          "agent": {
            "type": "any"
          },
          "options": {
            "options": [
              {
                "name": "disableConcurrentBuilds",
                "arguments": []
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "rduart/XMLtoPDFPipeline",
      "repo_url": "https://github.com/rduart/XMLtoPDFPipeline",
      "html_url_jenkinsfile": "https://github.com/rduart/XMLtoPDFPipeline/blob/66995e5e0def62e84ed73b55d4933bc3766ebf02/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/131035093/git/blobs/837ff5a9d134b90c50a12033179dfe690bff8700",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Preparation",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "git",
                      "arguments": [
                        {
                          "key": "url",
                          "value": {
                            "isLiteral": true,
                            "value": "https://github.com/rduart/XMLtoPDF.git"
                          }
                        },
                        {
                          "key": "branch",
                          "value": {
                            "isLiteral": true,
                            "value": "master"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "git clean -f && git reset --hard origin/Dev"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Clean Build",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "echo 'Pulling...' + env.BRANCH_NAME\n\t\t\t\t\t\n                    def targetVersion = getDevVersion()\n                    print 'target build version...'\n                    print targetVersion\n\t\t\t\t\t\n                    sh \"'${mvnHome}/bin/mvn' -e --file /var/lib/jenkins/workspace/jiraPL/XMLtoPDF/pom.xml -Dintegration-tests.skip=true -Dbuild.number=${targetVersion} clean package cobertura:cobertura -Dcobertura.report.format=xml -B\"\n\t\t\t\t\n                    def pom = readMavenPom file: '/var/lib/jenkins/workspace/jiraPL/XMLtoPDF/pom.xml'\n                    // get the current development version \n                    developmentArtifactVersion = \"${pom.version}-${targetVersion}\"\n\t\t\t\t\techo 'developmentArtifactVersion:   ' + developmentArtifactVersion\n                    print pom.version"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Build Release",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def targetVersion = getReleaseVersion()\n\t\t\t\t\tdef pom = readMavenPom file: '/var/lib/jenkins/workspace/jiraPL/XMLtoPDF/pom.xml'\n\t\t\t\t\tdef version = pom.version.replace(\"-SNAPSHOT\", \".${currentBuild.number}\")\n\t\t\t\t\t\n\t\t\t\t\tprint targetVersion\n\t\t\t\t\tprint pom.version\n\t\t\t\t\tprint version\n\t\t\t\t\t\n\t\t\t\t\tsh \"'${mvnHome}/bin/mvn' -e --file /var/lib/jenkins/workspace/jiraPL/XMLtoPDF/pom.xml -Dtag=${version} -DreleaseVersion=${version} -DdevelopmentVersion=${version} release:prepare release:perform -B\""
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "SonarQube analysis",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "withSonarQubeEnv",
                      "arguments": {
                        "isLiteral": true,
                        "value": "SonarQubeServer"
                      },
                      "children": [
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": false,
                                "value": "${'/var/lib/jenkins/tools/hudson.plugins.sonar.SonarRunnerInstallation/Sonar/bin/sonar-scanner'+' -Dsonar.host.url=http://158.96.16.211:9000/'+' -Dsonar.projectVersion=1.0'+' -Dsonar.sourceEncoding=UTF-8'+' -Dsonar.projectKey=TestPipeline'+' -Dsonar.java.binaries=/var/lib/jenkins/workspace/TestPipeline/SpringPOC/target/classes'+' -Dsonar.sources=SpringPOC/src'+' -Dsonar.projectBaseDir=/var/lib/jenkins/workspace/TestPipeline'}"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ],
              "post": {
                "conditions": [
                  {
                    "condition": "always",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "echo",
                          "arguments": [
                            {
                              "key": "message",
                              "value": {
                                "isLiteral": true,
                                "value": "SonarQube Analysis  Done"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  },
                  {
                    "condition": "failure",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "echo",
                          "arguments": [
                            {
                              "key": "message",
                              "value": {
                                "isLiteral": true,
                                "value": "SonarQube Analysis  failure"
                              }
                            }
                          ]
                        },
                        {
                          "name": "script",
                          "arguments": [
                            {
                              "key": "scriptBlock",
                              "value": {
                                "isLiteral": true,
                                "value": "echo 'AWS Code Deploy  failure'\n\t\t\t\t\t\ttestIssue = [fields: [ project: [key: 'PTP'],\n\t\t\t\t\t\t\t\t\tsummary: 'Jenkins Build Failure.',\n\t\t\t\t\t\t\t\t\tdescription: \"Jenkins Build Failed - SonarQube Analysis Failed -  Job name: '${env.JOB_NAME} - Build Number: ${env.BUILD_NUMBER}  URL: ${env.BUILD_URL}'\",\n\t\t\t\t\t\t\t\t\tpriority: [name: 'Highest'],\n\t\t\t\t\t\t\t\t\tissuetype: [name: 'Bug']]]\n\n\t\t\t\t\t\tresponse = jiraNewIssue issue: testIssue, site: 'CAMMIS'\n\n\t\t\t\t\t\techo response.successful.toString()\n\t\t\t\t\t\techo response.data.toString()\n\t\t\t\t\t\t\n\t\t\t\t\t\tslackSend (color: '#FFFF00', message: \"Failed: Job - SonarQube Analysis Failed '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})\")"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  },
                  {
                    "condition": "success",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "echo",
                          "arguments": [
                            {
                              "key": "message",
                              "value": {
                                "isLiteral": true,
                                "value": "SonarQube Analysis Success"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  }
                ]
              }
            },
            {
              "name": "SonarQube Quality Gate",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "node",
                      "arguments": {
                        "isLiteral": true,
                        "value": "master"
                      },
                      "children": [
                        {
                          "name": "script",
                          "arguments": [
                            {
                              "key": "scriptBlock",
                              "value": {
                                "isLiteral": true,
                                "value": "timeout(time: 1, unit: 'HOURS') { \n\t\t\t\t\t\t\techo '************ Inside Quality Gate'\n\t\t\t\t\t\t\tqualityGate = waitForQualityGate() \n\t\t\t\t\t\t\techo qualityGate.status.toString() \n\t\t\t\t\t\t\tif (qualityGate.status != 'OK') {\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\ttestIssue = [fields: [ project: [key: 'PTP'],\n\t\t\t\t\t\t\t\t\tsummary: 'Jenkins Build Failure.',\n\t\t\t\t\t\t\t\t\tdescription: \"Jenkins Build Sonar Quality Gate Failure -  Job name: '${env.JOB_NAME} - Build Number: ${env.BUILD_NUMBER}  URL: ${env.BUILD_URL}'\",\n\t\t\t\t\t\t\t\t\tpriority: [name: 'Highest'],\n\t\t\t\t\t\t\t\t\tissuetype: [name: 'Bug']]]\n\n\t\t\t\t\t\t\t\tresponse = jiraNewIssue issue: testIssue, site: 'CAMMIS'\n\n\t\t\t\t\t\t\t\techo response.successful.toString()\n\t\t\t\t\t\t\t\techo response.data.toString()\n\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tslackSend (color: '#FFFF00', message: \"Failed: Job - Sonar Quality Gate Failure '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})\")\n\t\t\t\t\t\t\t\t// Fail the build\n\t\t\t\t\t\t\t\terror \"Pipeline aborted due to quality gate failure: ${qualityGate.status}\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ],
              "post": {
                "conditions": [
                  {
                    "condition": "always",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "echo",
                          "arguments": [
                            {
                              "key": "message",
                              "value": {
                                "isLiteral": true,
                                "value": "SonarQube Quality Gate  Done"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  },
                  {
                    "condition": "failure",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "echo",
                          "arguments": [
                            {
                              "key": "message",
                              "value": {
                                "isLiteral": true,
                                "value": "SonarQube Quality Gate  failure"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  },
                  {
                    "condition": "success",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "echo",
                          "arguments": [
                            {
                              "key": "message",
                              "value": {
                                "isLiteral": true,
                                "value": "SonarQube Quality Gate Success"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  }
                ]
              }
            },
            {
              "name": "Unit Test Report",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "junit",
                      "arguments": [
                        {
                          "key": "testResults",
                          "value": {
                            "isLiteral": true,
                            "value": "**/target/surefire-reports/*.xml"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "post": {
                "conditions": [
                  {
                    "condition": "always",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "echo",
                          "arguments": [
                            {
                              "key": "message",
                              "value": {
                                "isLiteral": true,
                                "value": "always"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  },
                  {
                    "condition": "changed",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "echo",
                          "arguments": [
                            {
                              "key": "message",
                              "value": {
                                "isLiteral": true,
                                "value": "change"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  },
                  {
                    "condition": "aborted",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "echo",
                          "arguments": [
                            {
                              "key": "message",
                              "value": {
                                "isLiteral": true,
                                "value": "aborted"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  },
                  {
                    "condition": "failure",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "echo",
                          "arguments": [
                            {
                              "key": "message",
                              "value": {
                                "isLiteral": true,
                                "value": "failure"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  },
                  {
                    "condition": "success",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "echo",
                          "arguments": [
                            {
                              "key": "message",
                              "value": {
                                "isLiteral": true,
                                "value": "success"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  },
                  {
                    "condition": "unstable",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "echo",
                          "arguments": [
                            {
                              "key": "message",
                              "value": {
                                "isLiteral": true,
                                "value": "unstable"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  }
                ]
              }
            },
            {
              "name": "Code Coverage Report",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "cobertura",
                      "arguments": [
                        {
                          "key": "autoUpdateHealth",
                          "value": {
                            "isLiteral": true,
                            "value": false
                          }
                        },
                        {
                          "key": "autoUpdateStability",
                          "value": {
                            "isLiteral": true,
                            "value": false
                          }
                        },
                        {
                          "key": "coberturaReportFile",
                          "value": {
                            "isLiteral": true,
                            "value": "**/target/site/cobertura/coverage.xml"
                          }
                        },
                        {
                          "key": "conditionalCoverageTargets",
                          "value": {
                            "isLiteral": true,
                            "value": "70, 0, 0"
                          }
                        },
                        {
                          "key": "failUnhealthy",
                          "value": {
                            "isLiteral": true,
                            "value": false
                          }
                        },
                        {
                          "key": "failUnstable",
                          "value": {
                            "isLiteral": true,
                            "value": false
                          }
                        },
                        {
                          "key": "lineCoverageTargets",
                          "value": {
                            "isLiteral": true,
                            "value": "80, 0, 0"
                          }
                        },
                        {
                          "key": "maxNumberOfBuilds",
                          "value": {
                            "isLiteral": true,
                            "value": 0
                          }
                        },
                        {
                          "key": "methodCoverageTargets",
                          "value": {
                            "isLiteral": true,
                            "value": "80, 0, 0"
                          }
                        },
                        {
                          "key": "onlyStable",
                          "value": {
                            "isLiteral": true,
                            "value": false
                          }
                        },
                        {
                          "key": "sourceEncoding",
                          "value": {
                            "isLiteral": true,
                            "value": "ASCII"
                          }
                        },
                        {
                          "key": "zoomCoverageChart",
                          "value": {
                            "isLiteral": true,
                            "value": false
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "post": {
                "conditions": [
                  {
                    "condition": "always",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "echo",
                          "arguments": [
                            {
                              "key": "message",
                              "value": {
                                "isLiteral": true,
                                "value": "Code Coverage Report  Done"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  },
                  {
                    "condition": "failure",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "echo",
                          "arguments": [
                            {
                              "key": "message",
                              "value": {
                                "isLiteral": true,
                                "value": "Code Coverage Report  failure"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  },
                  {
                    "condition": "success",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "echo",
                          "arguments": [
                            {
                              "key": "message",
                              "value": {
                                "isLiteral": true,
                                "value": "Code Coverage Report Success"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  }
                ]
              }
            },
            {
              "name": "Maven Nexus Deploy",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": false,
                            "value": "\"'${mvnHome}/bin/mvn' -X -B --file /var/lib/jenkins/workspace/TestPipeline/SpringPOC/pom.xml -Dintegration-tests.skip=true deploy\""
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "post": {
                "conditions": [
                  {
                    "condition": "always",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "echo",
                          "arguments": [
                            {
                              "key": "message",
                              "value": {
                                "isLiteral": true,
                                "value": "Maven Nexus Deploy  Done"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  },
                  {
                    "condition": "failure",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "echo",
                          "arguments": [
                            {
                              "key": "message",
                              "value": {
                                "isLiteral": true,
                                "value": "Maven Nexus Deploy  failure"
                              }
                            }
                          ]
                        },
                        {
                          "name": "script",
                          "arguments": [
                            {
                              "key": "scriptBlock",
                              "value": {
                                "isLiteral": true,
                                "value": "echo 'AWS Code Deploy  failure'\n\t\t\t\t\t\ttestIssue = [fields: [ project: [key: 'PTP'],\n\t\t\t\t\t\t\t\t\tsummary: 'Jenkins Build Failure.',\n\t\t\t\t\t\t\t\t\tdescription: \"Jenkins Build Failed - Nexus Depolyment Failed -  Job name: '${env.JOB_NAME} - Build Number: ${env.BUILD_NUMBER}  URL: ${env.BUILD_URL}'\",\n\t\t\t\t\t\t\t\t\tpriority: [name: 'Highest'],\n\t\t\t\t\t\t\t\t\tissuetype: [name: 'Bug']]]\n\n\t\t\t\t\t\tresponse = jiraNewIssue issue: testIssue, site: 'CAMMIS'\n\n\t\t\t\t\t\techo response.successful.toString()\n\t\t\t\t\t\techo response.data.toString()\n\t\t\t\t\t\t\n\t\t\t\t\t\tslackSend (color: '#FFFF00', message: \"Failed: Job - AWS Code Deploy Failed '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})\")"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  },
                  {
                    "condition": "success",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "echo",
                          "arguments": [
                            {
                              "key": "message",
                              "value": {
                                "isLiteral": true,
                                "value": "Maven Nexus Deploy Success"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  }
                ]
              }
            },
            {
              "name": "Jira Update Issues",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "Jira Update Issues"
                          }
                        }
                      ]
                    },
                    {
                      "name": "step",
                      "arguments": [
                        {
                          "key": "delegate",
                          "value": {
                            "isLiteral": false,
                            "value": "[$class: 'hudson.plugins.jira.JiraIssueUpdater', \n\t\t\t\t\tissueSelector: [$class: 'hudson.plugins.jira.selector.DefaultIssueSelector'], \n\t\t\t\t\tscm: [$class: 'GitSCM', branches: [[name: '*/master']], \n\t\t\t\t\tuserRemoteConfigs: [[url: 'https://github.com/CA-MMISDigitalServices/Dev.git']]]]"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "post": {
                "conditions": [
                  {
                    "condition": "always",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "echo",
                          "arguments": [
                            {
                              "key": "message",
                              "value": {
                                "isLiteral": true,
                                "value": "Jira Update Issues"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  },
                  {
                    "condition": "failure",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "echo",
                          "arguments": [
                            {
                              "key": "message",
                              "value": {
                                "isLiteral": true,
                                "value": "Jira Update Issues  failure"
                              }
                            }
                          ]
                        },
                        {
                          "name": "script",
                          "arguments": [
                            {
                              "key": "scriptBlock",
                              "value": {
                                "isLiteral": true,
                                "value": "echo 'AWS Code Deploy  failure'\n\t\t\t\t\t\ttestIssue = [fields: [ project: [key: 'PTP'],\n\t\t\t\t\t\t\t\t\tsummary: 'Jenkins Build Failure.',\n\t\t\t\t\t\t\t\t\tdescription: \"Jenkins Build Failed - Jira Update Issues Failed-  Job name: '${env.JOB_NAME} - Build Number: ${env.BUILD_NUMBER}  URL: ${env.BUILD_URL}'\",\n\t\t\t\t\t\t\t\t\tpriority: [name: 'Highest'],\n\t\t\t\t\t\t\t\t\tissuetype: [name: 'Bug']]]\n\n\t\t\t\t\t\tresponse = jiraNewIssue issue: testIssue, site: 'CAMMIS'\n\n\t\t\t\t\t\techo response.successful.toString()\n\t\t\t\t\t\techo response.data.toString()\n\t\t\t\t\t\t\n\t\t\t\t\t\tslackSend (color: '#FFFF00', message: \"Failed: Job - Jira Update Issues '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})\")"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  },
                  {
                    "condition": "success",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "echo",
                          "arguments": [
                            {
                              "key": "message",
                              "value": {
                                "isLiteral": true,
                                "value": "Jira Update Issues Success"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  }
                ]
              }
            },
            {
              "name": "Security Dependency Check",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "Security Dependency Check"
                          }
                        }
                      ]
                    },
                    {
                      "name": "dependencyCheckAnalyzer",
                      "arguments": [
                        {
                          "key": "datadir",
                          "value": {
                            "isLiteral": true,
                            "value": ""
                          }
                        },
                        {
                          "key": "hintsFile",
                          "value": {
                            "isLiteral": true,
                            "value": ""
                          }
                        },
                        {
                          "key": "includeCsvReports",
                          "value": {
                            "isLiteral": true,
                            "value": false
                          }
                        },
                        {
                          "key": "includeHtmlReports",
                          "value": {
                            "isLiteral": true,
                            "value": false
                          }
                        },
                        {
                          "key": "includeJsonReports",
                          "value": {
                            "isLiteral": true,
                            "value": false
                          }
                        },
                        {
                          "key": "includeVulnReports",
                          "value": {
                            "isLiteral": true,
                            "value": false
                          }
                        },
                        {
                          "key": "isAutoupdateDisabled",
                          "value": {
                            "isLiteral": true,
                            "value": false
                          }
                        },
                        {
                          "key": "outdir",
                          "value": {
                            "isLiteral": true,
                            "value": ""
                          }
                        },
                        {
                          "key": "scanpath",
                          "value": {
                            "isLiteral": true,
                            "value": ""
                          }
                        },
                        {
                          "key": "skipOnScmChange",
                          "value": {
                            "isLiteral": true,
                            "value": false
                          }
                        },
                        {
                          "key": "skipOnUpstreamChange",
                          "value": {
                            "isLiteral": true,
                            "value": false
                          }
                        },
                        {
                          "key": "suppressionFile",
                          "value": {
                            "isLiteral": true,
                            "value": ""
                          }
                        },
                        {
                          "key": "zipExtensions",
                          "value": {
                            "isLiteral": true,
                            "value": ""
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "post": {
                "conditions": [
                  {
                    "condition": "always",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "echo",
                          "arguments": [
                            {
                              "key": "message",
                              "value": {
                                "isLiteral": true,
                                "value": "Security Dependency Check"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  },
                  {
                    "condition": "failure",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "script",
                          "arguments": [
                            {
                              "key": "scriptBlock",
                              "value": {
                                "isLiteral": true,
                                "value": "echo 'Security Dependency Check  failure'\n\t\t\t\t\t\ttestIssue = [fields: [ project: [key: 'PTP'],\n\t\t\t\t\t\t\t\t\tsummary: 'Jenkins Build Failure.',\n\t\t\t\t\t\t\t\t\tdescription: \"Jenkins Build Failed - Security Dependency Check -  Job name: '${env.JOB_NAME} - Build Number: ${env.BUILD_NUMBER}  URL: ${env.BUILD_URL}'\",\n\t\t\t\t\t\t\t\t\tpriority: [name: 'Highest'],\n\t\t\t\t\t\t\t\t\tissuetype: [name: 'Bug']]]\n\n\t\t\t\t\t\tresponse = jiraNewIssue issue: testIssue, site: 'CAMMIS'\n\n\t\t\t\t\t\techo response.successful.toString()\n\t\t\t\t\t\techo response.data.toString()\n\t\t\t\t\t\t\n\t\t\t\t\t\tslackSend (color: '#FFFF00', message: \"Failed: Job - Security Dependency Check '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})\")"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  },
                  {
                    "condition": "success",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "echo",
                          "arguments": [
                            {
                              "key": "message",
                              "value": {
                                "isLiteral": true,
                                "value": "Security Dependency Check Success"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  }
                ]
              }
            },
            {
              "name": "Security Dependency Publisher",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "Security Dependency Check"
                          }
                        }
                      ]
                    },
                    {
                      "name": "dependencyCheckPublisher",
                      "arguments": [
                        {
                          "key": "canComputeNew",
                          "value": {
                            "isLiteral": true,
                            "value": false
                          }
                        },
                        {
                          "key": "defaultEncoding",
                          "value": {
                            "isLiteral": true,
                            "value": ""
                          }
                        },
                        {
                          "key": "healthy",
                          "value": {
                            "isLiteral": true,
                            "value": ""
                          }
                        },
                        {
                          "key": "pattern",
                          "value": {
                            "isLiteral": true,
                            "value": ""
                          }
                        },
                        {
                          "key": "unHealthy",
                          "value": {
                            "isLiteral": true,
                            "value": ""
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "post": {
                "conditions": [
                  {
                    "condition": "always",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "echo",
                          "arguments": [
                            {
                              "key": "message",
                              "value": {
                                "isLiteral": true,
                                "value": "Security Dependency Publisher"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  },
                  {
                    "condition": "failure",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "script",
                          "arguments": [
                            {
                              "key": "scriptBlock",
                              "value": {
                                "isLiteral": true,
                                "value": "echo 'Security Dependency Publisher  failure'\n\t\t\t\t\t\ttestIssue = [fields: [ project: [key: 'PTP'],\n\t\t\t\t\t\t\t\t\tsummary: 'Jenkins Build Failure.',\n\t\t\t\t\t\t\t\t\tdescription: \"Jenkins Build Failed - Security Dependency Check -  Job name: '${env.JOB_NAME} - Build Number: ${env.BUILD_NUMBER}  URL: ${env.BUILD_URL}'\",\n\t\t\t\t\t\t\t\t\tpriority: [name: 'Highest'],\n\t\t\t\t\t\t\t\t\tissuetype: [name: 'Bug']]]\n\n\t\t\t\t\t\tresponse = jiraNewIssue issue: testIssue, site: 'CAMMIS'\n\n\t\t\t\t\t\techo response.successful.toString()\n\t\t\t\t\t\techo response.data.toString()\n\t\t\t\t\t\t\n\t\t\t\t\t\tslackSend (color: '#FFFF00', message: \"Failed: Job - Security Dependency Publisher '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})\")"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  },
                  {
                    "condition": "success",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "echo",
                          "arguments": [
                            {
                              "key": "message",
                              "value": {
                                "isLiteral": true,
                                "value": "Security Dependency Publisher Success"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  }
                ]
              }
            },
            {
              "name": "AWS Code Deploy",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "AWS Code Deploy"
                          }
                        }
                      ]
                    },
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": false,
                            "value": "${\"env.AWS_ACCESS_KEY_ID :\"+env.AWS_ACCESS_KEY_ID}"
                          }
                        }
                      ]
                    },
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": false,
                            "value": "${\"env.AWS_SECRET_ACCESS_KEY :\"+env.AWS_SECRET_ACCESS_KEY}"
                          }
                        }
                      ]
                    },
                    {
                      "name": "step",
                      "arguments": [
                        {
                          "key": "delegate",
                          "value": {
                            "isLiteral": false,
                            "value": "[$class: 'AWSCodeDeployPublisher', \n\t\t\t\t\t\tapplicationName: 'SpringPOC', \n\t\t\t\t\t\tawsAccessKey: env.AWS_ACCESS_KEY_ID,\n\t\t\t\t\t\tawsSecretKey: env.AWS_SECRET_ACCESS_KEY, \n\t\t\t\t\t\tcredentials: 'awsAccessKey', \n\t\t\t\t\t\tdeploymentConfig: 'CodeDeployDefault.OneAtATime', \n\t\t\t\t\t\tdeploymentGroupAppspec: false, \n\t\t\t\t\t\tdeploymentGroupName: 'SpringPOCDG', \n\t\t\t\t\t\tdeploymentMethod: 'deploy', \n\t\t\t\t\t\texcludes: '', \n\t\t\t\t\t\tiamRoleArn: '', \n\t\t\t\t\t\tincludes: '**', \n\t\t\t\t\t\tpollingFreqSec: 15, \n\t\t\t\t\t\tpollingTimeoutSec: 300, \n\t\t\t\t\t\tproxyHost: '', \n\t\t\t\t\t\tproxyPort: 0, \n\t\t\t\t\t\tregion: 'us-gov-west-1', \n\t\t\t\t\t\ts3bucket: 'codedeploybucket', \n\t\t\t\t\t\ts3prefix: '', \n\t\t\t\t\t\tsubdirectory: 'SpringPOC', \n\t\t\t\t\t\tversionFileName: '', \n\t\t\t\t\t\twaitForCompletion: true]"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "post": {
                "conditions": [
                  {
                    "condition": "always",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "echo",
                          "arguments": [
                            {
                              "key": "message",
                              "value": {
                                "isLiteral": true,
                                "value": "AWS Code Deploy"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  },
                  {
                    "condition": "failure",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "script",
                          "arguments": [
                            {
                              "key": "scriptBlock",
                              "value": {
                                "isLiteral": true,
                                "value": "echo 'AWS Code Deploy  failure'\n\t\t\t\t\t\ttestIssue = [fields: [ project: [key: 'PTP'],\n\t\t\t\t\t\t\t\t\tsummary: 'Jenkins Build Failure.',\n\t\t\t\t\t\t\t\t\tdescription: \"Jenkins Build Failed - AWS Code Deploy Failed-  Job name: '${env.JOB_NAME} - Build Number: ${env.BUILD_NUMBER}  URL: ${env.BUILD_URL}'\",\n\t\t\t\t\t\t\t\t\tpriority: [name: 'Highest'],\n\t\t\t\t\t\t\t\t\tissuetype: [name: 'Bug']]]\n\n\t\t\t\t\t\tresponse = jiraNewIssue issue: testIssue, site: 'CAMMIS'\n\n\t\t\t\t\t\techo response.successful.toString()\n\t\t\t\t\t\techo response.data.toString()\n\t\t\t\t\t\t\n\t\t\t\t\t\tslackSend (color: '#FFFF00', message: \"Failed: Job - AWS Code Deploy Failed '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})\")"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  },
                  {
                    "condition": "success",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "echo",
                          "arguments": [
                            {
                              "key": "message",
                              "value": {
                                "isLiteral": true,
                                "value": "AWS Code Deploy Success"
                              }
                            }
                          ]
                        },
                        {
                          "name": "slackSend",
                          "arguments": [
                            {
                              "key": "color",
                              "value": {
                                "isLiteral": true,
                                "value": "#00FF00"
                              }
                            },
                            {
                              "key": "message",
                              "value": {
                                "isLiteral": false,
                                "value": "\"Code Deploy SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})\""
                              }
                            }
                          ]
                        }
                      ]
                    }
                  }
                ]
              }
            }
          ],
          "environment": [
            {
              "key": "EMAIL_RECIPIENTS",
              "value": {
                "isLiteral": true,
                "value": "mahmoud.romeh@test.com"
              }
            },
            {
              "key": "mvnHome",
              "value": {
                "isLiteral": false,
                "value": "${'Maven_Config'}"
              }
            }
          ],
          "agent": {
            "type": "any"
          }
        }
      }
    },
    {
      "full_repo_name": "CMSgov/bluebutton-web-deployment",
      "repo_url": "https://github.com/CMSgov/bluebutton-web-deployment",
      "html_url_jenkinsfile": "https://github.com/CMSgov/bluebutton-web-deployment/blob/2a319e9cbef25f4f6e88e23523b886514b0a30a7/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/85088897/git/blobs/624c65a7d0f895949f289cc0eb6d4805823b213f",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Ensure ENV and BRANCH",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": false,
                            "value": "\"\"\"\n        if [ -z \"${params.BRANCH}\" ] || [ -z \"${params.ENV}\" ]\n        then\n          exit 1\n        fi\n        \"\"\""
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Ensure CF_VERSION and AMI_ID when REFRESH_ONLY is false",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": false,
                            "value": "\"\"\"\n          if [ -z \"${params.CF_VERSION}\" ] || [ -z \"${params.AMI_ID}\" ]\n          then\n            exit 1\n          fi\n        \"\"\""
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "expression",
                    "arguments": [
                      {
                        "key": "scriptBlock",
                        "value": {
                          "isLiteral": true,
                          "value": "params.REFRESH_ONLY == false"
                        }
                      }
                    ]
                  }
                ]
              }
            },
            {
              "name": "Notify HipChat",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "withCredentials",
                      "arguments": {
                        "isLiteral": false,
                        "value": "${[\n          string(credentialsId: 'hipchat-room', variable: 'room'),\n          string(credentialsId: 'hipchat-server', variable: 'server'),\n          string(credentialsId: 'hipchat-token', variable: 'token')\n        ]}"
                      },
                      "children": [
                        {
                          "name": "hipchatSend",
                          "arguments": [
                            {
                              "key": "color",
                              "value": {
                                "isLiteral": true,
                                "value": "GRAY"
                              }
                            },
                            {
                              "key": "notify",
                              "value": {
                                "isLiteral": true,
                                "value": true
                              }
                            },
                            {
                              "key": "message",
                              "value": {
                                "isLiteral": false,
                                "value": "\"STARTED: ${env.JOB_NAME} [${params.ENV}]\""
                              }
                            },
                            {
                              "key": "room",
                              "value": {
                                "isLiteral": false,
                                "value": "${room}"
                              }
                            },
                            {
                              "key": "sendAs",
                              "value": {
                                "isLiteral": true,
                                "value": ""
                              }
                            },
                            {
                              "key": "server",
                              "value": {
                                "isLiteral": false,
                                "value": "${server}"
                              }
                            },
                            {
                              "key": "token",
                              "value": {
                                "isLiteral": false,
                                "value": "${token}"
                              }
                            },
                            {
                              "key": "v2enabled",
                              "value": {
                                "isLiteral": true,
                                "value": true
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Install requirements",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "dir",
                      "arguments": {
                        "isLiteral": true,
                        "value": "code"
                      },
                      "children": [
                        {
                          "name": "script",
                          "arguments": [
                            {
                              "key": "scriptBlock",
                              "value": {
                                "isLiteral": true,
                                "value": "sh \"\"\"\n              virtualenv -ppython2.7 venv\n              . venv/bin/activate\n\n              pip install --upgrade pip\n              pip install --upgrade cffi\n\n              pip install ansible==2.4.2.0\n              pip install boto\n            \"\"\""
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Set private key file",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "private_key = 'prod-key'"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "expression",
                    "arguments": [
                      {
                        "key": "scriptBlock",
                        "value": {
                          "isLiteral": true,
                          "value": "params.ENV == \"prod\""
                        }
                      }
                    ]
                  }
                ]
              }
            },
            {
              "name": "Checkout",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "checkout",
                      "arguments": [
                        {
                          "key": "scm",
                          "value": {
                            "isLiteral": false,
                            "value": "[\n          $class: 'GitSCM',\n          branches: [[\n            name: \"${params.DEPLOY_BRANCH}\"\n          ]],\n          doGenerateSubmoduleConfigurations: false,\n          extensions: [[\n            $class: 'RelativeTargetDirectory',\n            relativeTargetDir: 'code'\n          ]],\n          userRemoteConfigs: [[\n            url: 'https://github.com/CMSgov/bluebutton-web-deployment.git'\n          ]]\n        ]"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Create app server",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "dir('code') {\n            withAwsCli(credentialsId: aws_creds, defaultRegion: 'us-east-1') {\n              withCredentials([\n                file(credentialsId: private_key, variable: 'pk'),\n                file(credentialsId: vault_pass, variable: 'vp')\n              ]) {\n                sh \"\"\"\n                  . venv/bin/activate\n\n                  rm -Rf ./tmp\n\n                  ansible-playbook playbook/appherd/100_create_appserver.yml  \\\n                    --vault-password-file ${vp} \\\n                    --private-key ${pk} \\\n                    -e 'env=${params.ENV}' \\\n                    -e 'cf_platform_version=${params.CF_VERSION}' \\\n                    -e 'azone=${params.AZ}' \\\n                    -e 'cf_app_instance_type=${params.INSTANCE_CLASS}' \\\n                    -e 'ami_app_gold_image=${params.AMI_ID}'\n                \"\"\"\n              }\n            }\n          }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "expression",
                    "arguments": [
                      {
                        "key": "scriptBlock",
                        "value": {
                          "isLiteral": true,
                          "value": "params.REFRESH_ONLY == false"
                        }
                      }
                    ]
                  }
                ]
              }
            },
            {
              "name": "Build app server",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "dir('code') {\n            withAwsCli(credentialsId: aws_creds, defaultRegion: 'us-east-1') {\n              withCredentials([\n                file(credentialsId: private_key, variable: 'pk'),\n                file(credentialsId: vault_pass, variable: 'vp')\n              ]) {\n                sh \"\"\"\n                  . venv/bin/activate\n\n                  rm -Rf ./tmp\n\n                  EC2_INI_PATH=inventory/config/${params.ENV}.ini \\\n                  ansible-playbook playbook/appherd/200_build_appserver.yml  \\\n                    --vault-password-file ${vp} \\\n                    --private-key ${pk} \\\n                    -i inventory/ec2.py \\\n                    -l 'tag_State_appservers_base' \\\n                    -e 'env=${params.ENV}' \\\n                    -e 'collectstatic=${params.COLLECT_STATIC}' \\\n                    -e 'migrate=${params.MIGRATE}' \\\n                    -e 'git_branch=${params.BRANCH}' \\\n                    -e 'cf_platform_version=${params.CF_VERSION}' \\\n                    -e 'build_target=all'\n                \"\"\"\n              }\n            }\n          }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "expression",
                    "arguments": [
                      {
                        "key": "scriptBlock",
                        "value": {
                          "isLiteral": true,
                          "value": "params.REFRESH_ONLY == false"
                        }
                      }
                    ]
                  }
                ]
              }
            },
            {
              "name": "Deploy/refresh code",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "dir('code') {\n            withAwsCli(credentialsId: aws_creds, defaultRegion: 'us-east-1') {\n              withCredentials([\n                file(credentialsId: private_key, variable: 'pk'),\n                file(credentialsId: vault_pass, variable: 'vp')\n              ]) {\n                sh \"\"\"\n                  . venv/bin/activate\n\n                  rm -Rf ./tmp\n\n                  EC2_INI_PATH=inventory/config/${params.ENV}.ini \\\n                  ansible-playbook playbook/appherd/300_refresh_server_code.yml \\\n                    --vault-password-file ${vp} \\\n                    --private-key ${pk} \\\n                    -i inventory/ec2.py \\\n                    -l 'tag_Function_app_AppServer' \\\n                    -e 'env=${params.ENV}' \\\n                    -e 'collectstatic=${params.COLLECT_STATIC}' \\\n                    -e 'migrate=${params.MIGRATE}' \\\n                    -e 'git_branch=${params.BRANCH}' \\\n                    -e 'build_target=all'\n                \"\"\"\n              }\n            }\n          }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "expression",
                    "arguments": [
                      {
                        "key": "scriptBlock",
                        "value": {
                          "isLiteral": true,
                          "value": "params.REFRESH_ONLY == true"
                        }
                      }
                    ]
                  }
                ]
              }
            }
          ],
          "post": {
            "conditions": [
              {
                "condition": "success",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "withCredentials",
                      "arguments": {
                        "isLiteral": false,
                        "value": "${[\n        string(credentialsId: 'hipchat-room', variable: 'room'),\n        string(credentialsId: 'hipchat-server', variable: 'server'),\n        string(credentialsId: 'hipchat-token', variable: 'token')\n      ]}"
                      },
                      "children": [
                        {
                          "name": "hipchatSend",
                          "arguments": [
                            {
                              "key": "color",
                              "value": {
                                "isLiteral": true,
                                "value": "GREEN"
                              }
                            },
                            {
                              "key": "notify",
                              "value": {
                                "isLiteral": true,
                                "value": true
                              }
                            },
                            {
                              "key": "message",
                              "value": {
                                "isLiteral": false,
                                "value": "\"SUCCESS: ${env.JOB_NAME} [${params.ENV}]\""
                              }
                            },
                            {
                              "key": "room",
                              "value": {
                                "isLiteral": false,
                                "value": "${room}"
                              }
                            },
                            {
                              "key": "sendAs",
                              "value": {
                                "isLiteral": true,
                                "value": ""
                              }
                            },
                            {
                              "key": "server",
                              "value": {
                                "isLiteral": false,
                                "value": "${server}"
                              }
                            },
                            {
                              "key": "token",
                              "value": {
                                "isLiteral": false,
                                "value": "${token}"
                              }
                            },
                            {
                              "key": "v2enabled",
                              "value": {
                                "isLiteral": true,
                                "value": true
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "condition": "failure",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "withCredentials",
                      "arguments": {
                        "isLiteral": false,
                        "value": "${[\n        string(credentialsId: 'hipchat-room', variable: 'room'),\n        string(credentialsId: 'hipchat-server', variable: 'server'),\n        string(credentialsId: 'hipchat-token', variable: 'token')\n      ]}"
                      },
                      "children": [
                        {
                          "name": "hipchatSend",
                          "arguments": [
                            {
                              "key": "color",
                              "value": {
                                "isLiteral": true,
                                "value": "RED"
                              }
                            },
                            {
                              "key": "notify",
                              "value": {
                                "isLiteral": true,
                                "value": true
                              }
                            },
                            {
                              "key": "message",
                              "value": {
                                "isLiteral": false,
                                "value": "\"FAILED: ${env.JOB_NAME} [${params.ENV}]\""
                              }
                            },
                            {
                              "key": "room",
                              "value": {
                                "isLiteral": false,
                                "value": "${room}"
                              }
                            },
                            {
                              "key": "sendAs",
                              "value": {
                                "isLiteral": true,
                                "value": ""
                              }
                            },
                            {
                              "key": "server",
                              "value": {
                                "isLiteral": false,
                                "value": "${server}"
                              }
                            },
                            {
                              "key": "token",
                              "value": {
                                "isLiteral": false,
                                "value": "${token}"
                              }
                            },
                            {
                              "key": "v2enabled",
                              "value": {
                                "isLiteral": true,
                                "value": true
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          },
          "agent": {
            "type": "node",
            "arguments": [
              {
                "key": "label",
                "value": {
                  "isLiteral": true,
                  "value": ""
                }
              },
              {
                "key": "customWorkspace",
                "value": {
                  "isLiteral": true,
                  "value": "blue-button-deploy"
                }
              }
            ]
          },
          "parameters": {
            "parameters": [
              {
                "name": "string",
                "arguments": [
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": true,
                      "value": ""
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "The branch of the application repo to deploy. Required."
                    }
                  },
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "BRANCH"
                    }
                  }
                ]
              },
              {
                "name": "string",
                "arguments": [
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": true,
                      "value": "*/master"
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "The branch of the deployment repo to use for deployment."
                    }
                  },
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "DEPLOY_BRANCH"
                    }
                  }
                ]
              },
              {
                "name": "string",
                "arguments": [
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": true,
                      "value": ""
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "The Gold Image AMI id that will be used as the base for app servers."
                    }
                  },
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "AMI_ID"
                    }
                  }
                ]
              },
              {
                "name": "string",
                "arguments": [
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": true,
                      "value": "m3.medium"
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "The class/size of the ec2 instance to launch."
                    }
                  },
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "INSTANCE_CLASS"
                    }
                  }
                ]
              },
              {
                "name": "choice",
                "arguments": [
                  {
                    "key": "choices",
                    "value": {
                      "isLiteral": true,
                      "value": "no\nyes"
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "Should we run database migrations on deploy?"
                    }
                  },
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "MIGRATE"
                    }
                  }
                ]
              },
              {
                "name": "choice",
                "arguments": [
                  {
                    "key": "choices",
                    "value": {
                      "isLiteral": true,
                      "value": "yes\nno"
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "Should we run collectstatic on deploy?"
                    }
                  },
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "COLLECT_STATIC"
                    }
                  }
                ]
              },
              {
                "name": "choice",
                "arguments": [
                  {
                    "key": "choices",
                    "value": {
                      "isLiteral": true,
                      "value": "dev\ntest\nimpl\nprod"
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "The environment to deploy to. Required."
                    }
                  },
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "ENV"
                    }
                  }
                ]
              },
              {
                "name": "choice",
                "arguments": [
                  {
                    "key": "choices",
                    "value": {
                      "isLiteral": true,
                      "value": "az1\naz2\naz3"
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "Availability zone to launch instance in."
                    }
                  },
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "AZ"
                    }
                  }
                ]
              },
              {
                "name": "string",
                "arguments": [
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": true,
                      "value": ""
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "The CF platform version (e.g., \"55\"). Required when creating new servers."
                    }
                  },
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "CF_VERSION"
                    }
                  }
                ]
              },
              {
                "name": "booleanParam",
                "arguments": [
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": true,
                      "value": true
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "When true, we will only refresh code on existing servers, not create new ones."
                    }
                  },
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "REFRESH_ONLY"
                    }
                  }
                ]
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "Hawkular-QE/jaeger-instrumentation-performance-tests",
      "repo_url": "https://github.com/Hawkular-QE/jaeger-instrumentation-performance-tests",
      "html_url_jenkinsfile": "https://github.com/Hawkular-QE/jaeger-instrumentation-performance-tests/blob/02d5e2e43f6c4ff25c2a5bf7024f074af1e0e0c9/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/99118794/git/blobs/d53548bbbda380cf3c295c34df36529c43e85184",
      "jenkins_pipeline": [
        {
          "error": [
            "Tool type \"maven\" does not have an install of \"maven-3.5.3\" configured - did you mean \"Jenkins_maven\"? @ line 9, column 15.",
            "Tool type \"jdk\" does not have an install of \"jdk8\" configured - did you mean \"null\"? @ line 10, column 13."
          ]
        }
      ]
    },
    {
      "full_repo_name": "jaegertracing/jaeger-performance",
      "repo_url": "https://github.com/jaegertracing/jaeger-performance",
      "html_url_jenkinsfile": "https://github.com/jaegertracing/jaeger-performance/blob/3393315f16b073009cd0712cb57f1aed9a4be3ba/standalone/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/123000213/git/blobs/fcc07a015c9a2277400271666a5c82a5413cab48",
      "jenkins_pipeline": [
        {
          "error": [
            "Tool type \"maven\" does not have an install of \"maven-3.5.3\" configured - did you mean \"Jenkins_maven\"? @ line 4, column 15.",
            "Tool type \"jdk\" does not have an install of \"jdk8\" configured - did you mean \"null\"? @ line 5, column 13."
          ]
        }
      ]
    },
    {
      "full_repo_name": "Hawkular-QE/jaeger-standalone-performance-tests",
      "repo_url": "https://github.com/Hawkular-QE/jaeger-standalone-performance-tests",
      "html_url_jenkinsfile": "https://github.com/Hawkular-QE/jaeger-standalone-performance-tests/blob/141fd58e2cba58ef5ef772329d369b903cd8d9d8/standalone/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/107141378/git/blobs/5384ac20a12ed78f0297a31bbcab0cd668bb53f6",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Set name and description",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "currentBuild.displayName =params.SPAN_STORAGE_TYPE + \" \" + params.USE_AGENT_OR_COLLECTOR + \" \" + params.WORKER_PODS + \" pods \" + \" \" + params.THREAD_COUNT + \" threads \" + params.DURATION_IN_MINUTES + \" min \" + params.JAEGER_SAMPLING_RATE\n                    currentBuild.description = currentBuild.displayName"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Delete Jaeger",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "oc delete all,template,daemonset,configmap -l jaeger-infra"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "env | sort"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Delete Old Job",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "oc delete job jaeger-standalone-performance-tests || true"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Cleanup, checkout, build",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "deleteDir",
                      "arguments": []
                    },
                    {
                      "name": "checkout",
                      "arguments": [
                        {
                          "key": "scm",
                          "value": {
                            "isLiteral": false,
                            "value": "${scm}"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "ls -alF"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "deploy Cassandra",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "\n                    curl https://raw.githubusercontent.com/jaegertracing/jaeger-openshift/master/production/cassandra.yml --output cassandra.yml\n                    oc create --filename cassandra.yml\n                "
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "expression",
                    "arguments": [
                      {
                        "key": "scriptBlock",
                        "value": {
                          "isLiteral": true,
                          "value": "params.SPAN_STORAGE_TYPE == 'cassandra'"
                        }
                      }
                    ]
                  }
                ]
              }
            },
            {
              "name": "deploy ElasticSearch",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "\n                    curl https://raw.githubusercontent.com/jaegertracing/jaeger-openshift/master/production/elasticsearch.yml --output elasticsearch.yml\n                    oc create --filename elasticsearch.yml\n                "
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "expression",
                    "arguments": [
                      {
                        "key": "scriptBlock",
                        "value": {
                          "isLiteral": true,
                          "value": "params.SPAN_STORAGE_TYPE == 'elasticsearch'"
                        }
                      }
                    ]
                  }
                ]
              }
            },
            {
              "name": "deploy Jaeger with Cassandra",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "\n                    curl https://raw.githubusercontent.com/jaegertracing/jaeger-openshift/master/production/jaeger-production-template.yml --output jaeger-production-template.yml\n                    ./standalone/updateTemplateForCassandra.sh\n                    oc process  ${DEPLOYMENT_PARAMETERS} -f jaeger-production-template.yml  | oc create -n ${PROJECT_NAME} -f -\n                "
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "expression",
                    "arguments": [
                      {
                        "key": "scriptBlock",
                        "value": {
                          "isLiteral": true,
                          "value": "params.SPAN_STORAGE_TYPE == 'cassandra'"
                        }
                      }
                    ]
                  }
                ]
              }
            },
            {
              "name": "deploy Jaeger with ElasticSearch",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "\n                    curl https://raw.githubusercontent.com/jaegertracing/jaeger-openshift/master/production/jaeger-production-template.yml --output jaeger-production-template.yml\n                    ./standalone/updateTemplateForElasticSearch.sh\n                    oc process ${DEPLOYMENT_PARAMETERS} -pES_BULK_SIZE=${ES_BULK_SIZE} -pES_BULK_WORKERS=${ES_BULK_WORKERS} -pES_BULK_FLUSH_INTERVAL=${ES_BULK_FLUSH_INTERVAL} -f jaeger-production-template.yml  | oc create -n ${PROJECT_NAME} -f -\n                "
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "expression",
                    "arguments": [
                      {
                        "key": "scriptBlock",
                        "value": {
                          "isLiteral": true,
                          "value": "params.SPAN_STORAGE_TYPE == 'elasticsearch'"
                        }
                      }
                    ]
                  }
                ]
              }
            },
            {
              "name": "Wait for Jaeger Deployment",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "openshiftVerifyService",
                      "arguments": [
                        {
                          "key": "apiURL",
                          "value": {
                            "isLiteral": true,
                            "value": ""
                          }
                        },
                        {
                          "key": "authToken",
                          "value": {
                            "isLiteral": true,
                            "value": ""
                          }
                        },
                        {
                          "key": "namespace",
                          "value": {
                            "isLiteral": true,
                            "value": ""
                          }
                        },
                        {
                          "key": "svcName",
                          "value": {
                            "isLiteral": true,
                            "value": "jaeger-query"
                          }
                        },
                        {
                          "key": "verbose",
                          "value": {
                            "isLiteral": true,
                            "value": "false"
                          }
                        }
                      ]
                    },
                    {
                      "name": "openshiftVerifyService",
                      "arguments": [
                        {
                          "key": "apiURL",
                          "value": {
                            "isLiteral": true,
                            "value": ""
                          }
                        },
                        {
                          "key": "authToken",
                          "value": {
                            "isLiteral": true,
                            "value": ""
                          }
                        },
                        {
                          "key": "namespace",
                          "value": {
                            "isLiteral": true,
                            "value": ""
                          }
                        },
                        {
                          "key": "svcName",
                          "value": {
                            "isLiteral": true,
                            "value": "jaeger-collector"
                          }
                        },
                        {
                          "key": "verbose",
                          "value": {
                            "isLiteral": true,
                            "value": "false"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Run tests",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "withEnv",
                      "arguments": {
                        "isLiteral": false,
                        "value": "${[\"JAVA_HOME=${ tool 'jdk8' }\", \"PATH+MAVEN=${tool 'maven-3.5.2'}/bin:${env.JAVA_HOME}/bin\"]}"
                      },
                      "children": [
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "\n                        git status\n                        cd standalone\n                        mvn clean install\n                        mvn --activate-profiles openshift clean install fabric8:deploy -Dpod.count=${WORKER_PODS} -Dduration.in.minutes=${DURATION_IN_MINUTES} -Ddelay=${DELAY} -Djaeger.sampling.rate=${JAEGER_SAMPLING_RATE} -Djaeger.agent.host=${JAEGER_AGENT_HOST} -Duser.agent.or.collector=${USE_AGENT_OR_COLLECTOR} -Djaeger.collector.port=${JAEGER_COLLECTOR_PORT} -Djaeger.collector.host=${JAEGER_COLLECTOR_HOST}\n                        mvn --activate-profiles validate clean verify\n                    "
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Delete Jaeger at end",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "sh 'oc delete all,template,daemonset,configmap -l jaeger-infra'"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "expression",
                    "arguments": [
                      {
                        "key": "scriptBlock",
                        "value": {
                          "isLiteral": true,
                          "value": "params.DELETE_JAEGER_AT_END"
                        }
                      }
                    ]
                  }
                ]
              }
            },
            {
              "name": "Delete Job at end",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "oc delete job jaeger-standalone-performance-tests || true"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Cleanup pods",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "sh 'oc get pods | grep Completed | awk {\"print \\\\$1\"} | xargs oc delete pod || true'"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "environment": [
            {
              "key": "JAEGER_AGENT_HOST",
              "value": {
                "isLiteral": true,
                "value": "localhost"
              }
            },
            {
              "key": "JAEGER_COLLECTOR_HOST",
              "value": {
                "isLiteral": true,
                "value": "jaeger-collector"
              }
            },
            {
              "key": "JAEGER_COLLECTOR_PORT",
              "value": {
                "isLiteral": true,
                "value": 14268
              }
            },
            {
              "key": "ELASTICSEARCH_HOST",
              "value": {
                "isLiteral": true,
                "value": "elasticsearch"
              }
            },
            {
              "key": "ELASTICSEARCH_PORT",
              "value": {
                "isLiteral": true,
                "value": "9200"
              }
            },
            {
              "key": "CASSANDRA_CLUSTER_IP",
              "value": {
                "isLiteral": true,
                "value": "cassandra"
              }
            },
            {
              "key": "CASSANDRA_KEYSPACE_NAME",
              "value": {
                "isLiteral": true,
                "value": "jaeger_v1_dc1"
              }
            },
            {
              "key": "DEPLOYMENT_PARAMETERS",
              "value": {
                "isLiteral": false,
                "value": "\"-pIMAGE_VERSION=latest -pCOLLECTOR_QUEUE_SIZE=${COLLECTOR_QUEUE_SIZE} -pCOLLECTOR_PODS=${COLLECTOR_PODS}\""
              }
            }
          ],
          "agent": {
            "type": "any"
          },
          "options": {
            "options": [
              {
                "name": "disableConcurrentBuilds",
                "arguments": []
              }
            ]
          },
          "parameters": {
            "parameters": [
              {
                "name": "choice",
                "arguments": [
                  {
                    "key": "choices",
                    "value": {
                      "isLiteral": true,
                      "value": "COLLECTOR\nAGENT"
                    }
                  },
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "USE_AGENT_OR_COLLECTOR"
                    }
                  }
                ]
              },
              {
                "name": "choice",
                "arguments": [
                  {
                    "key": "choices",
                    "value": {
                      "isLiteral": true,
                      "value": "elasticsearch\ncassandra"
                    }
                  },
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "SPAN_STORAGE_TYPE"
                    }
                  }
                ]
              },
              {
                "name": "string",
                "arguments": [
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "DURATION_IN_MINUTES"
                    }
                  },
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": true,
                      "value": "5"
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "Amount of time each worker should run"
                    }
                  }
                ]
              },
              {
                "name": "string",
                "arguments": [
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "ES_BULK_SIZE"
                    }
                  },
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": true,
                      "value": "10000000"
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "--es.bulk.size"
                    }
                  }
                ]
              },
              {
                "name": "string",
                "arguments": [
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "ES_BULK_WORKERS"
                    }
                  },
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": true,
                      "value": "10"
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "--es.bulk.workers"
                    }
                  }
                ]
              },
              {
                "name": "string",
                "arguments": [
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "ES_BULK_FLUSH_INTERVAL"
                    }
                  },
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": true,
                      "value": "1s"
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "--es.bulk.flush-interval"
                    }
                  }
                ]
              },
              {
                "name": "string",
                "arguments": [
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "THREAD_COUNT"
                    }
                  },
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": true,
                      "value": "100"
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "The number of client threads to run"
                    }
                  }
                ]
              },
              {
                "name": "string",
                "arguments": [
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "WORKER_PODS"
                    }
                  },
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": true,
                      "value": "1"
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "The number of pods to run client threads in"
                    }
                  }
                ]
              },
              {
                "name": "string",
                "arguments": [
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "DELAY"
                    }
                  },
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": true,
                      "value": "100"
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "delay in milliseconds between each span creation"
                    }
                  }
                ]
              },
              {
                "name": "string",
                "arguments": [
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "COLLECTOR_PODS"
                    }
                  },
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": true,
                      "value": "1"
                    }
                  }
                ]
              },
              {
                "name": "string",
                "arguments": [
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "COLLECTOR_QUEUE_SIZE"
                    }
                  },
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": true,
                      "value": "3000000"
                    }
                  }
                ]
              },
              {
                "name": "booleanParam",
                "arguments": [
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "DELETE_JAEGER_AT_END"
                    }
                  },
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": true,
                      "value": true
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "Delete Jaeger instance at end of the test"
                    }
                  }
                ]
              },
              {
                "name": "string",
                "arguments": [
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "JAEGER_SAMPLING_RATE"
                    }
                  },
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": true,
                      "value": "1.0"
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "0.0 to 1.0 percent of spans to record"
                    }
                  }
                ]
              }
            ]
          }
        }
      }
    }
  ]
}