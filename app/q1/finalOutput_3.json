{
  "research_question_1a": "What are the most frequent post-condition blocks in the post section within jenkins pipelines? Create distribution graphs for post-condition blocks.",
  "counts_of_post_elements": {
    "success": 16,
    "failure": 22,
    "unstable": 11,
    "always": 29,
    "aborted": 4,
    "changed": 4
  },
  "research_question_1b": "What are the most frequent activities in the post section conditional blocks within jenkins pipelines? Create distribution graphs for post-condition blocks. ",
  "counts_of_activities_in_post_blocks": {
    "echo": 26,
    "archiveartifacts": 3,
    "deletedir": 10,
    "emailext": 7,
    "script": 11,
    "step": 1,
    "withcredentials": 4,
    "mail": 3,
    "sh": 5,
    "sendnotifications": 2,
    "githubnotify": 6,
    "slackmessage": 1,
    "build": 1,
    "sendnotification": 1,
    "dir": 1,
    "withchownworkspace": 1,
    "sendemail": 12,
    "slacksend": 4,
    "notifyslack": 1,
    "junit": 1,
    "cleanupartifacts": 1,
    "deleteworkspace": 1,
    "cleanws": 1
  },
  "valid_jenkinsfiles_scanned": 53,
  "project_details": [
    {
      "full_repo_name": "weiqi7777/automatic_flow_for_IC_verification",
      "repo_url": "https://github.com/weiqi7777/automatic_flow_for_IC_verification",
      "html_url_jenkinsfile": "https://github.com/weiqi7777/automatic_flow_for_IC_verification/blob/2966f6675435d199e6092d42f799707959e13ef7/jenkins/pipeline/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/126573121/git/blobs/4e0d4d2fe16e468df4ddd8f6488574de00166298",
      "jenkins_pipeline": [
        {
          "error": "expecting anything but ''\\n''; got it anyway @ line 23, column 44."
        }
      ]
    },
    {
      "full_repo_name": "linux-xiayun/Pipeline",
      "repo_url": "https://github.com/linux-xiayun/Pipeline",
      "html_url_jenkinsfile": "https://github.com/linux-xiayun/Pipeline/blob/5878bf77be7d3761cc0569d9bf1e7f8a884cf77b/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/119650935/git/blobs/5985bdc7a32dbe73357e6c209a07a750a39d241b",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Maven Build",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "Hello, Maven"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "mvn --version"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "agent": {
                "type": "docker",
                "argument": {
                  "isLiteral": true,
                  "value": "maven:3-alpine"
                }
              },
              "options": {
                "options": [
                  {
                    "name": "retry",
                    "arguments": [
                      {
                        "isLiteral": true,
                        "value": 3
                      }
                    ]
                  },
                  {
                    "name": "timeout",
                    "arguments": [
                      {
                        "key": "time",
                        "value": {
                          "isLiteral": true,
                          "value": 10
                        }
                      },
                      {
                        "key": "unit",
                        "value": {
                          "isLiteral": true,
                          "value": "MINUTES"
                        }
                      }
                    ]
                  }
                ]
              }
            },
            {
              "name": "Aborted",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": false,
                            "value": "\"Hello, ${PERSON}, nice to meet you.\""
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "input": {
                "message": {
                  "isLiteral": true,
                  "value": "Should we continue?"
                },
                "ok": {
                  "isLiteral": true,
                  "value": "Yes, we should."
                },
                "parameters": {
                  "parameters": [
                    {
                      "name": "string",
                      "arguments": [
                        {
                          "key": "name",
                          "value": {
                            "isLiteral": true,
                            "value": "PERSON"
                          }
                        },
                        {
                          "key": "defaultValue",
                          "value": {
                            "isLiteral": true,
                            "value": "Mr XiaYun"
                          }
                        },
                        {
                          "key": "description",
                          "value": {
                            "isLiteral": true,
                            "value": "Who should I say hello to?"
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            },
            {
              "name": "Java Build",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "Hello, JDK"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "java -version"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "agent": {
                "type": "docker",
                "argument": {
                  "isLiteral": true,
                  "value": "openjdk:8-jre"
                }
              },
              "options": {
                "options": [
                  {
                    "name": "retry",
                    "arguments": [
                      {
                        "isLiteral": true,
                        "value": 3
                      }
                    ]
                  },
                  {
                    "name": "timeout",
                    "arguments": [
                      {
                        "key": "time",
                        "value": {
                          "isLiteral": true,
                          "value": 10
                        }
                      },
                      {
                        "key": "unit",
                        "value": {
                          "isLiteral": true,
                          "value": "MINUTES"
                        }
                      }
                    ]
                  }
                ]
              }
            },
            {
              "name": "Test",
              "parallel": [
                {
                  "name": "Branch A",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "echo",
                          "arguments": [
                            {
                              "key": "message",
                              "value": {
                                "isLiteral": true,
                                "value": "On Branch A"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "Branch B",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "echo",
                          "arguments": [
                            {
                              "key": "message",
                              "value": {
                                "isLiteral": true,
                                "value": "On Branch B"
                              }
                            }
                          ]
                        },
                        {
                          "name": "script",
                          "arguments": [
                            {
                              "key": "scriptBlock",
                              "value": {
                                "isLiteral": true,
                                "value": "def browsers = ['chrome', 'firefox']\n\t\t\t\t\t\tfor (int i = 0; i < browsers.size(); ++i) {\n\t\t\t\t\t\t    echo \"Testing the ${browsers[i]} browser\"\n\t\t\t\t\t\t\t}"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Finished",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": false,
                            "value": "\"Hello ${params.PERSON}, It's finished successfully!\""
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "post": {
            "conditions": [
              {
                "condition": "success",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "Well Done!"
                          }
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "condition": "failure",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "sorry failed!"
                          }
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "condition": "unstable",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "en...unstable!"
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          },
          "agent": {
            "type": "none"
          },
          "parameters": {
            "parameters": [
              {
                "name": "string",
                "arguments": [
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "PERSON"
                    }
                  },
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": true,
                      "value": "Mr Xiayun"
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "Who should I say hello to?"
                    }
                  }
                ]
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "anuj-saxena-git/GitConfigTest",
      "repo_url": "https://github.com/anuj-saxena-git/GitConfigTest",
      "html_url_jenkinsfile": "https://github.com/anuj-saxena-git/GitConfigTest/blob/2ecd3ed877aea924051a36ee88501a27b486e809/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/103263571/git/blobs/4c6ca3e1890e575eb206cf54e36ad4c57662ed9b",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": " setting variable",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "\n                    #git config --global http.postBuffer 1048576\n                    #git config --global pack.windowMemory \"32m\"\n                    git config --global http.postBuffer 1048576\n                    git config --global core.packedGitLimit 128m\n                    git config --global core.packedGitWindowSize 128m\n                    git config --global pack.deltaCacheSize 128m\n                    git config --global pack.packSizeLimit 128m\n                    git config --global pack.windowMemory 128m\n                "
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "agent": {
            "type": "any"
          }
        }
      }
    },
    {
      "full_repo_name": "moschutt/complex-1",
      "repo_url": "https://github.com/moschutt/complex-1",
      "html_url_jenkinsfile": "https://github.com/moschutt/complex-1/blob/04fc4c9fd0511efc9e87139f4d46f247d8655172/test1/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/129616799/git/blobs/7ae5281742103b19250956d1cd40f00729c906f1",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Example",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": false,
                            "value": "\"Hello from $NAME\""
                          }
                        }
                      ]
                    },
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def browsers = ['chrome', 'firefox']\n                    for (int i = 0; i < browsers.size(); ++i) {\n                        echo \"Testing the ${browsers[i]} browser.\"\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "expression",
                    "arguments": [
                      {
                        "key": "scriptBlock",
                        "value": {
                          "isLiteral": true,
                          "value": "return params.DEBUG_BUILD"
                        }
                      }
                    ]
                  }
                ]
              },
              "environment": [
                {
                  "key": "NAME",
                  "value": {
                    "isLiteral": true,
                    "value": "Rafal"
                  }
                }
              ]
            }
          ],
          "post": {
            "conditions": [
              {
                "condition": "always",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "I will always say Hello again!"
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          },
          "agent": {
            "type": "any"
          },
          "options": {
            "options": [
              {
                "name": "timeout",
                "arguments": [
                  {
                    "key": "time",
                    "value": {
                      "isLiteral": true,
                      "value": 5
                    }
                  }
                ]
              }
            ]
          },
          "parameters": {
            "parameters": [
              {
                "name": "booleanParam",
                "arguments": [
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "DEBUG_BUILD"
                    }
                  },
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": true,
                      "value": true
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "Is it the debug build?"
                    }
                  }
                ]
              }
            ]
          },
          "triggers": {
            "triggers": [
              {
                "name": "cron",
                "arguments": [
                  {
                    "isLiteral": true,
                    "value": "* * * * *"
                  }
                ]
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "ONS-OpenData/HMRC_Trade",
      "repo_url": "https://github.com/ONS-OpenData/HMRC_Trade",
      "html_url_jenkinsfile": "https://github.com/ONS-OpenData/HMRC_Trade/blob/c4fb4b4399d505db35c91cd2f129b04affa5544e/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/131184294/git/blobs/3f6c7fa9446c285ad9e5f1ae4eed309449b7e9d0",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Clean",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "rm -rf out"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Transform",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "jupyter-nbconvert --to python --stdout 'Business count by Age of Business.ipynb' | ipython"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "jupyter-nbconvert --to python --stdout 'Business count by Employee Size.ipynb' | ipython"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "jupyter-nbconvert --to python --stdout 'Business count by Industry Group.ipynb' | ipython"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "jupyter-nbconvert --to python --stdout 'Employee count for Businesses by Age of Business.ipynb' | ipython"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "jupyter-nbconvert --to python --stdout 'Employee count for Businesses by Employee Size.ipynb' | ipython"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "jupyter-nbconvert --to python --stdout 'Employee count for Businesses by Industry Group.ipynb' | ipython"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "jupyter-nbconvert --to python --stdout 'Total value of UK trade by Age of Business.ipynb' | ipython"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "jupyter-nbconvert --to python --stdout 'Total value of UK trade by Employee Size.ipynb' | ipython"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "jupyter-nbconvert --to python --stdout 'Total value of UK trade by Industry Group.ipynb' | ipython"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "jupyter-nbconvert --to python --stdout 'TRADE IN GOODS STATISTICS -Business Count.ipynb' | ipython"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "jupyter-nbconvert --to python --stdout 'TRADE IN GOODS STATISTICS -Employee Count and age business.ipynb' | ipython"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "jupyter-nbconvert --to python --stdout 'TRADE IN GOODS STATISTICS -Employee Count and age employee count.ipynb' | ipython"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "jupyter-nbconvert --to python --stdout 'TRADE IN GOODS STATISTICS -Employee Count and age.ipynb' | ipython"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "jupyter-nbconvert --to python --stdout 'TRADE IN GOODS STATISTICS -Employee Count.ipynb' | ipython"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "jupyter-nbconvert --to python --stdout 'TRADE IN GOODS STATISTICS_Employee size_Businesses.ipynb' | ipython"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "jupyter-nbconvert --to python --stdout 'TRADE IN GOODS STATISTICS_Employee size_Employee count.ipynb' | ipython"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "jupyter-nbconvert --to python --stdout 'TRADE IN GOODS STATISTICS_Employee size_value.ipynb' | ipython"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "jupyter-nbconvert --to python --stdout 'TRADE IN GOODS STATISTICS -total value of UK Trade.ipynb' | ipython"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "agent": {
                "type": "docker",
                "arguments": [
                  {
                    "key": "image",
                    "value": {
                      "isLiteral": true,
                      "value": "cloudfluff/databaker"
                    }
                  },
                  {
                    "key": "reuseNode",
                    "value": {
                      "isLiteral": true,
                      "value": true
                    }
                  }
                ]
              }
            },
            {
              "name": "Upload draftset",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "error",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "Needs review"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Test Draftset",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "Placeholder for acceptance tests from e.g. GDP-205"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Publish",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "error",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "Needs uploading first"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "post": {
            "conditions": [
              {
                "condition": "always",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "archiveArtifacts",
                      "arguments": [
                        {
                          "key": "artifacts",
                          "value": {
                            "isLiteral": true,
                            "value": "out/*"
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          },
          "agent": {
            "type": "label",
            "argument": {
              "isLiteral": true,
              "value": "master"
            }
          }
        }
      }
    },
    {
      "full_repo_name": "mrm1ck/azureCLI",
      "repo_url": "https://github.com/mrm1ck/azureCLI",
      "html_url_jenkinsfile": "https://github.com/mrm1ck/azureCLI/blob/30c98a75c36c02a657f1753ff5c48502dc7f7933/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/107491009/git/blobs/9a7a60e3e7cb9ba28680846052ae77839260a416",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Build",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "checkout",
                      "arguments": [
                        {
                          "key": "scm",
                          "value": {
                            "isLiteral": false,
                            "value": "${scm}"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "./scripts/jenkins_build.sh"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "./scripts/jenkins_archive.sh"
                          }
                        }
                      ]
                    },
                    {
                      "name": "deleteDir",
                      "arguments": []
                    }
                  ]
                }
              ],
              "agent": {
                "type": "label",
                "argument": {
                  "isLiteral": true,
                  "value": "linux-build"
                }
              },
              "post": {
                "conditions": [
                  {
                    "condition": "always",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "deleteDir",
                          "arguments": []
                        }
                      ]
                    }
                  }
                ]
              }
            },
            {
              "name": "Test",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def test_tasks = [:]\n\n          // Add live test tasks\n          def modules = ['acs', 'keyvault', 'storage', 'sql', 'role', 'vm', 'network']\n          for (int i = 0; i < modules.size(); ++i) {\n            def name = modules.get(i)\n            test_tasks[\"Live Test: ${name}\"] = {\n              node('linux-build') {\n                checkout scm\n                withCredentials([[$class: 'UsernamePasswordMultiBinding', \n                                  credentialsId: 'AzureSDKADGraph2',\n                                  usernameVariable: 'AZURE_CLI_TEST_DEV_SP_NAME', \n                                  passwordVariable: 'AZURE_CLI_TEST_DEV_SP_PASSWORD']]) {\n                withCredentials([string(credentialsId: 'AzureSDKADGraph2_Tenant',\n                                        variable: 'AZURE_CLI_TEST_DEV_SP_TENANT')]) {\n                  sh \"./scripts/jenkins_live_test.sh ${name}\"\n                }}\n              }\n            }\n          }\n\n          // Add performance test tasks\n          def platforms = ['perf-ubuntu-a0', 'perf-ubuntu-ds1']\n          for (int i = 0; i < platforms.size(); i++) {\n            platform = platforms.get(i)\n            test_tasks[\"Performance Test: ${platform}\"] = perf_closure(platform)\n          }\n\n          test_tasks.failFast = false\n          parallel test_tasks"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "agent": {
            "type": "none"
          },
          "triggers": {
            "triggers": [
              {
                "name": "cron",
                "arguments": [
                  {
                    "isLiteral": true,
                    "value": "0 3 * * *"
                  }
                ]
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "aag09/azurecli",
      "repo_url": "https://github.com/aag09/azurecli",
      "html_url_jenkinsfile": "https://github.com/aag09/azurecli/blob/30c98a75c36c02a657f1753ff5c48502dc7f7933/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/107339850/git/blobs/9a7a60e3e7cb9ba28680846052ae77839260a416",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Build",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "checkout",
                      "arguments": [
                        {
                          "key": "scm",
                          "value": {
                            "isLiteral": false,
                            "value": "${scm}"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "./scripts/jenkins_build.sh"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "./scripts/jenkins_archive.sh"
                          }
                        }
                      ]
                    },
                    {
                      "name": "deleteDir",
                      "arguments": []
                    }
                  ]
                }
              ],
              "agent": {
                "type": "label",
                "argument": {
                  "isLiteral": true,
                  "value": "linux-build"
                }
              },
              "post": {
                "conditions": [
                  {
                    "condition": "always",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "deleteDir",
                          "arguments": []
                        }
                      ]
                    }
                  }
                ]
              }
            },
            {
              "name": "Test",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def test_tasks = [:]\n\n          // Add live test tasks\n          def modules = ['acs', 'keyvault', 'storage', 'sql', 'role', 'vm', 'network']\n          for (int i = 0; i < modules.size(); ++i) {\n            def name = modules.get(i)\n            test_tasks[\"Live Test: ${name}\"] = {\n              node('linux-build') {\n                checkout scm\n                withCredentials([[$class: 'UsernamePasswordMultiBinding', \n                                  credentialsId: 'AzureSDKADGraph2',\n                                  usernameVariable: 'AZURE_CLI_TEST_DEV_SP_NAME', \n                                  passwordVariable: 'AZURE_CLI_TEST_DEV_SP_PASSWORD']]) {\n                withCredentials([string(credentialsId: 'AzureSDKADGraph2_Tenant',\n                                        variable: 'AZURE_CLI_TEST_DEV_SP_TENANT')]) {\n                  sh \"./scripts/jenkins_live_test.sh ${name}\"\n                }}\n              }\n            }\n          }\n\n          // Add performance test tasks\n          def platforms = ['perf-ubuntu-a0', 'perf-ubuntu-ds1']\n          for (int i = 0; i < platforms.size(); i++) {\n            platform = platforms.get(i)\n            test_tasks[\"Performance Test: ${platform}\"] = perf_closure(platform)\n          }\n\n          test_tasks.failFast = false\n          parallel test_tasks"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "agent": {
            "type": "none"
          },
          "triggers": {
            "triggers": [
              {
                "name": "cron",
                "arguments": [
                  {
                    "isLiteral": true,
                    "value": "0 3 * * *"
                  }
                ]
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "Azure/azure-cli",
      "repo_url": "https://github.com/Azure/azure-cli",
      "html_url_jenkinsfile": "https://github.com/Azure/azure-cli/blob/30c98a75c36c02a657f1753ff5c48502dc7f7933/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/51040886/git/blobs/9a7a60e3e7cb9ba28680846052ae77839260a416",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Build",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "checkout",
                      "arguments": [
                        {
                          "key": "scm",
                          "value": {
                            "isLiteral": false,
                            "value": "${scm}"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "./scripts/jenkins_build.sh"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "./scripts/jenkins_archive.sh"
                          }
                        }
                      ]
                    },
                    {
                      "name": "deleteDir",
                      "arguments": []
                    }
                  ]
                }
              ],
              "agent": {
                "type": "label",
                "argument": {
                  "isLiteral": true,
                  "value": "linux-build"
                }
              },
              "post": {
                "conditions": [
                  {
                    "condition": "always",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "deleteDir",
                          "arguments": []
                        }
                      ]
                    }
                  }
                ]
              }
            },
            {
              "name": "Test",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def test_tasks = [:]\n\n          // Add live test tasks\n          def modules = ['acs', 'keyvault', 'storage', 'sql', 'role', 'vm', 'network']\n          for (int i = 0; i < modules.size(); ++i) {\n            def name = modules.get(i)\n            test_tasks[\"Live Test: ${name}\"] = {\n              node('linux-build') {\n                checkout scm\n                withCredentials([[$class: 'UsernamePasswordMultiBinding', \n                                  credentialsId: 'AzureSDKADGraph2',\n                                  usernameVariable: 'AZURE_CLI_TEST_DEV_SP_NAME', \n                                  passwordVariable: 'AZURE_CLI_TEST_DEV_SP_PASSWORD']]) {\n                withCredentials([string(credentialsId: 'AzureSDKADGraph2_Tenant',\n                                        variable: 'AZURE_CLI_TEST_DEV_SP_TENANT')]) {\n                  sh \"./scripts/jenkins_live_test.sh ${name}\"\n                }}\n              }\n            }\n          }\n\n          // Add performance test tasks\n          def platforms = ['perf-ubuntu-a0', 'perf-ubuntu-ds1']\n          for (int i = 0; i < platforms.size(); i++) {\n            platform = platforms.get(i)\n            test_tasks[\"Performance Test: ${platform}\"] = perf_closure(platform)\n          }\n\n          test_tasks.failFast = false\n          parallel test_tasks"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "agent": {
            "type": "none"
          },
          "triggers": {
            "triggers": [
              {
                "name": "cron",
                "arguments": [
                  {
                    "isLiteral": true,
                    "value": "0 3 * * *"
                  }
                ]
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "derekbekoe/azure-cli-scratch",
      "repo_url": "https://github.com/derekbekoe/azure-cli-scratch",
      "html_url_jenkinsfile": "https://github.com/derekbekoe/azure-cli-scratch/blob/178aed0b71be724e94217d22ed335fe40af6d82c/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/95806334/git/blobs/9a7a60e3e7cb9ba28680846052ae77839260a416",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Build",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "checkout",
                      "arguments": [
                        {
                          "key": "scm",
                          "value": {
                            "isLiteral": false,
                            "value": "${scm}"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "./scripts/jenkins_build.sh"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "./scripts/jenkins_archive.sh"
                          }
                        }
                      ]
                    },
                    {
                      "name": "deleteDir",
                      "arguments": []
                    }
                  ]
                }
              ],
              "agent": {
                "type": "label",
                "argument": {
                  "isLiteral": true,
                  "value": "linux-build"
                }
              },
              "post": {
                "conditions": [
                  {
                    "condition": "always",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "deleteDir",
                          "arguments": []
                        }
                      ]
                    }
                  }
                ]
              }
            },
            {
              "name": "Test",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def test_tasks = [:]\n\n          // Add live test tasks\n          def modules = ['acs', 'keyvault', 'storage', 'sql', 'role', 'vm', 'network']\n          for (int i = 0; i < modules.size(); ++i) {\n            def name = modules.get(i)\n            test_tasks[\"Live Test: ${name}\"] = {\n              node('linux-build') {\n                checkout scm\n                withCredentials([[$class: 'UsernamePasswordMultiBinding', \n                                  credentialsId: 'AzureSDKADGraph2',\n                                  usernameVariable: 'AZURE_CLI_TEST_DEV_SP_NAME', \n                                  passwordVariable: 'AZURE_CLI_TEST_DEV_SP_PASSWORD']]) {\n                withCredentials([string(credentialsId: 'AzureSDKADGraph2_Tenant',\n                                        variable: 'AZURE_CLI_TEST_DEV_SP_TENANT')]) {\n                  sh \"./scripts/jenkins_live_test.sh ${name}\"\n                }}\n              }\n            }\n          }\n\n          // Add performance test tasks\n          def platforms = ['perf-ubuntu-a0', 'perf-ubuntu-ds1']\n          for (int i = 0; i < platforms.size(); i++) {\n            platform = platforms.get(i)\n            test_tasks[\"Performance Test: ${platform}\"] = perf_closure(platform)\n          }\n\n          test_tasks.failFast = false\n          parallel test_tasks"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "agent": {
            "type": "none"
          },
          "triggers": {
            "triggers": [
              {
                "name": "cron",
                "arguments": [
                  {
                    "isLiteral": true,
                    "value": "0 3 * * *"
                  }
                ]
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "jnTJ3cP7/jf",
      "repo_url": "https://github.com/jnTJ3cP7/jf",
      "html_url_jenkinsfile": "https://github.com/jnTJ3cP7/jf/blob/6630f655fdcef43612e3181ad1c1aee458c97265/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/104537170/git/blobs/f2cfbe03b2ad93e007c97a999def6031bc235c72",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Example",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": false,
                            "value": "\"Hello from $NAME\""
                          }
                        }
                      ]
                    },
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def browsers = ['chrome', 'firefox']\n                         for (int i = 0; i < browsers.size(); ++i) {\n                              echo \"Testing the ${browsers[i]} browser.\"\n                         }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "expression",
                    "arguments": [
                      {
                        "key": "scriptBlock",
                        "value": {
                          "isLiteral": true,
                          "value": "return params.DEBUG_BUILD"
                        }
                      }
                    ]
                  }
                ]
              },
              "environment": [
                {
                  "key": "NAME",
                  "value": {
                    "isLiteral": true,
                    "value": "Rafal"
                  }
                }
              ]
            }
          ],
          "post": {
            "conditions": [
              {
                "condition": "always",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "I will always say Hello again!"
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          },
          "agent": {
            "type": "any"
          },
          "options": {
            "options": [
              {
                "name": "timeout",
                "arguments": [
                  {
                    "key": "time",
                    "value": {
                      "isLiteral": true,
                      "value": 5
                    }
                  }
                ]
              }
            ]
          },
          "parameters": {
            "parameters": [
              {
                "name": "booleanParam",
                "arguments": [
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "DEBUG_BUILD"
                    }
                  },
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": true,
                      "value": true
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "Is it the debug build?"
                    }
                  }
                ]
              }
            ]
          },
          "triggers": {
            "triggers": [
              {
                "name": "cron",
                "arguments": [
                  {
                    "isLiteral": true,
                    "value": "0 * * * *"
                  }
                ]
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "Calredman/sonar-test",
      "repo_url": "https://github.com/Calredman/sonar-test",
      "html_url_jenkinsfile": "https://github.com/Calredman/sonar-test/blob/eb5c7f4b43cb8dd615c45994cd51f87b9d6506f5/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/131998661/git/blobs/0ee95a07eff80ebb8d8848f05900e7809587b699",
      "jenkins_pipeline": [
        {
          "error": [
            "Tool type \"maven\" does not have an install of \"Default Maven\" configured - did you mean \"Jenkins_maven\"? @ line 13, column 15.",
            "Tool type \"jdk\" does not have an install of \"DefaultJDK\" configured - did you mean \"null\"? @ line 14, column 13."
          ]
        }
      ]
    },
    {
      "full_repo_name": "ahmedelnably/newCreate",
      "repo_url": "https://github.com/ahmedelnably/newCreate",
      "html_url_jenkinsfile": "https://github.com/ahmedelnably/newCreate/blob/ae8e32d516034aa5da93047720402b32362d7126/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/119572463/git/blobs/9a7a60e3e7cb9ba28680846052ae77839260a416",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Build",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "checkout",
                      "arguments": [
                        {
                          "key": "scm",
                          "value": {
                            "isLiteral": false,
                            "value": "${scm}"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "./scripts/jenkins_build.sh"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "./scripts/jenkins_archive.sh"
                          }
                        }
                      ]
                    },
                    {
                      "name": "deleteDir",
                      "arguments": []
                    }
                  ]
                }
              ],
              "agent": {
                "type": "label",
                "argument": {
                  "isLiteral": true,
                  "value": "linux-build"
                }
              },
              "post": {
                "conditions": [
                  {
                    "condition": "always",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "deleteDir",
                          "arguments": []
                        }
                      ]
                    }
                  }
                ]
              }
            },
            {
              "name": "Test",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def test_tasks = [:]\n\n          // Add live test tasks\n          def modules = ['acs', 'keyvault', 'storage', 'sql', 'role', 'vm', 'network']\n          for (int i = 0; i < modules.size(); ++i) {\n            def name = modules.get(i)\n            test_tasks[\"Live Test: ${name}\"] = {\n              node('linux-build') {\n                checkout scm\n                withCredentials([[$class: 'UsernamePasswordMultiBinding', \n                                  credentialsId: 'AzureSDKADGraph2',\n                                  usernameVariable: 'AZURE_CLI_TEST_DEV_SP_NAME', \n                                  passwordVariable: 'AZURE_CLI_TEST_DEV_SP_PASSWORD']]) {\n                withCredentials([string(credentialsId: 'AzureSDKADGraph2_Tenant',\n                                        variable: 'AZURE_CLI_TEST_DEV_SP_TENANT')]) {\n                  sh \"./scripts/jenkins_live_test.sh ${name}\"\n                }}\n              }\n            }\n          }\n\n          // Add performance test tasks\n          def platforms = ['perf-ubuntu-a0', 'perf-ubuntu-ds1']\n          for (int i = 0; i < platforms.size(); i++) {\n            platform = platforms.get(i)\n            test_tasks[\"Performance Test: ${platform}\"] = perf_closure(platform)\n          }\n\n          test_tasks.failFast = false\n          parallel test_tasks"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "agent": {
            "type": "none"
          },
          "triggers": {
            "triggers": [
              {
                "name": "cron",
                "arguments": [
                  {
                    "isLiteral": true,
                    "value": "0 3 * * *"
                  }
                ]
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "dcos-labs/ui-kit",
      "repo_url": "https://github.com/dcos-labs/ui-kit",
      "html_url_jenkinsfile": "https://github.com/dcos-labs/ui-kit/blob/35fd2b4b0c206002138ce7ad7d8e8b14c053679f/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/125121993/git/blobs/dfefc64e209e6298d5f4a8ccc5d4e4321faed99a",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Authorization",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "user_is_authorized",
                      "arguments": [
                        {
                          "isLiteral": false,
                          "value": "${master_branches}"
                        },
                        {
                          "isLiteral": true,
                          "value": "8b793652-f26a-422f-a9ba-0d1e47eb9d89"
                        },
                        {
                          "isLiteral": true,
                          "value": "#frontend-dev"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Initialization",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "ansiColor",
                      "arguments": {
                        "isLiteral": true,
                        "value": "xterm"
                      },
                      "children": [
                        {
                          "name": "retry",
                          "arguments": {
                            "isLiteral": true,
                            "value": 2
                          },
                          "children": [
                            {
                              "name": "sh",
                              "arguments": [
                                {
                                  "key": "script",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "npm install"
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Lint",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "ansiColor",
                      "arguments": {
                        "isLiteral": true,
                        "value": "xterm"
                      },
                      "children": [
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "npm run lint"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Unit Test",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "ansiColor",
                      "arguments": {
                        "isLiteral": true,
                        "value": "xterm"
                      },
                      "children": [
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "npm run test -- --collectCoverage"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Build",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "ansiColor",
                      "arguments": {
                        "isLiteral": true,
                        "value": "xterm"
                      },
                      "children": [
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "npm run dist"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ],
              "post": {
                "conditions": [
                  {
                    "condition": "always",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "archiveArtifacts",
                          "arguments": [
                            {
                              "key": "artifacts",
                              "value": {
                                "isLiteral": true,
                                "value": "dist/**/*"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  }
                ]
              }
            },
            {
              "name": "Build Storybook",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "ansiColor",
                      "arguments": {
                        "isLiteral": true,
                        "value": "xterm"
                      },
                      "children": [
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "npm run build:storybook"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ],
              "post": {
                "conditions": [
                  {
                    "condition": "always",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "archiveArtifacts",
                          "arguments": [
                            {
                              "key": "artifacts",
                              "value": {
                                "isLiteral": true,
                                "value": "storybook-static/**/*"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  }
                ]
              }
            },
            {
              "name": "Deploy",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "rm -rf ui-kit && git clone https://github.com/dcos-labs/ui-kit.git && cd ui-kit && npm install"
                          }
                        }
                      ]
                    },
                    {
                      "name": "withCredentials",
                      "arguments": {
                        "isLiteral": false,
                        "value": "${[\n          string(credentialsId: 'd146870f-03b0-4f6a-ab70-1d09757a51fc', variable: 'GITHUB_TOKEN')\n        ]}"
                      },
                      "children": [
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "cd ui-kit && npm run deploy:storybook -- --ci --host-token-env-variable=GITHUB_TOKEN"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "expression",
                    "arguments": [
                      {
                        "key": "scriptBlock",
                        "value": {
                          "isLiteral": true,
                          "value": "env.BRANCH_NAME == 'master'"
                        }
                      }
                    ]
                  }
                ]
              }
            }
          ],
          "environment": [
            {
              "key": "JENKINS_VERSION",
              "value": {
                "isLiteral": true,
                "value": "yes"
              }
            }
          ],
          "agent": {
            "type": "dockerfile",
            "arguments": [
              {
                "key": "args",
                "value": {
                  "isLiteral": true,
                  "value": "--shm-size=2g"
                }
              }
            ]
          },
          "options": {
            "options": [
              {
                "name": "timeout",
                "arguments": [
                  {
                    "key": "time",
                    "value": {
                      "isLiteral": true,
                      "value": 1
                    }
                  },
                  {
                    "key": "unit",
                    "value": {
                      "isLiteral": true,
                      "value": "HOURS"
                    }
                  }
                ]
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "tikalk/parallel-maven-test",
      "repo_url": "https://github.com/tikalk/parallel-maven-test",
      "html_url_jenkinsfile": "https://github.com/tikalk/parallel-maven-test/blob/403a80a7624dbbceb4ce397bb6b9cdc644c0c01e/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/122335064/git/blobs/9e50441ed60f9cfe306eb0f862b9935b963eeab8",
      "jenkins_pipeline": [
        {
          "error": [
            "Tool type \"maven\" does not have an install of \"mvn350\" configured - did you mean \"Jenkins_maven\"? @ line 9, column 15.",
            "Tool type \"jdk\" does not have an install of \"jdk8u131\" configured - did you mean \"null\"? @ line 10, column 13."
          ]
        }
      ]
    },
    {
      "full_repo_name": "sheeeng/elpmaxe-jubilant-giggle",
      "repo_url": "https://github.com/sheeeng/elpmaxe-jubilant-giggle",
      "html_url_jenkinsfile": "https://github.com/sheeeng/elpmaxe-jubilant-giggle/blob/13b73470a9e6bece70f6c325f4dee87962261463/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/85839408/git/blobs/b2b3ec2ee0af048bf158783e4ae98b17342cab81",
      "jenkins_pipeline": [
        {
          "error": [
            "Tool type \"maven\" does not have an install of \"M3\" configured - did you mean \"Jenkins_maven\"? @ line 26, column 15.",
            "Tool type \"jdk\" does not have an install of \"JDK8\" configured - did you mean \"null\"? @ line 27, column 13."
          ]
        }
      ]
    },
    {
      "full_repo_name": "santech-org/studio",
      "repo_url": "https://github.com/santech-org/studio",
      "html_url_jenkinsfile": "https://github.com/santech-org/studio/blob/1cef42c5d39a1662ba70a519b8f97b26bed0eb09/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/131020760/git/blobs/bd5d3aedebb351f9d5d7899ffc5664eceb63cacf",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "pull build image",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "notify('INPROGRESS')\n          imgNode.pull()"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Checkout",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "checkout",
                      "arguments": [
                        {
                          "key": "scm",
                          "value": {
                            "isLiteral": false,
                            "value": "${scm}"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "build in docker",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def deps = [\n            \"core\",\n            \"common\",\n            \"websocket\",\n            \"angular-analytics\",\n            \"angular-platform\",\n            \"angular-common\",\n            \"angular-websocket\",\n            \"angular-i18n\",\n            \"analytics-core\",\n            \"analytics-integration\"]\n\n          imgNode.inside(\"--privileged --cpus=3\") {\n            withCredentials([[\n              $class: 'StringBinding',\n              credentialsId: 'npm-santechdev',\n              variable: 'NPM_TOKEN'\n            ]]) {\n\n              stage('prepare npm') {\n                configFileProvider([configFile(fileId: 'npmrc', variable: 'NPMRC')]) {\n                  sh 'cp $NPMRC ~/.npmrc'\n                }\n              }\n\n              stage('install') {\n                ansiColor('xterm') {\n                  sh \"yarn\"\n                }\n              }\n\n              stage('lint') {\n                ansiColor('xterm') {\n                  sh \"yarn run lint\"\n                }\n                if('UNSTABLE' == currentBuild?.result) {\n                  notify('FAILED')\n                }\n              }\n\n              stage('build') {\n                ansiColor('xterm') {\n                  sh \"yarn run build\"\n                }\n                if('UNSTABLE' == currentBuild?.result) {\n                  notify('FAILED')\n                }\n              }\n\n              stage('test') {\n                ansiColor('xterm') {\n                  sh \"yarn run test\"\n                }\n                if('UNSTABLE' == currentBuild?.result) {\n                  notify('FAILED')\n                }\n              }\n\n              stage('publish') {\n                if (env.BRANCH_NAME == 'master') {\n                  runParallel(deps, '../../scripts/publish.sh')\n                } else {\n                  echo 'skipping publish as not on master'\n                }\n              }\n            }\n          }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "post": {
            "conditions": [
              {
                "condition": "always",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "deleteDir",
                      "arguments": []
                    }
                  ]
                }
              }
            ]
          },
          "environment": [
            {
              "key": "NPM_CONFIG_LOGLEVEL",
              "value": {
                "isLiteral": true,
                "value": "warn"
              }
            }
          ],
          "agent": {
            "type": "any"
          },
          "options": {
            "options": [
              {
                "name": "disableConcurrentBuilds",
                "arguments": []
              },
              {
                "name": "timeout",
                "arguments": [
                  {
                    "key": "time",
                    "value": {
                      "isLiteral": true,
                      "value": 30
                    }
                  },
                  {
                    "key": "unit",
                    "value": {
                      "isLiteral": true,
                      "value": "MINUTES"
                    }
                  }
                ]
              },
              {
                "name": "buildDiscarder",
                "arguments": [
                  {
                    "name": "logRotator",
                    "arguments": [
                      {
                        "key": "numToKeepStr",
                        "value": {
                          "isLiteral": true,
                          "value": "5"
                        }
                      },
                      {
                        "key": "artifactNumToKeepStr",
                        "value": {
                          "isLiteral": true,
                          "value": "5"
                        }
                      }
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "yuzp1996/hello-world",
      "repo_url": "https://github.com/yuzp1996/hello-world",
      "html_url_jenkinsfile": "https://github.com/yuzp1996/hello-world/blob/ecdb616161633f899ab1bdba6e59d25bf70bb1a2/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/130826080/git/blobs/d95a9c8098aaeb9508d3ddd2accbb31d411ce802",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Build",
              "parallel": [
                {
                  "name": "Build",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "alaudaStartBuild",
                          "arguments": [
                            {
                              "key": "buildConfigName",
                              "value": {
                                "isLiteral": true,
                                "value": "hello-world"
                              }
                            },
                            {
                              "key": "async",
                              "value": {
                                "isLiteral": true,
                                "value": true
                              }
                            },
                            {
                              "key": "branch",
                              "value": {
                                "isLiteral": true,
                                "value": "master"
                              }
                            },
                            {
                              "key": "commitID",
                              "value": {
                                "isLiteral": true,
                                "value": "4dbbebb1a2e3234d7cfec1e1485d4463fcd3020d"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "error",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "echo XXXXX"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Parallel Stage",
              "parallel": [
                {
                  "name": "Update Service",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "Update the service..."
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "Deploy an application",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "Deploy an application..."
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "branch",
                    "arguments": {
                      "isLiteral": true,
                      "value": "master"
                    }
                  }
                ]
              }
            },
            {
              "name": "Deploy - Staging",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "./deploy staging"
                          }
                        }
                      ]
                    },
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "./run-smoke-tests"
                          }
                        }
                      ]
                    },
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def browsers = ['chrome', 'firefox', 'opera']\n          for (int i = 0; i < browsers.size(); ++i) {\n            echo \"Testing the ${browsers[i]} browser\"\n          }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Sanity check",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "input",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "Does the staging environment look ok?"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Deploy - Production",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "./deploy production"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "expression",
                    "arguments": [
                      {
                        "key": "scriptBlock",
                        "value": {
                          "isLiteral": true,
                          "value": "currentBuild.result == null || currentBuild.result == 'SUCCESS'"
                        }
                      }
                    ]
                  }
                ]
              }
            }
          ],
          "post": {
            "conditions": [
              {
                "condition": "always",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "One way or another, I have finished"
                          }
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "condition": "success",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "I am successed!"
                          }
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "condition": "unstable",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "I am unstable :/"
                          }
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "condition": "failure",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "I am failed :("
                          }
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "condition": "aborted",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "I am aborted..."
                          }
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "condition": "changed",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "Things were different before..."
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          },
          "environment": [
            {
              "key": "DEPLOY_TO",
              "value": {
                "isLiteral": true,
                "value": "production"
              }
            }
          ],
          "agent": {
            "type": "any"
          },
          "options": {
            "options": [
              {
                "name": "timeout",
                "arguments": [
                  {
                    "key": "time",
                    "value": {
                      "isLiteral": true,
                      "value": 1
                    }
                  },
                  {
                    "key": "unit",
                    "value": {
                      "isLiteral": true,
                      "value": "HOURS"
                    }
                  }
                ]
              }
            ]
          },
          "parameters": {
            "parameters": [
              {
                "name": "string",
                "arguments": [
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "person"
                    }
                  },
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": true,
                      "value": "sywang"
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "Who should I say hello to?"
                    }
                  }
                ]
              },
              {
                "name": "string",
                "arguments": [
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "repoUrl"
                    }
                  },
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": true,
                      "value": "https://github.com/sniperyen/hello-world"
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "gitä»£ç è·¯å¾"
                    }
                  }
                ]
              },
              {
                "name": "string",
                "arguments": [
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "repoBranch"
                    }
                  },
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": true,
                      "value": "master"
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "gitåæ¯åç§°"
                    }
                  }
                ]
              },
              {
                "name": "string",
                "arguments": [
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "dockerfilePath"
                    }
                  },
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": true,
                      "value": "Dockerfile"
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "ç¸å¯¹è·¯å¾"
                    }
                  }
                ]
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "TomCzHen/jenkins-android-sample",
      "repo_url": "https://github.com/TomCzHen/jenkins-android-sample",
      "html_url_jenkinsfile": "https://github.com/TomCzHen/jenkins-android-sample/blob/d6e7eb107d9f9ee21285831d9c9db40abc34675d/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/107942197/git/blobs/a45bee6ae8b8f8c2f60b488cf9b5b1c5204d8100",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Initialize",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "withCredentials",
                      "arguments": {
                        "isLiteral": false,
                        "value": "${[\n                        string(credentialsId: 'BETA_SECRET_KEY', variable: 'SECRET_KEY'),\n                        string(credentialsId: 'PROD_SECRET_KEY', variable: 'SECRET_KEY')\n                ]}"
                      },
                      "children": []
                    }
                  ]
                }
              ],
              "post": {
                "conditions": [
                  {
                    "condition": "failure",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "echo",
                          "arguments": [
                            {
                              "key": "message",
                              "value": {
                                "isLiteral": true,
                                "value": "Check Credentials Failure, Please Check Credentials Config!"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  },
                  {
                    "condition": "success",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "echo",
                          "arguments": [
                            {
                              "key": "message",
                              "value": {
                                "isLiteral": true,
                                "value": "Check Credentials Success!"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  }
                ]
              }
            },
            {
              "name": "Build Develop APK",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "withCredentials",
                      "arguments": {
                        "isLiteral": false,
                        "value": "${[string(credentialsId: 'BETA_SECRET_KEY', variable: 'SECRET_KEY')]}"
                      },
                      "children": [
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "./gradlew clean assembleDevDebug"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "branch",
                    "arguments": {
                      "isLiteral": true,
                      "value": "master"
                    }
                  }
                ]
              },
              "post": {
                "conditions": [
                  {
                    "condition": "failure",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "echo",
                          "arguments": [
                            {
                              "key": "message",
                              "value": {
                                "isLiteral": true,
                                "value": "Build Develop APK Failure!"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  },
                  {
                    "condition": "success",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "echo",
                          "arguments": [
                            {
                              "key": "message",
                              "value": {
                                "isLiteral": true,
                                "value": "Build Develop APK Success!"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  }
                ]
              }
            },
            {
              "name": "Build Beta APK",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "withCredentials",
                      "arguments": {
                        "isLiteral": false,
                        "value": "${[string(credentialsId: 'BETA_SECRET_KEY', variable: 'SECRET_KEY')]}"
                      },
                      "children": [
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "./gradlew clean assembleBetaDebug"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "branch",
                    "arguments": {
                      "isLiteral": true,
                      "value": "beta"
                    }
                  }
                ]
              },
              "post": {
                "conditions": [
                  {
                    "condition": "failure",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "echo",
                          "arguments": [
                            {
                              "key": "message",
                              "value": {
                                "isLiteral": true,
                                "value": "Build Beta APK Failure!"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  },
                  {
                    "condition": "success",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "echo",
                          "arguments": [
                            {
                              "key": "message",
                              "value": {
                                "isLiteral": true,
                                "value": "Build Beta APK Success!"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  }
                ]
              }
            },
            {
              "name": "Build Prod APK",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "withCredentials",
                      "arguments": {
                        "isLiteral": false,
                        "value": "${[string(credentialsId: 'PROD_SECRET_KEY', variable: 'SECRET_KEY')]}"
                      },
                      "children": [
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "./gradlew clean assembleProd"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "branch",
                    "arguments": {
                      "isLiteral": true,
                      "value": "prod"
                    }
                  }
                ]
              },
              "post": {
                "conditions": [
                  {
                    "condition": "failure",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "echo",
                          "arguments": [
                            {
                              "key": "message",
                              "value": {
                                "isLiteral": true,
                                "value": "Build Prod APK Failure!"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  },
                  {
                    "condition": "success",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "signAndroidApks",
                          "arguments": [
                            {
                              "key": "keyStoreId",
                              "value": {
                                "isLiteral": true,
                                "value": "ANDROID_SIGN_KEY_STORE"
                              }
                            },
                            {
                              "key": "keyAlias",
                              "value": {
                                "isLiteral": true,
                                "value": "tomczhen"
                              }
                            },
                            {
                              "key": "apksToSign",
                              "value": {
                                "isLiteral": true,
                                "value": "**/*-prod-release-unsigned.apk"
                              }
                            },
                            {
                              "key": "archiveSignedApks",
                              "value": {
                                "isLiteral": true,
                                "value": false
                              }
                            },
                            {
                              "key": "archiveUnsignedApks",
                              "value": {
                                "isLiteral": true,
                                "value": false
                              }
                            }
                          ]
                        }
                      ]
                    }
                  }
                ]
              }
            },
            {
              "name": "Upload",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "archiveArtifacts",
                      "arguments": [
                        {
                          "key": "artifacts",
                          "value": {
                            "isLiteral": true,
                            "value": "app/build/outputs/apk/**/*.apk"
                          }
                        },
                        {
                          "key": "fingerprint",
                          "value": {
                            "isLiteral": true,
                            "value": true
                          }
                        },
                        {
                          "key": "onlyIfSuccessful",
                          "value": {
                            "isLiteral": true,
                            "value": true
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "post": {
                "conditions": [
                  {
                    "condition": "failure",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "echo",
                          "arguments": [
                            {
                              "key": "message",
                              "value": {
                                "isLiteral": true,
                                "value": "Archive Failure!"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  },
                  {
                    "condition": "success",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "echo",
                          "arguments": [
                            {
                              "key": "message",
                              "value": {
                                "isLiteral": true,
                                "value": "Archive Success!"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  }
                ]
              }
            },
            {
              "name": "Report",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": false,
                            "value": "${getChangeString()}"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "agent": {
            "type": "label",
            "argument": {
              "isLiteral": true,
              "value": "master"
            }
          },
          "options": {
            "options": [
              {
                "name": "buildDiscarder",
                "arguments": [
                  {
                    "name": "logRotator",
                    "arguments": [
                      {
                        "key": "numToKeepStr",
                        "value": {
                          "isLiteral": true,
                          "value": "30"
                        }
                      },
                      {
                        "key": "daysToKeepStr",
                        "value": {
                          "isLiteral": true,
                          "value": "7"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "name": "timestamps",
                "arguments": []
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "mesosphere/mockserver",
      "repo_url": "https://github.com/mesosphere/mockserver",
      "html_url_jenkinsfile": "https://github.com/mesosphere/mockserver/blob/d475cfb743fb4e7bdac2caed38a7a65a45a9d16f/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/129415150/git/blobs/16aa73d31c3dbdda4febcca79834045dec490aef",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Authorization",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "user_is_authorized",
                      "arguments": [
                        {
                          "isLiteral": false,
                          "value": "${master_branches}"
                        },
                        {
                          "isLiteral": true,
                          "value": "8b793652-f26a-422f-a9ba-0d1e47eb9d89"
                        },
                        {
                          "isLiteral": true,
                          "value": "#frontend-dev"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Initialization",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "npm install"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Test",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "npm test -- --forceExit"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "post": {
                "conditions": [
                  {
                    "condition": "always",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "junit",
                          "arguments": [
                            {
                              "key": "testResults",
                              "value": {
                                "isLiteral": true,
                                "value": "junit.xml"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  }
                ]
              }
            },
            {
              "name": "Bump Version",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "withCredentials",
                      "arguments": {
                        "isLiteral": false,
                        "value": "${[\n            usernamePassword(credentialsId: 'a7ac7f84-64ea-4483-8e66-bb204484e58f', passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USER')\n        ]}"
                      },
                      "children": [
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "git fetch"
                              }
                            }
                          ]
                        },
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": false,
                                "value": "\"git checkout $BRANCH_NAME\""
                              }
                            }
                          ]
                        },
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "echo Last Commit: $(git log -1 --oneline)"
                              }
                            }
                          ]
                        },
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": false,
                                "value": "\"[ \\\"\\$(git log --oneline \\$(git tag -l --sort=-version:refname | head -1)...HEAD | grep -E '(fix?(.+):|feat?(.+):|perf?(.+):)' | wc -l)\\\" -ne 0 ] && npm run release && git push --follow-tags https://$GIT_USER:$GIT_PASSWORD@github.com/mesosphere/mockserver $BRANCH_NAME || echo 'Last commit it not a merge.'\""
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "expression",
                    "arguments": [
                      {
                        "key": "scriptBlock",
                        "value": {
                          "isLiteral": true,
                          "value": "release_branches.contains(BRANCH_NAME)"
                        }
                      }
                    ]
                  }
                ]
              }
            }
          ],
          "agent": {
            "type": "dockerfile",
            "arguments": [
              {
                "key": "filename",
                "value": {
                  "isLiteral": true,
                  "value": "Dockerfile.dev"
                }
              },
              {
                "key": "args",
                "value": {
                  "isLiteral": true,
                  "value": "--shm-size=1g"
                }
              }
            ]
          },
          "options": {
            "options": [
              {
                "name": "timeout",
                "arguments": [
                  {
                    "key": "time",
                    "value": {
                      "isLiteral": true,
                      "value": 15
                    }
                  },
                  {
                    "key": "unit",
                    "value": {
                      "isLiteral": true,
                      "value": "MINUTES"
                    }
                  }
                ]
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "de-jcup/eclipse-jenkins-editor",
      "repo_url": "https://github.com/de-jcup/eclipse-jenkins-editor",
      "html_url_jenkinsfile": "https://github.com/de-jcup/eclipse-jenkins-editor/blob/14b2170be62e4ed94f1673a7171b1e3bfdbd7814/jenkins-editor-other/testscripts/declarative-full/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/104872758/git/blobs/476d36de3384d917aa8c1cea23a1b337a58620d1",
      "jenkins_pipeline": [
        {
          "error": [
            "No steps specified for branch @ line 192, column 18.",
            "No steps specified for branch @ line 196, column 18.",
            "No steps specified for branch @ line 200, column 12.",
            "No steps specified for branch @ line 204, column 19.",
            "No steps specified for branch @ line 208, column 18.",
            "Tool type \"maven\" does not have an install of \"apache-maven-3.0.1\" configured - did you mean \"Jenkins_maven\"? @ line 29, column 16."
          ]
        }
      ]
    },
    {
      "full_repo_name": "jgpelaez/openshift-ansible-nfs",
      "repo_url": "https://github.com/jgpelaez/openshift-ansible-nfs",
      "html_url_jenkinsfile": "https://github.com/jgpelaez/openshift-ansible-nfs/blob/ef0d2ff7c5b3c9c856402e74c1b85ea101fa192e/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/96988331/git/blobs/c90bec5aec7b86f27431ffe47f703ece28e83071",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Ansible Playbook",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "dir",
                      "arguments": {
                        "isLiteral": false,
                        "value": "${ansibleFolder}"
                      },
                      "children": [
                        {
                          "name": "ansiblePlaybook",
                          "arguments": [
                            {
                              "key": "playbook",
                              "value": {
                                "isLiteral": false,
                                "value": "${devopsFolder+playbook}"
                              }
                            },
                            {
                              "key": "credentialsId",
                              "value": {
                                "isLiteral": false,
                                "value": "${credendialsId}"
                              }
                            },
                            {
                              "key": "sudo",
                              "value": {
                                "isLiteral": true,
                                "value": true
                              }
                            },
                            {
                              "key": "inventory",
                              "value": {
                                "isLiteral": false,
                                "value": "${inventory}"
                              }
                            },
                            {
                              "key": "extraVars",
                              "value": {
                                "isLiteral": false,
                                "value": "[\n\t\t\t            \tnode: node,\n\t\t\t                size: pvSize,\n\t\t\t                disk: disk,\n\t\t\t                kube_nfs_volumes_kubernetes_url: openshiftUrl,\n\t\t\t                openshift_namespace: openshiftNameSpace,\n\t\t\t                claim_name: claimName,\n\t\t\t                do_PV: doPV,\n\t\t\t                backup: doBackup,\n\t\t\t                do_Claim: doClaim,\n\t\t\t                kubernetes_token: openshiftToken\n\t\t\t            ]"
                              }
                            },
                            {
                              "key": "colorized",
                              "value": {
                                "isLiteral": true,
                                "value": true
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "post": {
            "conditions": [
              {
                "condition": "success",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "success"
                          }
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "condition": "failure",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "emailext",
                      "arguments": [
                        {
                          "key": "subject",
                          "value": {
                            "isLiteral": false,
                            "value": "\"FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'\""
                          }
                        },
                        {
                          "key": "body",
                          "value": {
                            "isLiteral": false,
                            "value": "\"\"\"<p>FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>\n\t\t\t     <p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>\"\"\""
                          }
                        },
                        {
                          "key": "mimeType",
                          "value": {
                            "isLiteral": true,
                            "value": "text/html"
                          }
                        },
                        {
                          "key": "recipientProviders",
                          "value": {
                            "isLiteral": false,
                            "value": "${[[$class: 'DevelopersRecipientProvider']]}"
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          },
          "environment": [
            {
              "key": "devopsFolder",
              "value": {
                "isLiteral": true,
                "value": "."
              }
            },
            {
              "key": "ansibleFolder",
              "value": {
                "isLiteral": true,
                "value": "."
              }
            }
          ],
          "agent": {
            "type": "label",
            "argument": {
              "isLiteral": true,
              "value": "ansible"
            }
          },
          "options": {
            "options": [
              {
                "name": "timeout",
                "arguments": [
                  {
                    "key": "time",
                    "value": {
                      "isLiteral": true,
                      "value": 1
                    }
                  },
                  {
                    "key": "unit",
                    "value": {
                      "isLiteral": true,
                      "value": "HOURS"
                    }
                  }
                ]
              }
            ]
          },
          "parameters": {
            "parameters": [
              {
                "name": "string",
                "arguments": [
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "node"
                    }
                  },
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": true,
                      "value": ""
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "Node name"
                    }
                  }
                ]
              },
              {
                "name": "string",
                "arguments": [
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "disk"
                    }
                  },
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": true,
                      "value": ""
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "Raw disk name"
                    }
                  }
                ]
              },
              {
                "name": "string",
                "arguments": [
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "pvSize"
                    }
                  },
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": true,
                      "value": "1"
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "LV and PV size in GB"
                    }
                  }
                ]
              },
              {
                "name": "booleanParam",
                "arguments": [
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "doPV"
                    }
                  },
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": true,
                      "value": false
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "Mark if is needed to do persistent volume (PV) for the project"
                    }
                  }
                ]
              },
              {
                "name": "booleanParam",
                "arguments": [
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "doBackup"
                    }
                  },
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": true,
                      "value": false
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "Mark if is needed a daily doBackup of the content"
                    }
                  }
                ]
              },
              {
                "name": "booleanParam",
                "arguments": [
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "doClaim"
                    }
                  },
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": true,
                      "value": false
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "Mark if is needed to do claim (PVC) for the project"
                    }
                  }
                ]
              },
              {
                "name": "string",
                "arguments": [
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "inventory"
                    }
                  },
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": true,
                      "value": ""
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "Ansible inventory"
                    }
                  }
                ]
              },
              {
                "name": "string",
                "arguments": [
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "playbook"
                    }
                  },
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": true,
                      "value": "./playbooks/openshift-create-pv-lv.yml"
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "Ansible inventory"
                    }
                  }
                ]
              },
              {
                "name": "string",
                "arguments": [
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "credendialsId"
                    }
                  },
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": true,
                      "value": ""
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "Ansible credentials"
                    }
                  }
                ]
              },
              {
                "name": "string",
                "arguments": [
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "openshiftUrl"
                    }
                  },
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": true,
                      "value": ""
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "Openshift url"
                    }
                  }
                ]
              },
              {
                "name": "string",
                "arguments": [
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "openshiftNameSpace"
                    }
                  },
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": true,
                      "value": ""
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "Openshift project name"
                    }
                  }
                ]
              },
              {
                "name": "password",
                "arguments": [
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "openshiftToken"
                    }
                  },
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": true,
                      "value": ""
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "Openshift token"
                    }
                  }
                ]
              },
              {
                "name": "string",
                "arguments": [
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "claimName"
                    }
                  },
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": true,
                      "value": ""
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "Name of the claim in the Openshift project"
                    }
                  }
                ]
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "mytran/test",
      "repo_url": "https://github.com/mytran/test",
      "html_url_jenkinsfile": "https://github.com/mytran/test/blob/5baca10608f9aed4442aff046ab69a89e86128a5/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/131998182/git/blobs/d42134873c652646d9053d8fcbe8249b0f534771",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Test",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "milestone",
                      "arguments": [
                        {
                          "key": "ordinal",
                          "value": {
                            "isLiteral": true,
                            "value": null
                          }
                        }
                      ]
                    },
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": false,
                            "value": "\"Running ${env.BUILD_ID} on ${env.JENKINS_URL}\""
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "env"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Test - Flaky",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "milestone",
                      "arguments": [
                        {
                          "key": "ordinal",
                          "value": {
                            "isLiteral": true,
                            "value": null
                          }
                        }
                      ]
                    },
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": false,
                            "value": "\"Running ${env.BUILD_ID} on ${env.JENKINS_URL}\""
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "test -f /tmp"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Deploy to Stage",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "milestone",
                      "arguments": [
                        {
                          "key": "ordinal",
                          "value": {
                            "isLiteral": true,
                            "value": null
                          }
                        }
                      ]
                    },
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "Building and deploying to stage & test tier."
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "branch",
                    "arguments": {
                      "isLiteral": true,
                      "value": "master"
                    }
                  }
                ]
              }
            }
          ],
          "post": {
            "conditions": [
              {
                "condition": "always",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "properties([[$class: \"GithubProjectProperty\",\n                projectUrlStr: \"https://github.com/mytran/test\"]])"
                          }
                        }
                      ]
                    },
                    {
                      "name": "step",
                      "arguments": [
                        {
                          "key": "delegate",
                          "value": {
                            "isLiteral": false,
                            "value": "[$class: \"GitHubIssueNotifier\",\n                issueAppend: true,\n                issueLabel: \"flag:unit-test-fail\",\n                issueReopen: true,\n                issueTitle: \"$JOB_NAME $BUILD_DISPLAY_NAME failed\"]"
                          }
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "condition": "failure",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "Build failed"
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          },
          "agent": {
            "type": "any"
          }
        }
      }
    },
    {
      "full_repo_name": "tikalk/tikal-pipelib-touchstone",
      "repo_url": "https://github.com/tikalk/tikal-pipelib-touchstone",
      "html_url_jenkinsfile": "https://github.com/tikalk/tikal-pipelib-touchstone/blob/9702e3e00656ff10c371313c86ef8c5ce7cf5b70/examples/pipelineForce/starWarsSequence/parallelMavenTests/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/108547217/git/blobs/2b0ae8ead5ab964594bb663e64ee2e8aed9f98d9",
      "jenkins_pipeline": [
        {
          "error": "Invalid option type \"ansiColor\". Valid option types: [authorizationMatrix, buildDiscarder, catchError, checkoutToSubdirectory, disableConcurrentBuilds, disableResume, durabilityHint, gitLabConnection, gitlabBuilds, gitlabCommitStatus, overrideIndexTriggers, retry, script, skipDefaultCheckout, skipStagesAfterUnstable, timeout, timestamps, waitUntil, withContext, withCredentials, withEnv, ws] @ line 6, column 9."
        }
      ]
    },
    {
      "full_repo_name": "jhnotammake202015/raw-mvn",
      "repo_url": "https://github.com/jhnotammake202015/raw-mvn",
      "html_url_jenkinsfile": "https://github.com/jhnotammake202015/raw-mvn/blob/d9bfb3c4775f877aa1e643f590adb2a45a39c2f9/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/107461846/git/blobs/6d08f1e2d0f930d91b71c90c117ad8ea4d405b5c",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Init",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "header",
                      "arguments": {
                        "isLiteral": false,
                        "value": "\"Running ${env.BUILD_ID}, number ${env.BUILD_NUMBER} - ${env.BUILD_DISPLAY_NAME}\""
                      }
                    },
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": false,
                            "value": "${sh(script: 'env|sort', returnStdout: true)}"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Build",
              "parallel": [
                {
                  "name": "mvn clean install in parallel",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "header",
                          "arguments": {
                            "isLiteral": true,
                            "value": "Parallel running in vms slaves..."
                          }
                        },
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "uname -a"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ],
                  "agent": {
                    "type": "label",
                    "argument": {
                      "isLiteral": true,
                      "value": "vms"
                    }
                  }
                }
              ],
              "failFast": true
            },
            {
              "name": "Test",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "header",
                      "arguments": {
                        "isLiteral": true,
                        "value": "Testing.."
                      }
                    }
                  ]
                }
              ]
            },
            {
              "name": "Deploy",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "header",
                      "arguments": {
                        "isLiteral": true,
                        "value": "Deploying...."
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "post": {
            "conditions": [
              {
                "condition": "always",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "Finished"
                          }
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "condition": "failure",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": false,
                            "value": "\"with failure! ${currentBuild.result} | ${currentBuild.description}\""
                          }
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "condition": "success",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "Successful!"
                          }
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "condition": "unstable",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": false,
                            "value": "\"Unstable! ${currentBuild.result} | ${currentBuild.description}\""
                          }
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "condition": "aborted",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": false,
                            "value": "\"Aborted! ${currentBuild.result} | ${currentBuild.description}\""
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          },
          "agent": {
            "type": "any"
          }
        }
      }
    },
    {
      "full_repo_name": "JermineHu/DocStack",
      "repo_url": "https://github.com/JermineHu/DocStack",
      "html_url_jenkinsfile": "https://github.com/JermineHu/DocStack/blob/605de699f2873f52acabd6c4eeb2ee8843e01d67/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/126111837/git/blobs/d6b413230dee1860dbbe9aee4f7578abdb19e2db",
      "jenkins_pipeline": [
        {
          "error": [
            "Expected a stage @ line 181, column 10.",
            "Missing required parameter: \"body\" @ line 147, column 18.",
            "Missing required parameter: \"body\" @ line 175, column 18."
          ]
        }
      ]
    },
    {
      "full_repo_name": "GoMint/GoMint",
      "repo_url": "https://github.com/GoMint/GoMint",
      "html_url_jenkinsfile": "https://github.com/GoMint/GoMint/blob/7fdf5f21e7748d6bc49072e89aa1e369c8ed53ef/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/53688655/git/blobs/c8bad05d3ed579d2c6aca321c72cadc414ae4192",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Depends",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "apt-get update"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "apt-get install -y openjfx git"
                          }
                        }
                      ]
                    },
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def changeLogSets = currentBuild.changeSets\n          def changes = [];\n          for (int i = 0; i < changeLogSets.size(); i++) {\n              def entries = changeLogSets[i].items\n              for (int j = 0; j < entries.length; j++) {\n                  def entry = entries[j]\n                  changes.add(\"\\\"${entry.msg}\\\" by ${entry.author}\")\n              }\n          }\n          changesString = changes.join(\"\\n\")"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Build",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "mvn -U -B -DskipTests clean install"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Store",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "archiveArtifacts",
                      "arguments": [
                        {
                          "key": "artifacts",
                          "value": {
                            "isLiteral": true,
                            "value": "gomint-server/target/GoMint.jar"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "post": {
            "conditions": [
              {
                "condition": "success",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "withCredentials",
                      "arguments": {
                        "isLiteral": false,
                        "value": "${[string(credentialsId: 'discord', variable: 'webhookUrl')]}"
                      },
                      "children": [
                        {
                          "name": "discordSend",
                          "arguments": [
                            {
                              "key": "title",
                              "value": {
                                "isLiteral": false,
                                "value": "\"#${currentBuild.id} ${JOB_NAME}\""
                              }
                            },
                            {
                              "key": "link",
                              "value": {
                                "isLiteral": false,
                                "value": "${currentBuild.absoluteUrl}"
                              }
                            },
                            {
                              "key": "footer",
                              "value": {
                                "isLiteral": true,
                                "value": "Provided with <3"
                              }
                            },
                            {
                              "key": "successful",
                              "value": {
                                "isLiteral": false,
                                "value": "${currentBuild.resultIsBetterOrEqualTo('SUCCESS')}"
                              }
                            },
                            {
                              "key": "webhookURL",
                              "value": {
                                "isLiteral": false,
                                "value": "\"${webhookUrl}\""
                              }
                            },
                            {
                              "key": "description",
                              "value": {
                                "isLiteral": false,
                                "value": "\"${name} Build succeeded.\\n\\nChange(s):\\n${changesString}\\n\\n${currentBuild.absoluteUrl}artifact/gomint-server/target/${name}.jar\""
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "condition": "failure",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "withCredentials",
                      "arguments": {
                        "isLiteral": false,
                        "value": "${[string(credentialsId: 'discord', variable: 'webhookUrl')]}"
                      },
                      "children": [
                        {
                          "name": "discordSend",
                          "arguments": [
                            {
                              "key": "title",
                              "value": {
                                "isLiteral": false,
                                "value": "\"#${currentBuild.id} ${JOB_NAME}\""
                              }
                            },
                            {
                              "key": "link",
                              "value": {
                                "isLiteral": false,
                                "value": "${currentBuild.absoluteUrl}"
                              }
                            },
                            {
                              "key": "footer",
                              "value": {
                                "isLiteral": true,
                                "value": "Provided with <3"
                              }
                            },
                            {
                              "key": "successful",
                              "value": {
                                "isLiteral": false,
                                "value": "${currentBuild.resultIsBetterOrEqualTo('SUCCESS')}"
                              }
                            },
                            {
                              "key": "webhookURL",
                              "value": {
                                "isLiteral": false,
                                "value": "\"${webhookUrl}\""
                              }
                            },
                            {
                              "key": "description",
                              "value": {
                                "isLiteral": false,
                                "value": "\"${name} Build failed.\\n\\nChange(s):\\n${changesString}\""
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          },
          "agent": {
            "type": "docker",
            "arguments": [
              {
                "key": "image",
                "value": {
                  "isLiteral": true,
                  "value": "maven:3"
                }
              },
              {
                "key": "args",
                "value": {
                  "isLiteral": true,
                  "value": "-v /root/.m2:/root/.m2 -u root"
                }
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "dcworldwide/cipoc",
      "repo_url": "https://github.com/dcworldwide/cipoc",
      "html_url_jenkinsfile": "https://github.com/dcworldwide/cipoc/blob/90a3a1d483f3ea68e9f9b21e98d37c16100025e3/jenkins/master/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/121334654/git/blobs/bba508ea7c8839cfc642d53d25d2fa995a2ea59b",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Deploy to production",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "printenv"
                          }
                        }
                      ]
                    },
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def arr = ['xx', 'yy']\n                    for (int i = 0; i < arr.size(); ++i) {\n                        echo \"Value is ${arr[i]}\"\n                    }"
                          }
                        }
                      ]
                    },
                    {
                      "name": "timeout",
                      "arguments": [
                        {
                          "key": "time",
                          "value": {
                            "isLiteral": true,
                            "value": 5
                          }
                        },
                        {
                          "key": "unit",
                          "value": {
                            "isLiteral": true,
                            "value": "MINUTES"
                          }
                        }
                      ],
                      "children": [
                        {
                          "name": "echo",
                          "arguments": [
                            {
                              "key": "message",
                              "value": {
                                "isLiteral": true,
                                "value": "Timed out"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "branch",
                    "arguments": {
                      "isLiteral": true,
                      "value": "master"
                    }
                  }
                ]
              }
            }
          ],
          "post": {
            "conditions": [
              {
                "condition": "always",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "PL run!"
                          }
                        }
                      ]
                    },
                    {
                      "name": "mail",
                      "arguments": [
                        {
                          "key": "to",
                          "value": {
                            "isLiteral": false,
                            "value": "\"${RECIPIENT}\""
                          }
                        },
                        {
                          "key": "subject",
                          "value": {
                            "isLiteral": false,
                            "value": "\"Job ${JOB_NAME} (${BUILD_NUMBER})\""
                          }
                        },
                        {
                          "key": "body",
                          "value": {
                            "isLiteral": false,
                            "value": "\"Please ${BUILD_URL}.\""
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          },
          "environment": [
            {
              "key": "SOME_VAR",
              "value": {
                "isLiteral": true,
                "value": "true"
              }
            },
            {
              "key": "RECIPIENT",
              "value": {
                "isLiteral": true,
                "value": "Daniel.Baternik@dnrm.qld.gov.au"
              }
            }
          ],
          "agent": {
            "type": "any"
          },
          "triggers": {
            "triggers": [
              {
                "name": "cron",
                "arguments": [
                  {
                    "isLiteral": false,
                    "value": "${MASTER_TRIGGER}"
                  }
                ]
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "rompic/jenkinspipeline",
      "repo_url": "https://github.com/rompic/jenkinspipeline",
      "html_url_jenkinsfile": "https://github.com/rompic/jenkinspipeline/blob/ec0e8f59260239a8cc2f982812bf997e03a09cb9/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/89165998/git/blobs/ea471c691e3a33fb87f7630c1d9708f7d82e7978",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Build & unit tests",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "running build and unit tests"
                          }
                        }
                      ]
                    },
                    {
                      "name": "deleteDir",
                      "arguments": []
                    },
                    {
                      "name": "checkout",
                      "arguments": [
                        {
                          "key": "scm",
                          "value": {
                            "isLiteral": false,
                            "value": "${scm}"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "agent": {
                "type": "any"
              }
            },
            {
              "name": "Automated Acceptance tests",
              "parallel": [
                {
                  "name": "Automated Acceptance tests Firefox",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "echo",
                          "arguments": [
                            {
                              "key": "message",
                              "value": {
                                "isLiteral": true,
                                "value": "testing Firefox"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ],
                  "agent": {
                    "type": "any"
                  }
                },
                {
                  "name": "Automated Acceptance tests chrome",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "echo",
                          "arguments": [
                            {
                              "key": "message",
                              "value": {
                                "isLiteral": true,
                                "value": "testing chrome"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ],
                  "agent": {
                    "type": "any"
                  }
                }
              ]
            },
            {
              "name": "Deploy to Stage for User acceptance tests",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "milestone",
                      "arguments": [
                        {
                          "key": "ordinal",
                          "value": {
                            "isLiteral": true,
                            "value": 1
                          }
                        }
                      ]
                    },
                    {
                      "name": "timeout",
                      "arguments": [
                        {
                          "key": "time",
                          "value": {
                            "isLiteral": true,
                            "value": 30
                          }
                        },
                        {
                          "key": "unit",
                          "value": {
                            "isLiteral": true,
                            "value": "DAYS"
                          }
                        }
                      ],
                      "children": [
                        {
                          "name": "input",
                          "arguments": [
                            {
                              "key": "message",
                              "value": {
                                "isLiteral": true,
                                "value": "Deploy to Stage?"
                              }
                            },
                            {
                              "key": "submitter",
                              "value": {
                                "isLiteral": true,
                                "value": "admin,tom.tester,pete.pm"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "name": "milestone",
                      "arguments": [
                        {
                          "key": "ordinal",
                          "value": {
                            "isLiteral": true,
                            "value": 2
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "branch",
                    "arguments": {
                      "isLiteral": true,
                      "value": "master"
                    }
                  }
                ]
              }
            },
            {
              "name": "Deploy to Stage",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "deploying to stage; running smoke tests"
                          }
                        }
                      ]
                    },
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def hosts = ['host1', 'host2']\n          for (int i = 0; i < hosts.size(); ++i) {\n            echo \"Deploying to ${hosts[i]}\"\n          }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "agent": {
                "type": "any"
              },
              "when": {
                "conditions": [
                  {
                    "name": "branch",
                    "arguments": {
                      "isLiteral": true,
                      "value": "master"
                    }
                  }
                ]
              }
            },
            {
              "name": "Deploy LIVE?",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "milestone",
                      "arguments": [
                        {
                          "key": "ordinal",
                          "value": {
                            "isLiteral": true,
                            "value": 3
                          }
                        }
                      ]
                    },
                    {
                      "name": "timeout",
                      "arguments": [
                        {
                          "key": "time",
                          "value": {
                            "isLiteral": true,
                            "value": 30
                          }
                        },
                        {
                          "key": "unit",
                          "value": {
                            "isLiteral": true,
                            "value": "DAYS"
                          }
                        }
                      ],
                      "children": [
                        {
                          "name": "input",
                          "arguments": [
                            {
                              "key": "message",
                              "value": {
                                "isLiteral": true,
                                "value": "Deploy to Live?"
                              }
                            },
                            {
                              "key": "submitter",
                              "value": {
                                "isLiteral": true,
                                "value": "admin"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "name": "milestone",
                      "arguments": [
                        {
                          "key": "ordinal",
                          "value": {
                            "isLiteral": true,
                            "value": 4
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "branch",
                    "arguments": {
                      "isLiteral": true,
                      "value": "master"
                    }
                  }
                ]
              }
            },
            {
              "name": "Release",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "deploying to live and running smoke tests"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "agent": {
                "type": "any"
              },
              "when": {
                "conditions": [
                  {
                    "name": "branch",
                    "arguments": {
                      "isLiteral": true,
                      "value": "master"
                    }
                  }
                ]
              }
            }
          ],
          "post": {
            "conditions": [
              {
                "condition": "failure",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "emailext",
                      "arguments": [
                        {
                          "key": "subject",
                          "value": {
                            "isLiteral": false,
                            "value": "\"FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'\""
                          }
                        },
                        {
                          "key": "body",
                          "value": {
                            "isLiteral": false,
                            "value": "\"\"\"<p>FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>\n     \t<p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>\n\t${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>\"\"\""
                          }
                        },
                        {
                          "key": "recipientProviders",
                          "value": {
                            "isLiteral": false,
                            "value": "${[[$class: 'CulpritsRecipientProvider']]}"
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          },
          "agent": {
            "type": "none"
          },
          "options": {
            "options": [
              {
                "name": "timeout",
                "arguments": [
                  {
                    "key": "time",
                    "value": {
                      "isLiteral": true,
                      "value": 60
                    }
                  },
                  {
                    "key": "unit",
                    "value": {
                      "isLiteral": true,
                      "value": "DAYS"
                    }
                  }
                ]
              },
              {
                "name": "buildDiscarder",
                "arguments": [
                  {
                    "name": "logRotator",
                    "arguments": [
                      {
                        "key": "numToKeepStr",
                        "value": {
                          "isLiteral": true,
                          "value": "30"
                        }
                      }
                    ]
                  }
                ]
              }
            ]
          },
          "triggers": {
            "triggers": [
              {
                "name": "pollSCM",
                "arguments": [
                  {
                    "isLiteral": true,
                    "value": "H/5 * * * *"
                  }
                ]
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "DonaldSimpson/demo",
      "repo_url": "https://github.com/DonaldSimpson/demo",
      "html_url_jenkinsfile": "https://github.com/DonaldSimpson/demo/blob/49218a9cbf2d3a890b04d9e6f2dd65c1114870c1/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/111399834/git/blobs/a75069ad30a63cb8b58e1c479d3a7ae75f148c65",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "first stage",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "sleep 10"
                          }
                        }
                      ]
                    },
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "We're not doing anything particularly special here."
                          }
                        }
                      ]
                    },
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "Hello World etc."
                          }
                        }
                      ]
                    },
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": false,
                            "value": "\"FOO is ${FOO}\""
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "sleep 5"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "post": {
                "conditions": [
                  {
                    "condition": "success",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "echo",
                          "arguments": [
                            {
                              "key": "message",
                              "value": {
                                "isLiteral": true,
                                "value": "Only when we haven't failed running the first stage"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  },
                  {
                    "condition": "failure",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "echo",
                          "arguments": [
                            {
                              "key": "message",
                              "value": {
                                "isLiteral": true,
                                "value": "Only when we fail running the first stage."
                              }
                            }
                          ]
                        }
                      ]
                    }
                  }
                ]
              }
            },
            {
              "name": "second stage",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "This time, we could do something more interesting than a quick sleep..."
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "sleep 5"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "printenv"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "sleep 5"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "third stage",
              "branches": [
                {
                  "name": "one",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "I'm on the first branch!"
                          }
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "two",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "I'm on the second branch!"
                          }
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "three",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "I'm on the third branch!"
                          }
                        }
                      ]
                    },
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "But you probably guessed that already."
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "testing",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def browsers = ['chrome', 'firefox', 'vivaldi', 'safari', 'tor']\n                    for (int i = 0; i < browsers.size(); ++i) {\n                        echo \"Testing the ${browsers[i]} browser\"\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "post": {
            "conditions": [
              {
                "condition": "always",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "deleteDir",
                      "arguments": []
                    }
                  ]
                }
              },
              {
                "condition": "success",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "echo Yay for this, sending an email..."
                          }
                        }
                      ]
                    },
                    {
                      "name": "mail",
                      "arguments": [
                        {
                          "key": "from",
                          "value": {
                            "isLiteral": true,
                            "value": "donaldsimpson@gmail.com"
                          }
                        },
                        {
                          "key": "to",
                          "value": {
                            "isLiteral": true,
                            "value": "jpikoulas@technasthai.co.uk"
                          }
                        },
                        {
                          "key": "subject",
                          "value": {
                            "isLiteral": false,
                            "value": "\"Build ${BUILD_NUMBER} of the ${JOB_NAME} job has passed.\""
                          }
                        },
                        {
                          "key": "body",
                          "value": {
                            "isLiteral": true,
                            "value": "Nothing to see here, but there could be some really interesting info."
                          }
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "condition": "failure",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "echo Boo to that, sending an email..."
                          }
                        }
                      ]
                    },
                    {
                      "name": "mail",
                      "arguments": [
                        {
                          "key": "from",
                          "value": {
                            "isLiteral": true,
                            "value": "donaldsimpson@gmail.com"
                          }
                        },
                        {
                          "key": "to",
                          "value": {
                            "isLiteral": true,
                            "value": "jpikoulas@technasthai.co.uk"
                          }
                        },
                        {
                          "key": "subject",
                          "value": {
                            "isLiteral": false,
                            "value": "\"Build ${BUILD_NUMBER} of the ${JOB_NAME} job has failed.\""
                          }
                        },
                        {
                          "key": "body",
                          "value": {
                            "isLiteral": true,
                            "value": "Nothing to see here, but an error message may be useful."
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          },
          "environment": [
            {
              "key": "FOO",
              "value": {
                "isLiteral": true,
                "value": "BAR"
              }
            }
          ],
          "agent": {
            "type": "label",
            "argument": {
              "isLiteral": true,
              "value": ""
            }
          },
          "options": {
            "options": [
              {
                "name": "buildDiscarder",
                "arguments": [
                  {
                    "name": "logRotator",
                    "arguments": [
                      {
                        "key": "numToKeepStr",
                        "value": {
                          "isLiteral": true,
                          "value": "10"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "name": "retry",
                "arguments": [
                  {
                    "isLiteral": true,
                    "value": 3
                  }
                ]
              },
              {
                "name": "timeout",
                "arguments": [
                  {
                    "key": "time",
                    "value": {
                      "isLiteral": true,
                      "value": 60
                    }
                  },
                  {
                    "key": "unit",
                    "value": {
                      "isLiteral": true,
                      "value": "MINUTES"
                    }
                  }
                ]
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "sirty/ImageLibraryComparison",
      "repo_url": "https://github.com/sirty/ImageLibraryComparison",
      "html_url_jenkinsfile": "https://github.com/sirty/ImageLibraryComparison/blob/5869941ae7a6b4eff19bfd64564c2de71f93b04d/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/82205219/git/blobs/b504e90cb2f013eecf1e61090cd10255ee5c38f2",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Start",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sendNotifications",
                      "arguments": {
                        "isLiteral": true,
                        "value": "STARTED"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "name": "Stage Checkout",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "checkout",
                      "arguments": [
                        {
                          "key": "scm",
                          "value": {
                            "isLiteral": false,
                            "value": "${scm}"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "git submodule update --init"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Stage Lint",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "./gradlew lint"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "post": {
                "conditions": [
                  {
                    "condition": "success",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "androidLint",
                          "arguments": [
                            {
                              "key": "canComputeNew",
                              "value": {
                                "isLiteral": true,
                                "value": false
                              }
                            },
                            {
                              "key": "defaultEncoding",
                              "value": {
                                "isLiteral": true,
                                "value": ""
                              }
                            },
                            {
                              "key": "healthy",
                              "value": {
                                "isLiteral": true,
                                "value": ""
                              }
                            },
                            {
                              "key": "pattern",
                              "value": {
                                "isLiteral": true,
                                "value": "**/lint-results*.xml"
                              }
                            },
                            {
                              "key": "unHealthy",
                              "value": {
                                "isLiteral": true,
                                "value": ""
                              }
                            }
                          ]
                        }
                      ]
                    }
                  }
                ]
              }
            },
            {
              "name": "Stage Build",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": false,
                            "value": "\"My branch is: ${env.BRANCH_NAME}\""
                          }
                        }
                      ]
                    },
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def changeLog = getChangelog()\n                    echo \"Change logs: ${changeLog}\""
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": false,
                            "value": "\"./gradlew clean assemble -PBUILD_NUMBER=${env.BUILD_NUMBER}\""
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Stage Unit Test",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "./gradlew test"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "post": {
                "conditions": [
                  {
                    "condition": "success",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "junit",
                          "arguments": [
                            {
                              "key": "testResults",
                              "value": {
                                "isLiteral": true,
                                "value": "app/build/test-results/**/*.xml"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  }
                ]
              }
            },
            {
              "name": "Stage Instrumented Test",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "Instrumented Test"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Stage Archive",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "archiveArtifacts",
                      "arguments": [
                        {
                          "key": "artifacts",
                          "value": {
                            "isLiteral": true,
                            "value": "app/build/outputs/apk/*.apk"
                          }
                        },
                        {
                          "key": "fingerprint",
                          "value": {
                            "isLiteral": true,
                            "value": true
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "SonarQube analysis",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def scannerHome = tool 'SonarQubeScanner';\n                    withSonarQubeEnv('Sonar') {\n                        // requires SonarQube Scanner for Gradle 2.1+\n                        // It's important to add --info because of SONARJNKNS-281\n                        sh \"${scannerHome}/bin/sonar-scanner\"\n                        //sh './gradlew --info sonarqube'\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "post": {
            "conditions": [
              {
                "condition": "always",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sendNotifications",
                      "arguments": {
                        "isLiteral": false,
                        "value": "${currentBuild.result}"
                      }
                    }
                  ]
                }
              }
            ]
          },
          "agent": {
            "type": "any"
          },
          "options": {
            "options": [
              {
                "name": "buildDiscarder",
                "arguments": [
                  {
                    "name": "logRotator",
                    "arguments": [
                      {
                        "key": "numToKeepStr",
                        "value": {
                          "isLiteral": true,
                          "value": "10"
                        }
                      }
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "LiskHQ/lisk-elements",
      "repo_url": "https://github.com/LiskHQ/lisk-elements",
      "html_url_jenkinsfile": "https://github.com/LiskHQ/lisk-elements/blob/bbffa11c0df0f19ebea23afe8a90fff10caca11f/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/49426311/git/blobs/09c0ee5f9d2622240369471d6e6f72e296030c51",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Install dependencies",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "npm install --verbose"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Build",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "npm run build"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Run lint",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "ansiColor",
                      "arguments": {
                        "isLiteral": true,
                        "value": "xterm"
                      },
                      "children": [
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "npm run lint"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Run tests",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "ansiColor",
                      "arguments": {
                        "isLiteral": true,
                        "value": "xterm"
                      },
                      "children": [
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "npm run test"
                              }
                            }
                          ]
                        },
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "\n\t\t\t\t\tcp ~/.coveralls.yml .coveralls.yml\n\t\t\t\t\tnpm run cover\n\t\t\t\t\t"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Run browser tests",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "\n\t\t\t\tnpm run build:check\n\t\t\t\tnpm run build:browsertest\n\t\t\t\tHTTP_PORT=808${EXECUTOR_NUMBER:-0}\n\t\t\t\tnpm run serve:browsertest -- -p $HTTP_PORT >access.log 2>&1 &\n\t\t\t\tnpm run test:browser -- --config baseUrl=http://localhost:$HTTP_PORT\n\t\t\t\t"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "post": {
            "conditions": [
              {
                "condition": "success",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "build_info = get_build_info()\n\t\t\t\tslack_send('good', \"Recovery: build ${build_info} was successful.\")"
                          }
                        }
                      ]
                    },
                    {
                      "name": "deleteDir",
                      "arguments": []
                    },
                    {
                      "name": "githubNotify",
                      "arguments": [
                        {
                          "key": "context",
                          "value": {
                            "isLiteral": true,
                            "value": "continuous-integration/jenkins/lisk-elements"
                          }
                        },
                        {
                          "key": "description",
                          "value": {
                            "isLiteral": true,
                            "value": "The build passed."
                          }
                        },
                        {
                          "key": "status",
                          "value": {
                            "isLiteral": true,
                            "value": "SUCCESS"
                          }
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "condition": "failure",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "build_info = get_build_info()\n\t\t\t\tslack_send('danger', \"Build ${build_info} failed (<${env.BUILD_URL}/console|console>, <${env.BUILD_URL}/changes|changes>)\\n\")"
                          }
                        }
                      ]
                    },
                    {
                      "name": "archiveArtifacts",
                      "arguments": [
                        {
                          "key": "allowEmptyArchive",
                          "value": {
                            "isLiteral": true,
                            "value": true
                          }
                        },
                        {
                          "key": "artifacts",
                          "value": {
                            "isLiteral": true,
                            "value": "cypress/screenshots/"
                          }
                        }
                      ]
                    },
                    {
                      "name": "githubNotify",
                      "arguments": [
                        {
                          "key": "context",
                          "value": {
                            "isLiteral": true,
                            "value": "continuous-integration/jenkins/lisk-elements"
                          }
                        },
                        {
                          "key": "description",
                          "value": {
                            "isLiteral": true,
                            "value": "The build failed."
                          }
                        },
                        {
                          "key": "status",
                          "value": {
                            "isLiteral": true,
                            "value": "FAILURE"
                          }
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "condition": "aborted",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "githubNotify",
                      "arguments": [
                        {
                          "key": "context",
                          "value": {
                            "isLiteral": true,
                            "value": "continuous-integration/jenkins/lisk-elements"
                          }
                        },
                        {
                          "key": "description",
                          "value": {
                            "isLiteral": true,
                            "value": "The build was aborted."
                          }
                        },
                        {
                          "key": "status",
                          "value": {
                            "isLiteral": true,
                            "value": "ERROR"
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          },
          "agent": {
            "type": "node",
            "arguments": [
              {
                "key": "label",
                "value": {
                  "isLiteral": true,
                  "value": "lisk-elements"
                }
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "LCNetworks/LC_AP_AuthAPI",
      "repo_url": "https://github.com/LCNetworks/LC_AP_AuthAPI",
      "html_url_jenkinsfile": "https://github.com/LCNetworks/LC_AP_AuthAPI/blob/c2adf7dc45e04f28ddcc56ea4918a2b4395a6db5/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/130298564/git/blobs/08507c39fefe32c3e84398240e32b901a30393b4",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Checkout",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def gitPreCommit = checkoutProject()\n                    // custom build display name, add git commit reversion\n                    currentBuild.displayName = displayName()\n                    echo \"Start to build ${currentBuild.displayName}\"\n\n                    javaModules = ['config-server']"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "agent": {
                "type": "any"
              }
            },
            {
              "name": "Build",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "echo \"Start to excute gradlew.sh \"\n                        if (javaModules.size() > 0) {\n                            sh \"gradle\"\n                        }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "agent": {
                "type": "any"
              }
            },
            {
              "name": "Docker",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "buildDockerImg(javaModules, env.project)"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "agent": {
                "type": "any"
              },
              "when": {
                "conditions": [
                  {
                    "name": "anyOf",
                    "children": [
                      {
                        "name": "branch",
                        "arguments": {
                          "isLiteral": true,
                          "value": "master"
                        }
                      },
                      {
                        "name": "branch",
                        "arguments": {
                          "isLiteral": true,
                          "value": "release"
                        }
                      }
                    ]
                  }
                ]
              }
            },
            {
              "name": "Artifact",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "archiveArtifacts",
                      "arguments": [
                        {
                          "key": "artifacts",
                          "value": {
                            "isLiteral": true,
                            "value": "*.yml"
                          }
                        }
                      ]
                    },
                    {
                      "name": "artifactBuildResults",
                      "arguments": [
                        {
                          "isLiteral": false,
                          "value": "${javaModules}"
                        },
                        {
                          "isLiteral": false,
                          "value": "${[]}"
                        }
                      ]
                    }
                  ]
                }
              ],
              "agent": {
                "type": "any"
              },
              "when": {
                "conditions": [
                  {
                    "name": "branch",
                    "arguments": {
                      "isLiteral": true,
                      "value": "master"
                    }
                  }
                ]
              }
            },
            {
              "name": "Deploy",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def host = env.devSvrHost\n                    def pass = env.devSvrPasswd\n                    def user = env.devSvrUser\n                    def names = javaModules.join(' ')\n                    if (!names.isEmpty()) {\n                        echo \"Deploy services ${names}\"\n                        sh \"sshpass -p '${pass}' ssh ${user}@${host} 'cd /mnt/elements&&sudo docker-compose pull --parallel ${names}'\"\n                        sh \"sshpass -p '${pass}' ssh ${user}@${host} 'cd /mnt/elements&&sudo docker-compose up --no-deps -d ${names}'\"\n                        slackSend message: \"$JOB_NAME: Restarting ${names} on test.smartfleet.cloud.\"\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "agent": {
                "type": "label",
                "argument": {
                  "isLiteral": true,
                  "value": "office.j3r0lin.com"
                }
              },
              "when": {
                "conditions": [
                  {
                    "name": "branch",
                    "arguments": {
                      "isLiteral": true,
                      "value": "release"
                    }
                  }
                ]
              }
            },
            {
              "name": "Jira",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "step",
                      "arguments": [
                        {
                          "key": "delegate",
                          "value": {
                            "isLiteral": false,
                            "value": "[$class       : 'hudson.plugins.jira.JiraIssueUpdater',\n                      issueSelector: [$class: 'hudson.plugins.jira.selector.DefaultIssueSelector'],\n                      scm          : scm]"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "agent": {
                "type": "node",
                "arguments": [
                  {
                    "key": "label",
                    "value": {
                      "isLiteral": true,
                      "value": "office.j3r0lin.com"
                    }
                  },
                  {
                    "key": "customWorkspace",
                    "value": {
                      "isLiteral": true,
                      "value": "/usr/local/elements"
                    }
                  }
                ]
              },
              "when": {
                "conditions": [
                  {
                    "name": "branch",
                    "arguments": {
                      "isLiteral": true,
                      "value": "develop"
                    }
                  }
                ]
              }
            }
          ],
          "post": {
            "conditions": [
              {
                "condition": "always",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "build done"
                          }
                        }
                      ]
                    },
                    {
                      "name": "slackMessage",
                      "arguments": []
                    }
                  ]
                }
              }
            ]
          },
          "environment": [
            {
              "key": "version",
              "value": {
                "isLiteral": true,
                "value": "v1.0.0"
              }
            },
            {
              "key": "devSvrPasswd",
              "value": {
                "isLiteral": true,
                "value": "64391099@inhand"
              }
            },
            {
              "key": "devSvrHost",
              "value": {
                "isLiteral": true,
                "value": "10.5.16.213"
              }
            },
            {
              "key": "devSvrUser",
              "value": {
                "isLiteral": true,
                "value": "inhand"
              }
            },
            {
              "key": "project",
              "value": {
                "isLiteral": true,
                "value": "elements"
              }
            }
          ],
          "agent": {
            "type": "none"
          },
          "options": {
            "options": [
              {
                "name": "disableConcurrentBuilds",
                "arguments": []
              },
              {
                "name": "skipDefaultCheckout",
                "arguments": []
              },
              {
                "name": "buildDiscarder",
                "arguments": [
                  {
                    "name": "logRotator",
                    "arguments": [
                      {
                        "key": "numToKeepStr",
                        "value": {
                          "isLiteral": true,
                          "value": "5"
                        }
                      }
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "LiskHQ/lisk-template",
      "repo_url": "https://github.com/LiskHQ/lisk-template",
      "html_url_jenkinsfile": "https://github.com/LiskHQ/lisk-template/blob/5f6f25009b5cc7f8c69d9dc72a75b904b5669d53/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/111604464/git/blobs/b4a99c9fc5b2b27db754b42aca02bfacda96fbb3",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Install dependencies",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "npm install --verbose"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Run lint",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "ansiColor",
                      "arguments": {
                        "isLiteral": true,
                        "value": "xterm"
                      },
                      "children": [
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "npm run lint"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Build",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "npm run build"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Run tests",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "ansiColor",
                      "arguments": {
                        "isLiteral": true,
                        "value": "xterm"
                      },
                      "children": [
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "npm run test"
                              }
                            }
                          ]
                        },
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "\n\t\t\t\t\tcp ~/.coveralls.yml-lisk-template .coveralls.yml\n\t\t\t\t\tnpm run cover\n\t\t\t\t\t"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Deploy",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "error",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "No deployment process specified. Depending on your project you may prefer to remove this stage entirely."
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "post": {
            "conditions": [
              {
                "condition": "success",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "build_info = get_build_info()\n\t\t\t\tslack_send('good', \"Recovery: build ${build_info} was successful.\")"
                          }
                        }
                      ]
                    },
                    {
                      "name": "githubNotify",
                      "arguments": [
                        {
                          "key": "context",
                          "value": {
                            "isLiteral": true,
                            "value": "continuous-integration/jenkins/lisk-template"
                          }
                        },
                        {
                          "key": "description",
                          "value": {
                            "isLiteral": true,
                            "value": "The build passed."
                          }
                        },
                        {
                          "key": "status",
                          "value": {
                            "isLiteral": true,
                            "value": "SUCCESS"
                          }
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "condition": "failure",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "build_info = get_build_info()\n\t\t\t\tslack_send('danger', \"Build ${build_info} failed (<${env.BUILD_URL}/console|console>, <${env.BUILD_URL}/changes|changes>)\\n\")"
                          }
                        }
                      ]
                    },
                    {
                      "name": "githubNotify",
                      "arguments": [
                        {
                          "key": "context",
                          "value": {
                            "isLiteral": true,
                            "value": "continuous-integration/jenkins/lisk-template"
                          }
                        },
                        {
                          "key": "description",
                          "value": {
                            "isLiteral": true,
                            "value": "The build failed."
                          }
                        },
                        {
                          "key": "status",
                          "value": {
                            "isLiteral": true,
                            "value": "FAILURE"
                          }
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "condition": "aborted",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "githubNotify",
                      "arguments": [
                        {
                          "key": "context",
                          "value": {
                            "isLiteral": true,
                            "value": "continuous-integration/jenkins/lisk-template"
                          }
                        },
                        {
                          "key": "description",
                          "value": {
                            "isLiteral": true,
                            "value": "The build was aborted."
                          }
                        },
                        {
                          "key": "status",
                          "value": {
                            "isLiteral": true,
                            "value": "ERROR"
                          }
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "condition": "always",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "archiveArtifacts",
                      "arguments": [
                        {
                          "key": "allowEmptyArchive",
                          "value": {
                            "isLiteral": true,
                            "value": true
                          }
                        },
                        {
                          "key": "artifacts",
                          "value": {
                            "isLiteral": true,
                            "value": "logs/*"
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          },
          "agent": {
            "type": "node",
            "arguments": [
              {
                "key": "label",
                "value": {
                  "isLiteral": true,
                  "value": "lisk-template"
                }
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "thefallenrat/test-parent",
      "repo_url": "https://github.com/thefallenrat/test-parent",
      "html_url_jenkinsfile": "https://github.com/thefallenrat/test-parent/blob/513c3d658e0e1119ab799b052c5baa988f6c8e9e/trunk/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/116406128/git/blobs/b794144069ae293d3cb8833b4f96a3c159d5234b",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Checkout",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "checkout scm\n                    GIT_CURRENT_COMMIT = sh(returnStdout: true, script: 'git rev-parse @').trim()\n                    GIT_LAST_MERGE_COMMIT = sh(returnStdout: true, script: 'git log --merges --oneline --format=format:%H -n 1').trim()\n\n                    echo \"GIT_CURRENT_COMMIT: ${GIT_CURRENT_COMMIT}\"\n                    echo \"GIT_LAST_MERGE_COMMIT: ${GIT_LAST_MERGE_COMMIT}\"\n\n                    if ( BRANCH_NAME == 'master' ) {\n                        if ( GIT_CURRENT_COMMIT == GIT_LAST_MERGE_COMMIT ) {\n                            IS_MOVE = 'true'\n                        }\n                    } else if ( BRANCH_NAME == 'testing' ) {\n                        if ( GIT_CURRENT_COMMIT == GIT_LAST_MERGE_COMMIT ) {\n                            GIT_CURRENT_COMMIT = sh(returnStdout: true, script: \"git rev-parse @~\").trim()\n                        }\n                    }\n                    echo \"IS_MOVE: ${IS_MOVE}\""
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Prepare",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def changed_files = sh(returnStdout: true, script: \"git show --pretty=format: --name-only ${GIT_CURRENT_COMMIT}\").tokenize()\n                    for (int i = 0; i < changed_files.size(); i++) {\n                        def cfile = changed_files[i]\n                        echo \"Changed: \" + cfile\n                        if ( cfile.contains('PKGBUILD') ){\n                            def pkg = cfile.minus('/PKGBUILD')\n                            PACKAGES << pkg\n                        }\n                    }\n                    echo \"PACKAGES: ${PACKAGES}\""
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "expression",
                    "arguments": [
                      {
                        "key": "scriptBlock",
                        "value": {
                          "isLiteral": true,
                          "value": "return  IS_MOVE == 'false'"
                        }
                      }
                    ]
                  }
                ]
              }
            },
            {
              "name": "Move",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": false,
                            "value": "\"deploypkg -m -r ${REPO}-testing -t ${REPO}\""
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "branch",
                    "arguments": {
                      "isLiteral": true,
                      "value": "master"
                    }
                  },
                  {
                    "name": "expression",
                    "arguments": [
                      {
                        "key": "scriptBlock",
                        "value": {
                          "isLiteral": true,
                          "value": "return  IS_MOVE == 'true'"
                        }
                      }
                    ]
                  }
                ]
              }
            },
            {
              "name": "Stable",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": false,
                            "value": "\"PACKAGES: ${PACKAGES}\""
                          }
                        }
                      ]
                    },
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "for (pkg in PACKAGES) {\n                        sh \"buildpkg -p ${pkg} -z ${REPO}\"\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "branch",
                    "arguments": {
                      "isLiteral": true,
                      "value": "master"
                    }
                  },
                  {
                    "name": "expression",
                    "arguments": [
                      {
                        "key": "scriptBlock",
                        "value": {
                          "isLiteral": true,
                          "value": "return  IS_MOVE == 'false'"
                        }
                      }
                    ]
                  }
                ]
              },
              "post": {
                "conditions": [
                  {
                    "condition": "success",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "script",
                          "arguments": [
                            {
                              "key": "scriptBlock",
                              "value": {
                                "isLiteral": true,
                                "value": "for (pkg in PACKAGES) {\n                            sh \"deploypkg -x -p ${pkg} -r ${REPO}\"\n                        }"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  }
                ]
              },
              "environment": [
                {
                  "key": "BUILDBOT_GPGP",
                  "value": {
                    "name": "credentials",
                    "arguments": [
                      {
                        "isLiteral": true,
                        "value": "BUILDBOT_GPGP"
                      }
                    ]
                  }
                }
              ]
            },
            {
              "name": "Testing",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": false,
                            "value": "\"PACKAGES: ${PACKAGES}\""
                          }
                        }
                      ]
                    },
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "for (pkg in PACKAGES) {\n                        sh \"buildpkg-testing -p ${pkg} -z ${REPO}-testing\"\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "branch",
                    "arguments": {
                      "isLiteral": true,
                      "value": "testing"
                    }
                  },
                  {
                    "name": "expression",
                    "arguments": [
                      {
                        "key": "scriptBlock",
                        "value": {
                          "isLiteral": true,
                          "value": "return  IS_MOVE == 'false'"
                        }
                      }
                    ]
                  }
                ]
              },
              "post": {
                "conditions": [
                  {
                    "condition": "success",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "script",
                          "arguments": [
                            {
                              "key": "scriptBlock",
                              "value": {
                                "isLiteral": true,
                                "value": "for (pkg in PACKAGES) {\n                            sh \"deploypkg -x -p ${pkg} -r ${REPO}-testing\"\n                        }"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  }
                ]
              },
              "environment": [
                {
                  "key": "BUILDBOT_GPGP",
                  "value": {
                    "name": "credentials",
                    "arguments": [
                      {
                        "isLiteral": true,
                        "value": "BUILDBOT_GPGP"
                      }
                    ]
                  }
                }
              ]
            }
          ],
          "agent": {
            "type": "any"
          },
          "options": {
            "options": [
              {
                "name": "skipDefaultCheckout",
                "arguments": []
              },
              {
                "name": "timestamps",
                "arguments": []
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "EsWees/jenkins_pipeline",
      "repo_url": "https://github.com/EsWees/jenkins_pipeline",
      "html_url_jenkinsfile": "https://github.com/EsWees/jenkins_pipeline/blob/c4b2e14b287ebb0df7875eb1d78d8803a0f7af92/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/89697012/git/blobs/4b9ca2ccb78d2ec88caec46a2248ea731ff750d5",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Create AWS env",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": false,
                            "value": "\"Runing job with pipeline ${env.BUILD_ID} on ${env.JENKINS_URL}\""
                          }
                        }
                      ]
                    },
                    {
                      "name": "build",
                      "arguments": [
                        {
                          "key": "job",
                          "value": {
                            "isLiteral": true,
                            "value": "AWS_env_controller"
                          }
                        },
                        {
                          "key": "parameters",
                          "value": {
                            "isLiteral": false,
                            "value": "${[ [ $class: 'BooleanParameterValue', name: 'do', value: create ], [ $class: 'BooleanParameterValue', name: 'AWS_size', value: 'c3.4xlarge' ] ]}"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "agent": {
                "type": "label",
                "argument": {
                  "isLiteral": true,
                  "value": "atlas"
                }
              }
            },
            {
              "name": "Build",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "stage:Build"
                          }
                        }
                      ]
                    },
                    {
                      "name": "build",
                      "arguments": [
                        {
                          "key": "job",
                          "value": {
                            "isLiteral": true,
                            "value": "Irene_ull_in_AWS"
                          }
                        },
                        {
                          "key": "parameters",
                          "value": {
                            "isLiteral": false,
                            "value": "${[]}"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "post": {
            "conditions": [
              {
                "condition": "always",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "Pipeline complited. Terminate env"
                          }
                        }
                      ]
                    },
                    {
                      "name": "build",
                      "arguments": [
                        {
                          "key": "job",
                          "value": {
                            "isLiteral": true,
                            "value": "AWS_env_controller"
                          }
                        },
                        {
                          "key": "parameters",
                          "value": {
                            "isLiteral": false,
                            "value": "${[ [ $class: 'BooleanParameterValue', name: 'do', value: terminate ], [ $class: 'BooleanParameterValue', name: 'AWS_size', value: 'c3.4xlarge' ] ]}"
                          }
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "condition": "failure",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "emailext",
                      "arguments": [
                        {
                          "key": "subject",
                          "value": {
                            "isLiteral": false,
                            "value": "\"FAILure: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'\""
                          }
                        },
                        {
                          "key": "body",
                          "value": {
                            "isLiteral": false,
                            "value": "\"\"\"<p>FAILURE: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>\n           <p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>\"\"\""
                          }
                        },
                        {
                          "key": "recipientProviders",
                          "value": {
                            "isLiteral": false,
                            "value": "${[[$class: 'DevelopersRecipientProvider']]}"
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          },
          "agent": {
            "type": "none"
          },
          "options": {
            "options": [
              {
                "name": "timeout",
                "arguments": [
                  {
                    "key": "time",
                    "value": {
                      "isLiteral": true,
                      "value": 3
                    }
                  },
                  {
                    "key": "unit",
                    "value": {
                      "isLiteral": true,
                      "value": "HOURS"
                    }
                  }
                ]
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "kstateome/canvas-api",
      "repo_url": "https://github.com/kstateome/canvas-api",
      "html_url_jenkinsfile": "https://github.com/kstateome/canvas-api/blob/f3c951129a80d3632b17cfbd9e50c1121c64d449/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/41554307/git/blobs/4f3073800d6c77aa12a2cc3e3ce77d78d4eecc18",
      "jenkins_pipeline": [
        {
          "error": [
            "Tool type \"maven\" does not have an install of \"Maven 3.5\" configured - did you mean \"Jenkins_maven\"? @ line 17, column 15.",
            "Tool type \"jdk\" does not have an install of \"Java 8\" configured - did you mean \"null\"? @ line 18, column 13."
          ]
        }
      ]
    },
    {
      "full_repo_name": "vadimosipov/project2",
      "repo_url": "https://github.com/vadimosipov/project2",
      "html_url_jenkinsfile": "https://github.com/vadimosipov/project2/blob/3026a5e151aacf349c0269f2da22c0a068dca15c/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/132885427/git/blobs/6dee1af29f067dbd51e25d121b657e4ee4cdc839",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Create storage dir",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "dir",
                      "arguments": {
                        "isLiteral": false,
                        "value": "\"${LOCAL_STORAGE_DIR}\""
                      },
                      "children": [
                        {
                          "name": "deleteDir",
                          "arguments": []
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": false,
                            "value": "\"mkdir ${LOCAL_STORAGE_DIR}\""
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Download",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def year = LocalDate.now().getYear() - 1\n                    def weeks = [15]\n                    for (week in weeks) {\n                        def startDownloading = { url, body, file -> \n                            sh \"curl -X POST ${url} -d \\'${body}\\' -o ${file}\"\n                            checkFileSize(file)\n                        }\n                        generateRequsts(year, week, startDownloading)\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "environment": [
                {
                  "key": "VIGO_CREDENTIALS",
                  "value": {
                    "name": "credentials",
                    "arguments": [
                      {
                        "isLiteral": true,
                        "value": "vigo_credentials"
                      }
                    ]
                  }
                },
                {
                  "key": "VIGO_USER",
                  "value": {
                    "isLiteral": false,
                    "value": "\"${env.VIGO_CREDENTIALS_USR}\""
                  }
                },
                {
                  "key": "VIGO_PASS",
                  "value": {
                    "isLiteral": false,
                    "value": "\"${env.VIGO_CREDENTIALS_PSW}\""
                  }
                }
              ]
            },
            {
              "name": "Save to hdfs",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "1"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "post": {
            "conditions": [
              {
                "condition": "always",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sendNotification",
                      "arguments": {
                        "isLiteral": false,
                        "value": "\"Your build completed, pipeline: ${currentBuild.fullDisplayName}, please check: ${env.BUILD_URL}\""
                      }
                    },
                    {
                      "name": "dir",
                      "arguments": {
                        "isLiteral": false,
                        "value": "\"${LOCAL_STORAGE_DIR}\""
                      },
                      "children": [
                        {
                          "name": "deleteDir",
                          "arguments": []
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          },
          "environment": [
            {
              "key": "LOCAL_STORAGE_DIR",
              "value": {
                "isLiteral": true,
                "value": "cells"
              }
            }
          ],
          "agent": {
            "type": "any"
          },
          "triggers": {
            "triggers": [
              {
                "name": "cron",
                "arguments": [
                  {
                    "isLiteral": true,
                    "value": "0 15 1 * *"
                  }
                ]
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "monostream/helmi",
      "repo_url": "https://github.com/monostream/helmi",
      "html_url_jenkinsfile": "https://github.com/monostream/helmi/blob/d9c6208b155d7b03e614a50e65566cfce7165553/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/126194239/git/blobs/c60799bdeee5d9bb2201041a08ce2c3f741bf5a3",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Checkout",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "gitCheckout",
                      "arguments": []
                    },
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "versionNumber = VersionNumber(skipFailedBuilds: true, versionNumberString: '${BUILD_DATE_FORMATTED, \\\"yy\\\"}.${BUILD_WEEK}.${BUILDS_THIS_WEEK}')\n                    gitCommit = gitCommit()\n                    shortCommit = gitCommit.take(7)\n                    gitCommitMessage = sh returnStdout: true, script: 'git log -1 --pretty=%B HEAD | xargs echo -n'\n                    currentBuild.displayName = versionNumber\n                    if (gitCommitMessage) {\n                        currentBuild.description = gitCommitMessage\n                    } else {\n                        currentBuild.description = BRANCH_NAME + ' / ' + shortCommit\n                    }"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": false,
                            "value": "\"echo 'Branch=${BRANCH_NAME}' >> version.properties\""
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": false,
                            "value": "\"echo 'SHA1=${gitCommit}' >> version.properties\""
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": false,
                            "value": "\"echo 'Version=${versionNumber}' >> version.properties\""
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Build",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "retry",
                      "arguments": {
                        "isLiteral": true,
                        "value": 2
                      },
                      "children": [
                        {
                          "name": "script",
                          "arguments": [
                            {
                              "key": "scriptBlock",
                              "value": {
                                "isLiteral": true,
                                "value": "helmiImage = docker.build('helmi', \"--label 'com.monostream.image.branch=${BRANCH_NAME}' --label 'com.monostream.image.sha1=${gitCommit}' --label 'com.monostream.image.version=${versionNumber}' --no-cache --pull --squash .\")"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Unit Test",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "docker.image('golang:alpine').inside(\"-v '${WORKSPACE}:/go/src/github.com/monostream/helmi/' -u root\") {\n                        sh 'apk add --no-cache --update git'\n                        sh '''\n                        cd /go/src/github.com/monostream/helmi/\n                        go get github.com/jstemmer/go-junit-report\n                        go test -v ./pkg/* | go-junit-report > report.xml\n                        '''\n                    }"
                          }
                        }
                      ]
                    },
                    {
                      "name": "junit",
                      "arguments": [
                        {
                          "key": "testResults",
                          "value": {
                            "isLiteral": true,
                            "value": "report.xml"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Push to ECR",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "retry",
                      "arguments": {
                        "isLiteral": true,
                        "value": 2
                      },
                      "children": [
                        {
                          "name": "script",
                          "arguments": [
                            {
                              "key": "scriptBlock",
                              "value": {
                                "isLiteral": true,
                                "value": "docker.image('monostream/helmi') {\n                            parallel(\n                                    \"${BRANCH_NAME}\": {\n                                        if (BRANCH_NAME == 'develop') {\n                                            helmiImage.push(\"${versionNumber}-dev\")\n                                        }\n                                        if (BRANCH_NAME == 'master') {\n                                            helmiImage.push(\"${versionNumber}\")\n                                        }\n                                    },\n                                    'latest': {\n                                        helmiImage.push()\n                                    },\n                                    failFast: true\n                            )\n                        }"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "expression",
                    "arguments": [
                      {
                        "key": "scriptBlock",
                        "value": {
                          "isLiteral": true,
                          "value": "BRANCH_NAME == 'master' || BRANCH_NAME == 'develop'"
                        }
                      }
                    ]
                  }
                ]
              }
            },
            {
              "name": "Artefact",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def Artefacts = ['catalog', 'helm', 'helmi']\n                    helmiImage.inside {\n                        for (int i = 0; i < Artefacts.size(); ++i) {\n                            sh \"cp -rf /app/${Artefacts[i]} ${WORKSPACE}\"\n                            archive \"${Artefacts[i]}\"\n                        }\n                    }\n                    archive \"version.properties\""
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "post": {
            "conditions": [
              {
                "condition": "always",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "withChownWorkspace",
                      "arguments": []
                    },
                    {
                      "name": "deleteDir",
                      "arguments": []
                    }
                  ]
                }
              }
            ]
          },
          "agent": {
            "type": "node",
            "arguments": [
              {
                "key": "label",
                "value": {
                  "isLiteral": true,
                  "value": "docker"
                }
              }
            ]
          },
          "options": {
            "options": [
              {
                "name": "buildDiscarder",
                "arguments": [
                  {
                    "name": "logRotator",
                    "arguments": [
                      {
                        "key": "numToKeepStr",
                        "value": {
                          "isLiteral": true,
                          "value": "15"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "name": "skipDefaultCheckout",
                "arguments": []
              },
              {
                "name": "skipStagesAfterUnstable",
                "arguments": []
              },
              {
                "name": "timeout",
                "arguments": [
                  {
                    "key": "time",
                    "value": {
                      "isLiteral": true,
                      "value": 10
                    }
                  },
                  {
                    "key": "unit",
                    "value": {
                      "isLiteral": true,
                      "value": "MINUTES"
                    }
                  }
                ]
              },
              {
                "name": "timestamps",
                "arguments": []
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "Romeh/spring-boot-ignite",
      "repo_url": "https://github.com/Romeh/spring-boot-ignite",
      "html_url_jenkinsfile": "https://github.com/Romeh/spring-boot-ignite/blob/8b8638c76a6836d23ae6c403aa0f1c0234dcbeb0/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/110881779/git/blobs/c426f63d3734ed5729bb47675e09062b3abade76",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Build With Unit Testing",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "echo 'Pulling...' + env.BRANCH_NAME\n                    def mvnHome = tool 'Maven 3.3.9'\n                    if (isUnix()) {\n                        sh \"'${mvnHome}/bin/mvn' -Dmaven.test.failure.ignore clean package\"\n                        def pom = readMavenPom file: 'pom.xml'\n                        print pom.version\n                        junit '**/target/surefire-reports/TEST-*.xml'\n                        archive 'target/*.jar'\n                    } else {\n                        bat(/\"${mvnHome}\\bin\\mvn\" -Dmaven.test.failure.ignore clean package/)\n                        def pom = readMavenPom file: 'pom.xml'\n                        print pom.version\n                        junit '**/target/surefire-reports/TEST-*.xml'\n                        archive 'target/*.jar'\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Integration Tests",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def mvnHome = tool 'Maven 3.3.9'\n                    if (isUnix()) {\n                        sh \"'${mvnHome}/bin/mvn'  verify -Dunit-tests.skip=true\"\n                    } else {\n                        bat(/\"${mvnHome}\\bin\\mvn\" verify -Dunit-tests.skip=true/)\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Sonar Check",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def mvnHome = tool 'Maven 3.3.9'\n                    // replace it with your sonar server\n                    sh \"'${mvnHome}/bin/mvn'  verify sonar:sonar -Dsonar.host.url=http://romehjava.bc/sonar/ -Dmaven.test.failure.ignore=true\""
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "ITT Deploy Approval and deployment",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "timeout",
                      "arguments": [
                        {
                          "key": "time",
                          "value": {
                            "isLiteral": true,
                            "value": 3
                          }
                        },
                        {
                          "key": "unit",
                          "value": {
                            "isLiteral": true,
                            "value": "MINUTES"
                          }
                        }
                      ],
                      "children": [
                        {
                          "name": "input",
                          "arguments": [
                            {
                              "key": "message",
                              "value": {
                                "isLiteral": true,
                                "value": "Approve deployment?"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "name": "timeout",
                      "arguments": [
                        {
                          "key": "time",
                          "value": {
                            "isLiteral": true,
                            "value": 2
                          }
                        },
                        {
                          "key": "unit",
                          "value": {
                            "isLiteral": true,
                            "value": "MINUTES"
                          }
                        }
                      ],
                      "children": [
                        {
                          "name": "build",
                          "arguments": [
                            {
                              "key": "job",
                              "value": {
                                "isLiteral": true,
                                "value": "AlertManagerToITT"
                              }
                            }
                          ]
                        },
                        {
                          "name": "echo",
                          "arguments": [
                            {
                              "key": "message",
                              "value": {
                                "isLiteral": true,
                                "value": "the application is deployed !"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "expression",
                    "arguments": [
                      {
                        "key": "scriptBlock",
                        "value": {
                          "isLiteral": true,
                          "value": "currentBuild.result == null || currentBuild.result == 'SUCCESS' && env.BRANCH_NAME == 'master'"
                        }
                      }
                    ]
                  }
                ]
              }
            }
          ],
          "post": {
            "conditions": [
              {
                "condition": "always",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "deleteDir",
                      "arguments": []
                    }
                  ]
                }
              },
              {
                "condition": "success",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sendEmail",
                      "arguments": {
                        "isLiteral": true,
                        "value": "Successful"
                      }
                    }
                  ]
                }
              },
              {
                "condition": "unstable",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sendEmail",
                      "arguments": {
                        "isLiteral": true,
                        "value": "Unstable"
                      }
                    }
                  ]
                }
              },
              {
                "condition": "failure",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sendEmail",
                      "arguments": {
                        "isLiteral": true,
                        "value": "Failed"
                      }
                    }
                  ]
                }
              }
            ]
          },
          "environment": [
            {
              "key": "EMAIL_RECIPIENTS",
              "value": {
                "isLiteral": true,
                "value": "mahmoud.romih@test.com"
              }
            }
          ],
          "agent": {
            "type": "label",
            "argument": {
              "isLiteral": true,
              "value": "jdk8"
            }
          },
          "options": {
            "options": [
              {
                "name": "buildDiscarder",
                "arguments": [
                  {
                    "name": "logRotator",
                    "arguments": [
                      {
                        "key": "numToKeepStr",
                        "value": {
                          "isLiteral": true,
                          "value": "10"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "name": "timeout",
                "arguments": [
                  {
                    "key": "time",
                    "value": {
                      "isLiteral": true,
                      "value": 20
                    }
                  },
                  {
                    "key": "unit",
                    "value": {
                      "isLiteral": true,
                      "value": "MINUTES"
                    }
                  }
                ]
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "dcos/dcos-ui",
      "repo_url": "https://github.com/dcos/dcos-ui",
      "html_url_jenkinsfile": "https://github.com/dcos/dcos-ui/blob/3938b694c0ae30a7df40bcd850cc2cbb8096ae70/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/56547504/git/blobs/04575206f4a931b7fb43ffd196e2266cd6ac9410",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Authorization",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "user_is_authorized",
                      "arguments": [
                        {
                          "isLiteral": false,
                          "value": "${master_branches}"
                        },
                        {
                          "isLiteral": true,
                          "value": "8b793652-f26a-422f-a9ba-0d1e47eb9d89"
                        },
                        {
                          "isLiteral": true,
                          "value": "#frontend-dev"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Build",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "npm --unsafe-perm install"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "npm run build"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "tar czf release.tar.gz dist"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Test",
              "parallel": [
                {
                  "name": "Integration Test",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "npm run integration-tests"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ],
                  "post": {
                    "conditions": [
                      {
                        "condition": "always",
                        "branch": {
                          "name": "default",
                          "steps": [
                            {
                              "name": "archiveArtifacts",
                              "arguments": [
                                {
                                  "key": "artifacts",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "cypress/**/*"
                                  }
                                }
                              ]
                            },
                            {
                              "name": "junit",
                              "arguments": [
                                {
                                  "key": "testResults",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "cypress/results.xml"
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "System Test",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "withCredentials",
                          "arguments": {
                            "isLiteral": false,
                            "value": "${[\n                [\n                  $class: \"AmazonWebServicesCredentialsBinding\",\n                  credentialsId: \"f40eebe0-f9aa-4336-b460-b2c4d7876fde\",\n                  accessKeyVariable: \"AWS_ACCESS_KEY_ID\",\n                  secretKeyVariable: \"AWS_SECRET_ACCESS_KEY\"\n                ]\n              ]}"
                          },
                          "children": [
                            {
                              "name": "sh",
                              "arguments": [
                                {
                                  "key": "script",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "dcos-system-test-driver -j1 -v ./system-tests/driver-config/jenkins.sh"
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ],
                  "post": {
                    "conditions": [
                      {
                        "condition": "always",
                        "branch": {
                          "name": "default",
                          "steps": [
                            {
                              "name": "archiveArtifacts",
                              "arguments": [
                                {
                                  "key": "artifacts",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "results/**/*"
                                  }
                                }
                              ]
                            },
                            {
                              "name": "junit",
                              "arguments": [
                                {
                                  "key": "testResults",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "results/results.xml"
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            {
              "name": "Release Latest",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "withCredentials",
                      "arguments": {
                        "isLiteral": false,
                        "value": "${[\n            string(credentialsId: \"3f0dbb48-de33-431f-b91c-2366d2f0e1cf\",variable: \"AWS_ACCESS_KEY_ID\"),\n            string(credentialsId: \"f585ec9a-3c38-4f67-8bdb-79e5d4761937\",variable: \"AWS_SECRET_ACCESS_KEY\"),\n            usernamePassword(credentialsId: \"a7ac7f84-64ea-4483-8e66-bb204484e58f\", passwordVariable: \"GIT_PASSWORD\", usernameVariable: \"GIT_USER\")\n        ]}"
                      },
                      "children": [
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": false,
                                "value": "\"git config --global user.email $GIT_USER@users.noreply.github.com\""
                              }
                            }
                          ]
                        },
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "git config --global user.name 'MesosphereCI Robot'"
                              }
                            }
                          ]
                        },
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "git config credential.helper 'cache --timeout=300'"
                              }
                            }
                          ]
                        },
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "FORCE_UPLOAD=1 ./scripts/ci/release-latest"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "expression",
                    "arguments": [
                      {
                        "key": "scriptBlock",
                        "value": {
                          "isLiteral": true,
                          "value": "master_branches.contains(BRANCH_NAME)"
                        }
                      }
                    ]
                  }
                ]
              },
              "post": {
                "conditions": [
                  {
                    "condition": "always",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "archiveArtifacts",
                          "arguments": [
                            {
                              "key": "artifacts",
                              "value": {
                                "isLiteral": true,
                                "value": "buildinfo.json"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  }
                ]
              }
            },
            {
              "name": "Run Enterprise Pipeline",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "build",
                      "arguments": [
                        {
                          "key": "job",
                          "value": {
                            "isLiteral": false,
                            "value": "${\"frontend/dcos-ui-ee-pipeline/\"+env.BRANCH_NAME.replaceAll(\"/\", \"%2F\")}"
                          }
                        },
                        {
                          "key": "wait",
                          "value": {
                            "isLiteral": true,
                            "value": false
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "expression",
                    "arguments": [
                      {
                        "key": "scriptBlock",
                        "value": {
                          "isLiteral": true,
                          "value": "master_branches.contains(BRANCH_NAME)"
                        }
                      }
                    ]
                  }
                ]
              }
            }
          ],
          "post": {
            "conditions": [
              {
                "condition": "failure",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "withCredentials",
                      "arguments": {
                        "isLiteral": false,
                        "value": "${[\n        string(credentialsId: \"8b793652-f26a-422f-a9ba-0d1e47eb9d89\", variable: \"SLACK_TOKEN\")\n      ]}"
                      },
                      "children": [
                        {
                          "name": "slackSend",
                          "arguments": [
                            {
                              "key": "channel",
                              "value": {
                                "isLiteral": true,
                                "value": "#frontend-ci-status"
                              }
                            },
                            {
                              "key": "color",
                              "value": {
                                "isLiteral": true,
                                "value": "danger"
                              }
                            },
                            {
                              "key": "message",
                              "value": {
                                "isLiteral": false,
                                "value": "\"FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.RUN_DISPLAY_URL})\""
                              }
                            },
                            {
                              "key": "teamDomain",
                              "value": {
                                "isLiteral": true,
                                "value": "mesosphere"
                              }
                            },
                            {
                              "key": "token",
                              "value": {
                                "isLiteral": false,
                                "value": "\"${env.SLACK_TOKEN}\""
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "condition": "unstable",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "withCredentials",
                      "arguments": {
                        "isLiteral": false,
                        "value": "${[\n        string(credentialsId: \"8b793652-f26a-422f-a9ba-0d1e47eb9d89\", variable: \"SLACK_TOKEN\")\n      ]}"
                      },
                      "children": [
                        {
                          "name": "slackSend",
                          "arguments": [
                            {
                              "key": "channel",
                              "value": {
                                "isLiteral": true,
                                "value": "#frontend-ci-status"
                              }
                            },
                            {
                              "key": "color",
                              "value": {
                                "isLiteral": true,
                                "value": "warning"
                              }
                            },
                            {
                              "key": "message",
                              "value": {
                                "isLiteral": false,
                                "value": "\"UNSTABLE: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.RUN_DISPLAY_URL})\""
                              }
                            },
                            {
                              "key": "teamDomain",
                              "value": {
                                "isLiteral": true,
                                "value": "mesosphere"
                              }
                            },
                            {
                              "key": "token",
                              "value": {
                                "isLiteral": false,
                                "value": "\"${env.SLACK_TOKEN}\""
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          },
          "environment": [
            {
              "key": "JENKINS_VERSION",
              "value": {
                "isLiteral": true,
                "value": "yes"
              }
            },
            {
              "key": "NODE_PATH",
              "value": {
                "isLiteral": true,
                "value": "node_modules"
              }
            },
            {
              "key": "INSTALLER_URL",
              "value": {
                "isLiteral": true,
                "value": "https://downloads.dcos.io/dcos/testing/master/dcos_generate_config.sh"
              }
            }
          ],
          "agent": {
            "type": "dockerfile",
            "arguments": [
              {
                "key": "args",
                "value": {
                  "isLiteral": true,
                  "value": "--shm-size=1g"
                }
              }
            ]
          },
          "options": {
            "options": [
              {
                "name": "timeout",
                "arguments": [
                  {
                    "key": "time",
                    "value": {
                      "isLiteral": true,
                      "value": 2
                    }
                  },
                  {
                    "key": "unit",
                    "value": {
                      "isLiteral": true,
                      "value": "HOURS"
                    }
                  }
                ]
              },
              {
                "name": "disableConcurrentBuilds",
                "arguments": []
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "argus-authz/argus-pap",
      "repo_url": "https://github.com/argus-authz/argus-pap",
      "html_url_jenkinsfile": "https://github.com/argus-authz/argus-pap/blob/5017c5d41e9e11f22d94dcb1624e5d75367db9b1/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/4432875/git/blobs/ee2c82a106b6dbee580c14110c19833fe78fac05",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "build",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "container",
                      "arguments": {
                        "isLiteral": true,
                        "value": "maven-runner"
                      },
                      "children": [
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "mvn -B clean compile"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "test",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "container",
                      "arguments": {
                        "isLiteral": true,
                        "value": "maven-runner"
                      },
                      "children": [
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "mvn -B clean test"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ],
              "post": {
                "conditions": [
                  {
                    "condition": "always",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "container",
                          "arguments": {
                            "isLiteral": true,
                            "value": "maven-runner"
                          },
                          "children": [
                            {
                              "name": "junit",
                              "arguments": [
                                {
                                  "key": "testResults",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "**/target/surefire-reports/TEST-*.xml"
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  }
                ]
              }
            },
            {
              "name": "PR analysis",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "container",
                      "arguments": {
                        "isLiteral": true,
                        "value": "maven-runner"
                      },
                      "children": [
                        {
                          "name": "script",
                          "arguments": [
                            {
                              "key": "scriptBlock",
                              "value": {
                                "isLiteral": true,
                                "value": "def tokens = \"${env.CHANGE_URL}\".tokenize('/')\n            def organization = tokens[tokens.size()-4]\n            def repo = tokens[tokens.size()-3]\n\n            withCredentials([string(credentialsId: '630f8e6c-0d31-4f96-8d82-a1ef536ef059', variable: 'GITHUB_ACCESS_TOKEN')]) {\n              withSonarQubeEnv{\n                sh \"\"\"\n                  mvn -B -U clean compile sonar:sonar \\\\\n                    -Dsonar.analysis.mode=preview \\\\\n                    -Dsonar.github.pullRequest=${env.CHANGE_ID} \\\\\n                    -Dsonar.github.repository=${organization}/${repo} \\\\\n                    -Dsonar.github.oauth=${GITHUB_ACCESS_TOKEN} \\\\\n                    -Dsonar.host.url=${SONAR_HOST_URL} \\\\\n                    -Dsonar.login=${SONAR_AUTH_TOKEN}\n                \"\"\"\n              }\n            }"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "not",
                    "children": [
                      {
                        "name": "environment",
                        "arguments": [
                          {
                            "key": "name",
                            "value": {
                              "isLiteral": true,
                              "value": "CHANGE_URL"
                            }
                          },
                          {
                            "key": "value",
                            "value": {
                              "isLiteral": true,
                              "value": ""
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            },
            {
              "name": "analysis",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "container",
                      "arguments": {
                        "isLiteral": true,
                        "value": "maven-runner"
                      },
                      "children": [
                        {
                          "name": "script",
                          "arguments": [
                            {
                              "key": "scriptBlock",
                              "value": {
                                "isLiteral": true,
                                "value": "def cobertura_opts = 'cobertura:cobertura -Dmaven.test.failure.ignore -DfailIfNoTests=false -Dcobertura.report.format=xml'\n            def checkstyle_opts = 'checkstyle:check -Dcheckstyle.config.location=google_checks.xml'\n\n            withSonarQubeEnv{\n              sh \"mvn clean -U ${cobertura_opts} ${checkstyle_opts} ${SONAR_MAVEN_GOAL} -Dsonar.host.url=${SONAR_HOST_URL} -Dsonar.login=${SONAR_AUTH_TOKEN}\"\n            }"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "anyOf",
                    "children": [
                      {
                        "name": "branch",
                        "arguments": {
                          "isLiteral": true,
                          "value": "master"
                        }
                      },
                      {
                        "name": "branch",
                        "arguments": {
                          "isLiteral": true,
                          "value": "develop"
                        }
                      }
                    ]
                  },
                  {
                    "name": "environment",
                    "arguments": [
                      {
                        "key": "name",
                        "value": {
                          "isLiteral": true,
                          "value": "CHANGE_URL"
                        }
                      },
                      {
                        "key": "value",
                        "value": {
                          "isLiteral": true,
                          "value": ""
                        }
                      }
                    ]
                  }
                ]
              }
            },
            {
              "name": "result",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "currentBuild.result = 'SUCCESS'"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "post": {
            "conditions": [
              {
                "condition": "failure",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "slackSend",
                      "arguments": [
                        {
                          "key": "color",
                          "value": {
                            "isLiteral": true,
                            "value": "danger"
                          }
                        },
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": false,
                            "value": "\"${env.JOB_NAME} - #${env.BUILD_NUMBER} Failure (<${env.BUILD_URL}|Open>)\""
                          }
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "condition": "changed",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "if('SUCCESS'.equals(currentBuild.result)) {\n          slackSend color: 'good', message: \"${env.JOB_NAME} - #${env.BUILD_NUMBER} Back to normal (<${env.BUILD_URL}|Open>)\"\n        }"
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          },
          "agent": {
            "type": "label",
            "argument": {
              "isLiteral": true,
              "value": "maven"
            }
          },
          "options": {
            "options": [
              {
                "name": "timeout",
                "arguments": [
                  {
                    "key": "time",
                    "value": {
                      "isLiteral": true,
                      "value": 1
                    }
                  },
                  {
                    "key": "unit",
                    "value": {
                      "isLiteral": true,
                      "value": "HOURS"
                    }
                  }
                ]
              },
              {
                "name": "buildDiscarder",
                "arguments": [
                  {
                    "name": "logRotator",
                    "arguments": [
                      {
                        "key": "numToKeepStr",
                        "value": {
                          "isLiteral": true,
                          "value": "5"
                        }
                      }
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "artix-linux/packages-galaxy",
      "repo_url": "https://github.com/artix-linux/packages-galaxy",
      "html_url_jenkinsfile": "https://github.com/artix-linux/packages-galaxy/blob/78b4b70b6e3e513fda8d71d64e149b3cb0487fa1/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/118797668/git/blobs/b82d348150b6cda2fed22d62018541ca89fa1b1f",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Checkout",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "checkout scm\n\n                    def currentCommit = sh(returnStdout: true, script: 'git rev-parse @').trim()\n                    echo \"currentCommit: ${currentCommit}\"\n\n                    def changedFilesStatus = sh(returnStdout: true, script: \"git show --pretty=format: --name-status ${currentCommit}\").tokenize('\\n')\n                    def changedPkgStatus = []\n                    def pkgPath = []\n                    int entryCount = 0\n                    for ( int i = 0; i < changedFilesStatus.size(); i++ ) {\n                        def entry = changedFilesStatus[i].split()\n                        def fileStatus = entry[0]\n                        entryCount = entry.size()\n                        for ( int j = 1; j < entry.size(); j++ ) {\n                            if ( entry[j].contains('/PKGBUILD') && entry[j].contains('/repos') ){\n                                changedPkgStatus << \"${fileStatus} \" + entry[j].minus('/PKGBUILD')\n                                pkgPath << entry[j].minus('/PKGBUILD')\n                            }\n                        }\n                    }\n\n                    int pkgCount = changedPkgStatus.size()\n                    int pkgPathCount = pkgPath.size()\n                    echo \"pkgCount: ${pkgCount}\"\n                    echo \"entryCount: ${entryCount}\"\n                    echo \"pkgPathCount: ${pkgPathCount}\"\n                    echo \"changedPkgStatus: ${changedPkgStatus}\"\n\n                    if ( pkgCount > 0 ) {\n\n                        if ( entryCount == 2 && pkgCount == 2 ) {\n                            def pkgEntry1 = changedPkgStatus[0].split()\n                            def pkgEntry2 = changedPkgStatus[1].split()\n                            def srcPath = []\n                            def pkgStatus = []\n                            srcPath << pkgEntry1[1]\n                            srcPath << pkgEntry2[1]\n                            pkgStatus << pkgEntry1[0]\n                            pkgStatus << pkgEntry2[0]\n                            def buildInfo1 = srcPath[0].tokenize('/')\n                            def buildInfo2 = srcPath[1].tokenize('/')\n                            def repoName1 = buildInfo1[2]\n                            def repoName2 = buildInfo2[2]\n\n                            if ( pkgStatus[0] == \"M\" ) {\n                                IS_ADD = 'true'\n                                if ( repoName1.contains('community-staging') ) {\n                                    ADD_REPO = 'galaxy-goblins'\n                                } else if ( repoName1.contains('community-testing') ) {\n                                    ADD_REPO = 'galaxy-gremlins'\n                                } else if ( repoName1.contains('community-x86_64') || repoName1.contains('community-any') ) {\n                                    ADD_REPO = 'galaxy'\n                                }\n                                if ( repoName1.contains('multilib-staging') ) {\n                                    ADD_REPO = 'lib32-goblins'\n                                } else if ( repoName1.contains('multilib-testing') ) {\n                                    ADD_REPO = 'lib32-gremlins'\n                                } else if ( repoName1.contains('multilib-x86_64') ) {\n                                    ADD_REPO = 'lib32'\n                                }\n                            } else if ( pkgStatus[1] == \"M\" ) {\n                                IS_ADD = 'true'\n                                if ( repoName2.contains('community-staging') ) {\n                                    ADD_REPO = 'galaxy-goblins'\n                                } else if ( repoName2.contains('community-testing') ) {\n                                    ADD_REPO = 'galaxy-gremlins'\n                                } else if ( repoName2.contains('community-x86_64') || repoName2.contains('community-any') ) {\n                                    ADD_REPO = 'galaxy'\n                                }\n                                if ( repoName2.contains('multilib-staging') ) {\n                                    ADD_REPO = 'lib32-goblins'\n                                } else if ( repoName2.contains('multilib-testing') ) {\n                                    ADD_REPO = 'lib32-gremlins'\n                                } else if ( repoName2.contains('multilib-x86_64') ) {\n                                    ADD_REPO = 'lib32'\n                                }\n                            }\n\n                            if ( pkgStatus[0] == \"D\" ) {\n                                IS_REMOVE = 'true'\n                                if ( repoName1.contains('community-staging') ) {\n                                    RM_REPO = 'galaxy-goblins'\n                                } else if ( repoName1.contains('community-testing') ) {\n                                    RM_REPO = 'galaxy-gremlins'\n                                } else if ( repoName1.contains('community-x86_64') || repoName1.contains('community-any') ) {\n                                    RM_REPO = 'galaxy'\n                                }\n                                if ( repoName1.contains('multilib-staging') ) {\n                                    RM_REPO = 'lib32-goblins'\n                                } else if ( repoName1.contains('multilib-testing') ) {\n                                    RM_REPO = 'lib32-gremlins'\n                                } else if ( repoName1.contains('multilib-x86_64') ) {\n                                    RM_REPO = 'lib32'\n                                }\n                            } else if ( pkgStatus[1] == \"D\" ) {\n                                IS_REMOVE = 'true'\n                                if ( repoName2.contains('community-staging') ) {\n                                    RM_REPO = 'galaxy-goblins'\n                                } else if ( repoName2.contains('community-testing') ) {\n                                    RM_REPO = 'galaxy-gremlins'\n                                } else if ( repoName2.contains('community-x86_64') || repoName2.contains('community-any') ) {\n                                    RM_REPO = 'galaxy'\n                                }\n                                if ( repoName2.contains('multilib-staging') ) {\n                                    RM_REPO = 'lib32-goblins'\n                                } else if ( repoName2.contains('multilib-testing') ) {\n                                    RM_REPO = 'lib32-gremlins'\n                                } else if ( repoName2.contains('multilib-x86_64') ) {\n                                    RM_REPO = 'lib32'\n                                }\n                            }\n                            PKG_TRUNK = buildInfo1[0] + '/trunk'\n                        }\n\n                        if ( entryCount == 3 && pkgCount == 2 ) {\n                            def pkgEntry = changedPkgStatus[0].split()\n                            def pkgStatus = pkgEntry[0]\n                            def buildInfo1 = pkgPath[0].tokenize('/')\n                            def buildInfo2 = pkgPath[1].tokenize('/')\n                            def repoName1 = buildInfo1[2]\n                            def repoName2 = buildInfo2[2]\n\n                            if ( pkgStatus.contains('R') ) {\n                                IS_ADD = 'true'\n                                IS_REMOVE = 'true'\n\n                                if ( repoName1.contains('community-staging') && repoName2.contains('community-testing') ) {\n                                    ADD_REPO = 'galaxy-gremlins'\n                                    RM_REPO = 'galaxy-goblins'\n                                } else if ( repoName1.contains('community-testing') && repoName2.contains('community-staging') ) {\n                                    ADD_REPO = 'galaxy-gremlins'\n                                    RM_REPO = 'galaxy-goblins'\n                                }\n\n                                if ( repoName1.contains('community-testing') && repoName2.contains('community-x86_64') || repoName2.contains('community-any') ) {\n                                    ADD_REPO = 'galaxy'\n                                    RM_REPO = 'galaxy-gremlins'\n                                } else if ( repoName1.contains('community-x86_64') || repoName1.contains('community-any') && repoName2.contains('community-testing') ) {\n                                    ADD_REPO = 'galaxy'\n                                    RM_REPO = 'galaxy-gremlins'\n                                }\n\n                                if ( repoName1.contains('multilib-staging') && repoName2.contains('multilib-testing') ) {\n                                    ADD_REPO = 'lib32-gremlins'\n                                    RM_REPO = 'lib32-goblins'\n                                } else if ( repoName1.contains('multilib-testing') && repoName2.contains('multilib-staging') ) {\n                                    ADD_REPO = 'lib32-gremlins'\n                                    RM_REPO = 'lib32-goblins'\n                                }\n\n                                if ( repoName1.contains('multilib-testing') && repoName2.contains('multilib-x86_64') ) {\n                                    ADD_REPO = 'lib32'\n                                    RM_REPO = 'lib32-gremlins'\n                                } else if ( repoName1.contains('multilib-x86_64') && repoName2.contains('multilib-testing') ) {\n                                    ADD_REPO = 'lib32'\n                                    RM_REPO = 'lib32-gremlins'\n                                }\n                            }\n                            PKG_TRUNK = buildInfo1[0] + '/trunk'\n                        }\n\n                        if ( pkgCount == 1 ) {\n                            def pkgEntry = changedPkgStatus[0].split()\n                            def pkgStatus = pkgEntry[0]\n                            def srcPath = pkgEntry[1]\n                            def buildInfo = srcPath.tokenize('/')\n                            def repoName = buildInfo[2]\n\n                            if ( repoName.contains('community-staging') ) {\n                                if ( pkgStatus == 'A' || pkgStatus == 'M' ) {\n                                    IS_BUILD = 'true'\n                                }\n                                if ( pkgStatus == 'D' ) {\n                                    IS_REMOVE = 'true'\n                                }\n                                ADD_REPO = 'galaxy-goblins'\n                                RM_REPO = ADD_REPO\n                            } else if ( repoName.contains('community-testing') ) {\n                                if ( pkgStatus == 'A' || pkgStatus == 'M' ) {\n                                    IS_BUILD = 'true'\n                                }\n                                if ( pkgStatus == 'D' ) {\n                                    IS_REMOVE = 'true'\n                                }\n                                ADD_REPO = 'galaxy-gremlins'\n                                RM_REPO = ADD_REPO\n                            } else if ( repoName.contains('community-x86_64') || repoName.contains('community-any') ) {\n                                if ( pkgStatus == 'A' || pkgStatus == 'M' ) {\n                                    IS_BUILD = 'true'\n                                }\n                                if ( pkgStatus == 'D' ) {\n                                    IS_REMOVE = 'true'\n                                }\n                                ADD_REPO = 'galaxy'\n                                RM_REPO = ADD_REPO\n                            }\n                            if ( repoName.contains('multilib-staging') ) {\n                                if ( pkgStatus == 'A' || pkgStatus == 'M' ) {\n                                    IS_BUILD = 'true'\n                                }\n                                if ( pkgStatus == 'D' ) {\n                                    IS_REMOVE = 'true'\n                                }\n                                ADD_REPO = 'lib32-goblins'\n                                RM_REPO = ADD_REPO\n                            } else if ( repoName.contains('multilib-testing') ) {\n                                if ( pkgStatus == 'A' || pkgStatus == 'M' ) {\n                                    IS_BUILD = 'true'\n                                }\n                                if ( pkgStatus == 'D' ) {\n                                    IS_REMOVE = 'true'\n                                }\n                                ADD_REPO = 'lib32-gremlins'\n                                RM_REPO = ADD_REPO\n                            } else if ( repoName.contains('multilib-x86_64') ) {\n                                if ( pkgStatus == 'A' || pkgStatus == 'M' ) {\n                                    IS_BUILD = 'true'\n                                }\n                                if ( pkgStatus == 'D' ) {\n                                    IS_REMOVE = 'true'\n                                }\n                                ADD_REPO = 'lib32'\n                                RM_REPO = ADD_REPO\n                            }\n                            PKG_PATH = srcPath\n                            PKG_TRUNK = buildInfo[0] + '/trunk'\n                        }\n\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Build",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "dir",
                      "arguments": {
                        "isLiteral": false,
                        "value": "\"${PKG_PATH}\""
                      },
                      "children": [
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": false,
                                "value": "\"buildpkg -r ${ADD_REPO}\""
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "expression",
                    "arguments": [
                      {
                        "key": "scriptBlock",
                        "value": {
                          "isLiteral": true,
                          "value": "return  IS_BUILD == 'true'"
                        }
                      }
                    ]
                  }
                ]
              },
              "post": {
                "conditions": [
                  {
                    "condition": "success",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "dir",
                          "arguments": {
                            "isLiteral": false,
                            "value": "\"${PKG_PATH}\""
                          },
                          "children": [
                            {
                              "name": "sh",
                              "arguments": [
                                {
                                  "key": "script",
                                  "value": {
                                    "isLiteral": false,
                                    "value": "\"deploypkg -a -d ${ADD_REPO} -s\""
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  }
                ]
              },
              "environment": [
                {
                  "key": "BUILDBOT_GPGP",
                  "value": {
                    "name": "credentials",
                    "arguments": [
                      {
                        "isLiteral": true,
                        "value": "BUILDBOT_GPGP"
                      }
                    ]
                  }
                }
              ]
            },
            {
              "name": "Add",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "dir",
                      "arguments": {
                        "isLiteral": false,
                        "value": "\"${PKG_TRUNK}\""
                      },
                      "children": [
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": false,
                                "value": "\"deploypkg -a -d ${ADD_REPO}\""
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "expression",
                    "arguments": [
                      {
                        "key": "scriptBlock",
                        "value": {
                          "isLiteral": true,
                          "value": "return  IS_ADD == 'true'"
                        }
                      }
                    ]
                  }
                ]
              }
            },
            {
              "name": "Remove",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "dir",
                      "arguments": {
                        "isLiteral": false,
                        "value": "\"${PKG_TRUNK}\""
                      },
                      "children": [
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": false,
                                "value": "\"deploypkg -r -d ${RM_REPO}\""
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "expression",
                    "arguments": [
                      {
                        "key": "scriptBlock",
                        "value": {
                          "isLiteral": true,
                          "value": "return  IS_REMOVE == 'true'"
                        }
                      }
                    ]
                  }
                ]
              }
            }
          ],
          "agent": {
            "type": "any"
          },
          "options": {
            "options": [
              {
                "name": "skipDefaultCheckout",
                "arguments": []
              },
              {
                "name": "timestamps",
                "arguments": []
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "artix-linux/packages",
      "repo_url": "https://github.com/artix-linux/packages",
      "html_url_jenkinsfile": "https://github.com/artix-linux/packages/blob/a544af6b94b136c977c4da55efa0c359bf27b7dd/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/118593534/git/blobs/843f37f0238d86815b62914a45cacb6295e94ec0",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Checkout",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "checkout scm\n\n                    def currentCommit = sh(returnStdout: true, script: 'git rev-parse @').trim()\n                    echo \"currentCommit: ${currentCommit}\"\n\n                    def changedFilesStatus = sh(returnStdout: true, script: \"git show --pretty=format: --name-status ${currentCommit}\").tokenize('\\n')\n                    def changedPkgStatus = []\n                    def pkgPath = []\n                    int entryCount = 0\n                    for ( int i = 0; i < changedFilesStatus.size(); i++ ) {\n                        def entry = changedFilesStatus[i].split()\n                        def fileStatus = entry[0]\n                        entryCount = entry.size()\n                        for ( int j = 1; j < entry.size(); j++ ) {\n                            if ( entry[j].contains('/PKGBUILD') && entry[j].contains('/repos') ){\n                                changedPkgStatus << \"${fileStatus} \" + entry[j].minus('/PKGBUILD')\n                                pkgPath << entry[j].minus('/PKGBUILD')\n                            }\n                        }\n                    }\n\n                    int pkgCount = changedPkgStatus.size()\n                    int pkgPathCount = pkgPath.size()\n                    echo \"pkgCount: ${pkgCount}\"\n                    echo \"entryCount: ${entryCount}\"\n                    echo \"pkgPathCount: ${pkgPathCount}\"\n                    echo \"changedPkgStatus: ${changedPkgStatus}\"\n\n                    if ( pkgCount > 0 ) {\n\n                        if ( entryCount == 2 && pkgCount == 2 ) {\n                            def pkgEntry1 = changedPkgStatus[0].split()\n                            def pkgEntry2 = changedPkgStatus[1].split()\n                            def srcPath = []\n                            def pkgStatus = []\n                            srcPath << pkgEntry1[1]\n                            srcPath << pkgEntry2[1]\n                            pkgStatus << pkgEntry1[0]\n                            pkgStatus << pkgEntry2[0]\n                            def buildInfo1 = srcPath[0].tokenize('/')\n                            def buildInfo2 = srcPath[1].tokenize('/')\n                            def repoName1 = buildInfo1[2]\n                            def repoName2 = buildInfo2[2]\n\n                            if ( pkgStatus[0] == 'M' ) {\n                                IS_ADD = 'true'\n                                if ( repoName1.contains('staging') ) {\n                                    ADD_REPO = 'goblins'\n                                } else if ( repoName1.contains('testing') ) {\n                                    ADD_REPO = 'gremlins'\n                                } else if ( repoName1.contains('core') ) {\n                                    ADD_REPO = 'system'\n                                } else if ( repoName1.contains('extra') ) {\n                                    ADD_REPO = 'world'\n                                }\n                            } else if ( pkgStatus[1] == 'M' ) {\n                                IS_ADD = 'true'\n                                if ( repoName2.contains('staging') ) {\n                                    ADD_REPO = 'goblins'\n                                } else if ( repoName2.contains('testing') ) {\n                                    ADD_REPO = 'gremlins'\n                                } else if ( repoName2.contains('core') ) {\n                                    ADD_REPO = 'system'\n                                } else if ( repoName2.contains('extra') ) {\n                                    ADD_REPO = 'world'\n                                }\n                            }\n\n                            if ( pkgStatus[0] == 'D' ) {\n                                IS_REMOVE = 'true'\n                                if ( repoName1.contains('staging') ) {\n                                    RM_REPO = 'goblins'\n                                } else if ( repoName1.contains('testing') ) {\n                                    RM_REPO = 'gremlins'\n                                } else if ( repoName1.contains('core') ) {\n                                    RM_REPO = 'system'\n                                } else if ( repoName1.contains('extra') ) {\n                                    RM_REPO = 'world'\n                                }\n                            } else if ( pkgStatus[1] == 'D' ) {\n                                IS_REMOVE = 'true'\n                                if ( repoName2.contains('staging') ) {\n                                    RM_REPO = 'goblins'\n                                } else if ( repoName2.contains('testing') ) {\n                                    RM_REPO = 'gremlins'\n                                } else if ( repoName2.contains('core') ) {\n                                    RM_REPO = 'system'\n                                } else if ( repoName2.contains('extra') ) {\n                                    RM_REPO = 'world'\n                                }\n                            }\n\n                            PKG_TRUNK = buildInfo1[0] + '/trunk'\n                        }\n\n                        if ( entryCount == 3 && pkgCount == 2 ) {\n                            def pkgEntry = changedPkgStatus[0].split()\n                            def pkgStatus = pkgEntry[0]\n                            def buildInfo1 = pkgPath[0].tokenize('/')\n                            def buildInfo2 = pkgPath[1].tokenize('/')\n                            def repoName1 = buildInfo1[2]\n                            def repoName2 = buildInfo2[2]\n\n                            if ( pkgStatus.contains('R') ) {\n                                IS_ADD = 'true'\n                                IS_REMOVE = 'true'\n\n                                if ( repoName1.contains('staging') && repoName2.contains('testing') ) {\n                                    ADD_REPO = 'gremlins'\n                                    RM_REPO = 'goblins'\n                                } else if ( repoName1.contains('testing') && repoName2.contains('staging') ) {\n                                    ADD_REPO = 'goblins'\n                                    RM_REPO = 'gremlins'\n                                }\n\n                                if ( repoName1.contains('core') && repoName2.contains('testing')) {\n                                    ADD_REPO = 'gremlins'\n                                    RM_REPO = 'system'\n                                } else if ( repoName1.contains('testing') && repoName2.contains('core')) {\n                                    ADD_REPO = 'system'\n                                    RM_REPO = 'gremlins'\n                                }\n\n                                if ( repoName1.contains('extra') && repoName2.contains('testing')) {\n                                    ADD_REPO = 'gremlins'\n                                    RM_REPO = 'world'\n                                } else if ( repoName1.contains('testing') && repoName2.contains('extra')) {\n                                    ADD_REPO = 'world'\n                                    RM_REPO = 'gremlins'\n                                }\n\n                                if ( repoName1.contains('core') && repoName2.contains('extra')) {\n                                    ADD_REPO = 'world'\n                                    RM_REPO = 'system'\n                                } else if ( repoName1.contains('extra') && repoName2.contains('core')) {\n                                    ADD_REPO = 'system'\n                                    RM_REPO = 'world'\n                                }\n                            }\n                            PKG_TRUNK = buildInfo1[0] + '/trunk'\n                        }\n\n                        if ( pkgCount == 1 ) {\n                            def pkgEntry = changedPkgStatus[0].split()\n                            def pkgStatus = pkgEntry[0]\n                            def srcPath = pkgEntry[1]\n                            def buildInfo = srcPath.tokenize('/')\n                            def repoName = buildInfo[2]\n\n                            if ( repoName.contains('staging') ) {\n                                if ( pkgStatus == 'A' || pkgStatus == 'M' ) {\n                                    IS_BUILD = 'true'\n                                }\n                                if ( pkgStatus == 'D' ) {\n                                    IS_REMOVE = 'true'\n                                }\n                                ADD_REPO = 'goblins'\n                                RM_REPO = ADD_REPO\n                            } else if ( repoName.contains('testing') ) {\n                                if ( pkgStatus == 'A' || pkgStatus == 'M' ) {\n                                    IS_BUILD = 'true'\n                                }\n                                if ( pkgStatus == 'D' ) {\n                                    IS_REMOVE = 'true'\n                                }\n                                ADD_REPO = 'gremlins'\n                                RM_REPO = ADD_REPO\n                            } else if ( repoName.contains('core') ) {\n                                if ( pkgStatus == 'A' || pkgStatus == 'M' ) {\n                                    IS_BUILD = 'true'\n                                }\n                                if ( pkgStatus == 'D' ) {\n                                    IS_REMOVE = 'true'\n                                }\n                                ADD_REPO = 'system'\n                                RM_REPO = ADD_REPO\n                            } else if ( repoName.contains('extra') ) {\n                                if ( pkgStatus == 'A' || pkgStatus == 'M' ) {\n                                    IS_BUILD = 'true'\n                                }\n                                if ( pkgStatus == 'D' ) {\n                                    IS_REMOVE = 'true'\n                                }\n                                ADD_REPO = 'world'\n                                RM_REPO = ADD_REPO\n                            }\n                            PKG_PATH = srcPath\n                            PKG_TRUNK = buildInfo[0] + '/trunk'\n                        }\n\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Build",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "dir",
                      "arguments": {
                        "isLiteral": false,
                        "value": "\"${PKG_PATH}\""
                      },
                      "children": [
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": false,
                                "value": "\"buildpkg -r ${ADD_REPO}\""
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "expression",
                    "arguments": [
                      {
                        "key": "scriptBlock",
                        "value": {
                          "isLiteral": true,
                          "value": "return  IS_BUILD == 'true'"
                        }
                      }
                    ]
                  }
                ]
              },
              "post": {
                "conditions": [
                  {
                    "condition": "success",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "dir",
                          "arguments": {
                            "isLiteral": false,
                            "value": "\"${PKG_PATH}\""
                          },
                          "children": [
                            {
                              "name": "sh",
                              "arguments": [
                                {
                                  "key": "script",
                                  "value": {
                                    "isLiteral": false,
                                    "value": "\"deploypkg -a -d ${ADD_REPO} -s\""
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  }
                ]
              },
              "environment": [
                {
                  "key": "BUILDBOT_GPGP",
                  "value": {
                    "name": "credentials",
                    "arguments": [
                      {
                        "isLiteral": true,
                        "value": "BUILDBOT_GPGP"
                      }
                    ]
                  }
                }
              ]
            },
            {
              "name": "Add",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "dir",
                      "arguments": {
                        "isLiteral": false,
                        "value": "\"${PKG_TRUNK}\""
                      },
                      "children": [
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": false,
                                "value": "\"deploypkg -a -d ${ADD_REPO}\""
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "expression",
                    "arguments": [
                      {
                        "key": "scriptBlock",
                        "value": {
                          "isLiteral": true,
                          "value": "return  IS_ADD == 'true'"
                        }
                      }
                    ]
                  }
                ]
              }
            },
            {
              "name": "Remove",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "dir",
                      "arguments": {
                        "isLiteral": false,
                        "value": "\"${PKG_TRUNK}\""
                      },
                      "children": [
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": false,
                                "value": "\"deploypkg -r -d ${RM_REPO}\""
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "expression",
                    "arguments": [
                      {
                        "key": "scriptBlock",
                        "value": {
                          "isLiteral": true,
                          "value": "return  IS_REMOVE == 'true'"
                        }
                      }
                    ]
                  }
                ]
              }
            }
          ],
          "agent": {
            "type": "any"
          },
          "options": {
            "options": [
              {
                "name": "skipDefaultCheckout",
                "arguments": []
              },
              {
                "name": "timestamps",
                "arguments": []
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "sirty/TestCISwift",
      "repo_url": "https://github.com/sirty/TestCISwift",
      "html_url_jenkinsfile": "https://github.com/sirty/TestCISwift/blob/16731fbc65e707a88afc660433046d7b3bf12ce1/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/82547578/git/blobs/066003b3089c124fd196aa27939dabe97cfb331d",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Start",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sendNotifications",
                      "arguments": {
                        "isLiteral": true,
                        "value": "STARTED"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "name": "Stage Checkout",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "checkout",
                      "arguments": [
                        {
                          "key": "scm",
                          "value": {
                            "isLiteral": false,
                            "value": "${scm}"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "git submodule update --init"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Stage Build",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": false,
                            "value": "\"My branch is: ${env.BRANCH_NAME}\""
                          }
                        }
                      ]
                    },
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def changeLog = getChangelog()\n                    echo \"Change logs: ${changeLog}\""
                          }
                        }
                      ]
                    },
                    {
                      "name": "archive",
                      "arguments": [
                        {
                          "key": "includes",
                          "value": {
                            "isLiteral": true,
                            "value": "reports/, dist/"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Test Coverage Reports",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "ansiColor",
                      "arguments": {
                        "isLiteral": true,
                        "value": "xterm"
                      },
                      "children": [
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "fastlane metricsGems"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ],
              "environment": [
                {
                  "key": "PATH",
                  "value": {
                    "isLiteral": true,
                    "value": "/Users/Shared/Jenkins/.rvm/gems/ruby-2.4.0@global/bin:/Users/Shared/Jenkins/.rvm/rubies/ruby-2.4.0/bin:$PATH"
                  }
                }
              ]
            },
            {
              "name": "Check Lint",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "ansiColor",
                      "arguments": {
                        "isLiteral": true,
                        "value": "xterm"
                      },
                      "children": [
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "fastlane metricsBrew"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ],
              "environment": [
                {
                  "key": "PATH",
                  "value": {
                    "isLiteral": true,
                    "value": "$PATH:/usr/local/bin"
                  }
                }
              ]
            },
            {
              "name": "SonarQube analysis",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def scannerHome = tool 'SonarQubeScanner';\n                    withSonarQubeEnv('Sonar') {\n                        // requires SonarQube Scanner for Gradle 2.1+\n                        // It's important to add --info because of SONARJNKNS-281\n                        // sh \"${scannerHome}/bin/sonar-scanner\"\n\t\t\tansiColor('xterm') {\n    \t\t\t\tsh 'fastlane sonarRunner'\n\t\t\t}\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "environment": [
                {
                  "key": "PATH",
                  "value": {
                    "isLiteral": true,
                    "value": "$PATH:/usr/local/bin"
                  }
                }
              ]
            }
          ],
          "post": {
            "conditions": [
              {
                "condition": "always",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sendNotifications",
                      "arguments": {
                        "isLiteral": false,
                        "value": "${currentBuild.result}"
                      }
                    }
                  ]
                }
              }
            ]
          },
          "agent": {
            "type": "any"
          },
          "options": {
            "options": [
              {
                "name": "buildDiscarder",
                "arguments": [
                  {
                    "name": "logRotator",
                    "arguments": [
                      {
                        "key": "numToKeepStr",
                        "value": {
                          "isLiteral": true,
                          "value": "10"
                        }
                      }
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "unige-pinfo-2018/PInfo2",
      "repo_url": "https://github.com/unige-pinfo-2018/PInfo2",
      "html_url_jenkinsfile": "https://github.com/unige-pinfo-2018/PInfo2/blob/31b6874f9aa76fdb4e26315bd737ff9472903a7d/Jenkins/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/122039581/git/blobs/74dd923ff2079031f8b1eb60cc0d47f94f9fabb0",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Setup Containers",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "sh Jenkins/Scripts/Database/runDatabaseTests.sh                     ${ACADEMI_CO_NETWORK} ${IMAGE_DB} ${DOCKER_DB_IT}"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "sh Jenkins/Scripts/Database/runDatabase.sh                     ${ACADEMI_CO_NETWORK} ${IMAGE_DB} ${DOCKER_DB}"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "sh Jenkins/Scripts/Appserver/runAppServer.sh                     ${ACADEMI_CO_NETWORK} ${IMAGE_APPSERVER} ${DOCKER_APPSERVER} ${DOCKER_DB}"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "agent": {
                "type": "docker",
                "arguments": [
                  {
                    "key": "image",
                    "value": {
                      "isLiteral": true,
                      "value": "docker"
                    }
                  },
                  {
                    "key": "args",
                    "value": {
                      "isLiteral": true,
                      "value": "--net=\"host\" --entrypoint=\"\""
                    }
                  }
                ]
              }
            },
            {
              "name": "Build",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "mvn -B -DskipTests -f academi-co/pom.xml clean package"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "agent": {
                "type": "docker",
                "arguments": [
                  {
                    "key": "image",
                    "value": {
                      "isLiteral": true,
                      "value": "maven:3-alpine"
                    }
                  },
                  {
                    "key": "args",
                    "value": {
                      "isLiteral": true,
                      "value": "-v /root/.m2:/root/.m2"
                    }
                  }
                ]
              }
            },
            {
              "name": "Tests",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "mvn -f academi-co/pom.xml test"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "agent": {
                "type": "docker",
                "arguments": [
                  {
                    "key": "image",
                    "value": {
                      "isLiteral": true,
                      "value": "maven:3-alpine"
                    }
                  },
                  {
                    "key": "args",
                    "value": {
                      "isLiteral": true,
                      "value": "-v /root/.m2:/root/.m2"
                    }
                  }
                ]
              },
              "post": {
                "conditions": [
                  {
                    "condition": "always",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "junit",
                          "arguments": [
                            {
                              "key": "testResults",
                              "value": {
                                "isLiteral": true,
                                "value": "academi-co/target/surefire-reports/*.xml"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  }
                ]
              }
            },
            {
              "name": "Deploy",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "sh Jenkins/Scripts/deploy.sh"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "agent": {
                "type": "docker",
                "arguments": [
                  {
                    "key": "image",
                    "value": {
                      "isLiteral": true,
                      "value": "docker"
                    }
                  },
                  {
                    "key": "args",
                    "value": {
                      "isLiteral": true,
                      "value": "--net=\"host\" --entrypoint=\"\" -v /:/tmp/server"
                    }
                  }
                ]
              }
            }
          ],
          "post": {
            "conditions": [
              {
                "condition": "always",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "sh Jenkins/Scripts/Database/killDatabaseTests.sh ${DOCKER_DB_IT}"
                          }
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "condition": "success",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "emailext",
                      "arguments": [
                        {
                          "key": "subject",
                          "value": {
                            "isLiteral": false,
                            "value": "\"SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'\""
                          }
                        },
                        {
                          "key": "to",
                          "value": {
                            "isLiteral": true,
                            "value": "Nicolas.Cotte.1@etu.unige.ch, Petr.Binko@etu.unige.ch"
                          }
                        },
                        {
                          "key": "recipientProviders",
                          "value": {
                            "isLiteral": false,
                            "value": "${[[$class: 'DevelopersRecipientProvider']]}"
                          }
                        },
                        {
                          "key": "body",
                          "value": {
                            "isLiteral": false,
                            "value": "\"\"\"SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':\n\n                Check console output at '${env.BUILD_URL}'\n                Last commit: '${env.GIT_COMMIT}'\"\"\""
                          }
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "condition": "failure",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "emailext",
                      "arguments": [
                        {
                          "key": "subject",
                          "value": {
                            "isLiteral": false,
                            "value": "\"FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'\""
                          }
                        },
                        {
                          "key": "to",
                          "value": {
                            "isLiteral": true,
                            "value": "Nicolas.Cotte.1@etu.unige.ch, Petr.Binko@etu.unige.ch"
                          }
                        },
                        {
                          "key": "recipientProviders",
                          "value": {
                            "isLiteral": false,
                            "value": "${[[$class: 'DevelopersRecipientProvider']]}"
                          }
                        },
                        {
                          "key": "body",
                          "value": {
                            "isLiteral": false,
                            "value": "\"\"\"FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':\n\n                Check console output at '${env.BUILD_URL}'\n                Last commit: '${env.GIT_COMMIT}'\"\"\""
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          },
          "environment": [
            {
              "key": "MAVEN_OPTS",
              "value": {
                "isLiteral": true,
                "value": "-Xmx256m"
              }
            },
            {
              "key": "ACADEMI_CO_NETWORK",
              "value": {
                "isLiteral": true,
                "value": "academi_co_network"
              }
            },
            {
              "key": "IMAGE_DB",
              "value": {
                "isLiteral": true,
                "value": "academi_co_mysql"
              }
            },
            {
              "key": "IMAGE_APPSERVER",
              "value": {
                "isLiteral": true,
                "value": "academi_co_wildfly"
              }
            },
            {
              "key": "DOCKER_DB",
              "value": {
                "isLiteral": true,
                "value": "concealed_cader"
              }
            },
            {
              "key": "DOCKER_DB_IT",
              "value": {
                "isLiteral": true,
                "value": "shady_selimi"
              }
            },
            {
              "key": "DOCKER_APPSERVER",
              "value": {
                "isLiteral": true,
                "value": "cheeky_binko"
              }
            }
          ],
          "agent": {
            "type": "any"
          }
        }
      }
    },
    {
      "full_repo_name": "bndynet/web-framework-for-java",
      "repo_url": "https://github.com/bndynet/web-framework-for-java",
      "html_url_jenkinsfile": "https://github.com/bndynet/web-framework-for-java/blob/c85c3ae494a44dc9ae7b56fcc93da2d3ffc6637a/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/83320135/git/blobs/3b8e747a2f919b88d74a22eae0e5cff91d6d2f4a",
      "jenkins_pipeline": [
        {
          "error": "Tool type \"maven\" does not have an install of \"Maven 3.5\" configured - did you mean \"Jenkins_maven\"? @ line 5, column 15."
        }
      ]
    },
    {
      "full_repo_name": "cosnics/cosnics",
      "repo_url": "https://github.com/cosnics/cosnics",
      "html_url_jenkinsfile": "https://github.com/cosnics/cosnics/blob/e287fa36b0185e860ac57d01d51b964087db2ac3/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/76360125/git/blobs/68940393ab963b01cae324deb073c2d1b1f5e35e",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Create Build",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "Notifying slack build has started"
                          }
                        }
                      ]
                    },
                    {
                      "name": "notifySlack",
                      "arguments": []
                    },
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "Delete unsupported code"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "rm -rf src/Chamilo/Application/Survey"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "rm -rf src/Chamilo/Core/Repository/ContentObject/Survey"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "rm -rf src/Chamilo/Core/Repository/ContentObject/Bookmark"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "rm -rf src/Chamilo/Core/Repository/ContentObject/Matterhorn"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "rm -rf src/Chamilo/Core/Repository/ContentObject/PhysicalLocation"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "rm -rf src/Chamilo/Core/Repository/ContentObject/Vimeo"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "rm -rf src/Chamilo/Core/Repository/Implementation/Bitbucket"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "rm -rf src/Chamilo/Core/Repository/Implementation/Box"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "rm -rf src/Chamilo/Core/Repository/Implementation/Dropbox"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "rm -rf src/Chamilo/Core/Repository/Implementation/Flickr"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "rm -rf src/Chamilo/Core/Repository/Implementation/Hq23"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "rm -rf src/Chamilo/Core/Repository/Implementation/Matterhorn"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "rm -rf src/Chamilo/Core/Repository/Implementation/Photobucket"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "rm -rf src/Chamilo/Core/Repository/Implementation/Picase"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "rm -rf src/Chamilo/Core/Repository/Implementation/Scribd"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "rm -rf src/Chamilo/Core/Repository/Implementation/Slideshare"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "rm -rf src/Chamilo/Core/Repository/Implementation/Soundcloud"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "rm -rf src/Chamilo/Core/Repository/Implementation/Vimeo"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "rm -rf src/Chamilo/Core/Repository/Implementation/Wikimedia"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "rm -rf src/Chamilo/Core/Repository/Implementation/Wikipedia"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "rm -rf src/Chamilo/Application/Weblcms/Tool/Implementation/Ephorus"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "rm -rf src/Chamilo/Application/Weblcms/Tool/Implementation/Chat"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "rm -rf src/Chamilo/Application/Weblcms/Tool/Implementation/Geolocation"
                          }
                        }
                      ]
                    },
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "Composer update"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "composer update -o"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Deploy",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "Deploying.."
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "ansible-playbook /ansible/deploy.yml -i /ansible/hosts --extra-vars \"hosts=test remote_user=jenkins project_root=/cosnics/${BRANCH_NAME} project_local_path=${WORKSPACE}/ cosnics_url=https://demo.cosnics.org/${BRANCH_NAME}/current/web/ cosnics_deploy_database_name=cosnics-${BRANCH_NAME} cosnics_deploy_test_database_name=cosnics-${BRANCH_NAME}-test\""
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Test",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "dir",
                      "arguments": {
                        "isLiteral": false,
                        "value": "\"/cosnics/${env.BRANCH_NAME}/current/\""
                      },
                      "children": [
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "php console chamilo:phpunit:generate-config"
                              }
                            }
                          ]
                        },
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": false,
                                "value": "\"bin/phpunit -c files/configuration/phpunit.xml --log-junit ${WORKSPACE}/build-reports/phpunit-result.xml\""
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "name": "step",
                      "arguments": [
                        {
                          "key": "delegate",
                          "value": {
                            "isLiteral": false,
                            "value": "[$class: 'XUnitBuilder',\n                    thresholds: [[$class: 'FailedThreshold', unstableThreshold: '0']],\n                    tools: [[$class: 'JUnitType', pattern: \"build-reports/*.xml\"]]]"
                          }
                        }
                      ]
                    },
                    {
                      "name": "publishHTML",
                      "arguments": [
                        {
                          "key": "allowMissing",
                          "value": {
                            "isLiteral": true,
                            "value": false
                          }
                        },
                        {
                          "key": "alwaysLinkToLastBuild",
                          "value": {
                            "isLiteral": true,
                            "value": false
                          }
                        },
                        {
                          "key": "keepAll",
                          "value": {
                            "isLiteral": true,
                            "value": false
                          }
                        },
                        {
                          "key": "reportDir",
                          "value": {
                            "isLiteral": true,
                            "value": "build-reports"
                          }
                        },
                        {
                          "key": "reportFiles",
                          "value": {
                            "isLiteral": true,
                            "value": "index.html"
                          }
                        },
                        {
                          "key": "reportName",
                          "value": {
                            "isLiteral": true,
                            "value": "HTML Report"
                          }
                        },
                        {
                          "key": "reportTitles",
                          "value": {
                            "isLiteral": true,
                            "value": ""
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "post": {
            "conditions": [
              {
                "condition": "always",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "notifySlack",
                      "arguments": {
                        "isLiteral": false,
                        "value": "${currentBuild.result}"
                      }
                    }
                  ]
                }
              },
              {
                "condition": "unstable",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": false,
                            "value": "${currentBuild.result}"
                          }
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "condition": "failure",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": false,
                            "value": "${currentBuild.result}"
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          },
          "agent": {
            "type": "any"
          },
          "options": {
            "options": [
              {
                "name": "disableConcurrentBuilds",
                "arguments": []
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "goern/janusgraph-openshift",
      "repo_url": "https://github.com/goern/janusgraph-openshift",
      "html_url_jenkinsfile": "https://github.com/goern/janusgraph-openshift/blob/a309556c2e31faac7bbd1d935eb7b3ea4f3267fd/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/122179006/git/blobs/01a531a88d5a7893123ba91db9c3db5ba9de0a11",
      "jenkins_pipeline": [
        {
          "error": "Invalid agent type \"kubernetes\" specified. Must be one of [docker, dockerfile, label, any, none] @ line 60, column 9."
        }
      ]
    },
    {
      "full_repo_name": "bordei18/ignite",
      "repo_url": "https://github.com/bordei18/ignite",
      "html_url_jenkinsfile": "https://github.com/bordei18/ignite/blob/76f653779db87e7ed1eecccae55e2fbeeee374dc/spring-boot-ignite/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/127245329/git/blobs/c426f63d3734ed5729bb47675e09062b3abade76",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Build With Unit Testing",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "echo 'Pulling...' + env.BRANCH_NAME\n                    def mvnHome = tool 'Maven 3.3.9'\n                    if (isUnix()) {\n                        sh \"'${mvnHome}/bin/mvn' -Dmaven.test.failure.ignore clean package\"\n                        def pom = readMavenPom file: 'pom.xml'\n                        print pom.version\n                        junit '**/target/surefire-reports/TEST-*.xml'\n                        archive 'target/*.jar'\n                    } else {\n                        bat(/\"${mvnHome}\\bin\\mvn\" -Dmaven.test.failure.ignore clean package/)\n                        def pom = readMavenPom file: 'pom.xml'\n                        print pom.version\n                        junit '**/target/surefire-reports/TEST-*.xml'\n                        archive 'target/*.jar'\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Integration Tests",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def mvnHome = tool 'Maven 3.3.9'\n                    if (isUnix()) {\n                        sh \"'${mvnHome}/bin/mvn'  verify -Dunit-tests.skip=true\"\n                    } else {\n                        bat(/\"${mvnHome}\\bin\\mvn\" verify -Dunit-tests.skip=true/)\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Sonar Check",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def mvnHome = tool 'Maven 3.3.9'\n                    // replace it with your sonar server\n                    sh \"'${mvnHome}/bin/mvn'  verify sonar:sonar -Dsonar.host.url=http://romehjava.bc/sonar/ -Dmaven.test.failure.ignore=true\""
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "ITT Deploy Approval and deployment",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "timeout",
                      "arguments": [
                        {
                          "key": "time",
                          "value": {
                            "isLiteral": true,
                            "value": 3
                          }
                        },
                        {
                          "key": "unit",
                          "value": {
                            "isLiteral": true,
                            "value": "MINUTES"
                          }
                        }
                      ],
                      "children": [
                        {
                          "name": "input",
                          "arguments": [
                            {
                              "key": "message",
                              "value": {
                                "isLiteral": true,
                                "value": "Approve deployment?"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "name": "timeout",
                      "arguments": [
                        {
                          "key": "time",
                          "value": {
                            "isLiteral": true,
                            "value": 2
                          }
                        },
                        {
                          "key": "unit",
                          "value": {
                            "isLiteral": true,
                            "value": "MINUTES"
                          }
                        }
                      ],
                      "children": [
                        {
                          "name": "build",
                          "arguments": [
                            {
                              "key": "job",
                              "value": {
                                "isLiteral": true,
                                "value": "AlertManagerToITT"
                              }
                            }
                          ]
                        },
                        {
                          "name": "echo",
                          "arguments": [
                            {
                              "key": "message",
                              "value": {
                                "isLiteral": true,
                                "value": "the application is deployed !"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "expression",
                    "arguments": [
                      {
                        "key": "scriptBlock",
                        "value": {
                          "isLiteral": true,
                          "value": "currentBuild.result == null || currentBuild.result == 'SUCCESS' && env.BRANCH_NAME == 'master'"
                        }
                      }
                    ]
                  }
                ]
              }
            }
          ],
          "post": {
            "conditions": [
              {
                "condition": "always",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "deleteDir",
                      "arguments": []
                    }
                  ]
                }
              },
              {
                "condition": "success",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sendEmail",
                      "arguments": {
                        "isLiteral": true,
                        "value": "Successful"
                      }
                    }
                  ]
                }
              },
              {
                "condition": "unstable",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sendEmail",
                      "arguments": {
                        "isLiteral": true,
                        "value": "Unstable"
                      }
                    }
                  ]
                }
              },
              {
                "condition": "failure",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sendEmail",
                      "arguments": {
                        "isLiteral": true,
                        "value": "Failed"
                      }
                    }
                  ]
                }
              }
            ]
          },
          "environment": [
            {
              "key": "EMAIL_RECIPIENTS",
              "value": {
                "isLiteral": true,
                "value": "mahmoud.romih@test.com"
              }
            }
          ],
          "agent": {
            "type": "label",
            "argument": {
              "isLiteral": true,
              "value": "jdk8"
            }
          },
          "options": {
            "options": [
              {
                "name": "buildDiscarder",
                "arguments": [
                  {
                    "name": "logRotator",
                    "arguments": [
                      {
                        "key": "numToKeepStr",
                        "value": {
                          "isLiteral": true,
                          "value": "10"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "name": "timeout",
                "arguments": [
                  {
                    "key": "time",
                    "value": {
                      "isLiteral": true,
                      "value": 20
                    }
                  },
                  {
                    "key": "unit",
                    "value": {
                      "isLiteral": true,
                      "value": "MINUTES"
                    }
                  }
                ]
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "ufz/ogs",
      "repo_url": "https://github.com/ufz/ogs",
      "html_url_jenkinsfile": "https://github.com/ufz/ogs/blob/315ff4a1f4c362f3505731b2dd8083fbd35b3454/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/1701384/git/blobs/aff531cf72bbbee1076dce2e04aae13f34317b21",
      "jenkins_pipeline": [
        {
          "error": "unable to resolve class ogs.helper \n @ line 564, column 28."
        }
      ]
    },
    {
      "full_repo_name": "nblair/continuous-performance-testing",
      "repo_url": "https://github.com/nblair/continuous-performance-testing",
      "html_url_jenkinsfile": "https://github.com/nblair/continuous-performance-testing/blob/3ea1eb8c151b815ae24774162ccda841a7ce85f6/performance-testsuite/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/107594634/git/blobs/02a336c244fe3fdd82799656d39b093ddf1ba425",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Build",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "checkout",
                      "arguments": [
                        {
                          "key": "scm",
                          "value": {
                            "isLiteral": false,
                            "value": "${scm}"
                          }
                        }
                      ]
                    },
                    {
                      "name": "withMaven",
                      "arguments": [
                        {
                          "key": "options",
                          "value": {
                            "isLiteral": false,
                            "value": "${[ artifactsPublisher(disabled: true) ]}"
                          }
                        }
                      ],
                      "children": [
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "mvn clean install -DskipTests=true"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "name": "withMaven",
                      "arguments": [],
                      "children": [
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "mvn dependency:copy-dependencies -pl :performance-testsuite"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Environment",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "dir",
                      "arguments": {
                        "isLiteral": true,
                        "value": "performance-testsuite"
                      },
                      "children": [
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "terraform init"
                              }
                            }
                          ]
                        },
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "terraform apply"
                              }
                            }
                          ]
                        },
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "terraform output -json > target/terraformOutput.json"
                              }
                            }
                          ]
                        },
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": false,
                                "value": "\"\"\"\n          ./configure-gatling.sh \\\n            -c ${params.sampleNameSize} \\\n            -d \\\"${params.duration}\\\" \\\n            -m \\\"${params.ramp}\\\" \\\n            -t ${params.threads} \n          \"\"\""
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ],
              "post": {
                "conditions": [
                  {
                    "condition": "always",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "archive",
                          "arguments": [
                            {
                              "key": "includes",
                              "value": {
                                "isLiteral": true,
                                "value": "performance-testsuite/terraform.tfstate"
                              }
                            }
                          ]
                        },
                        {
                          "name": "archive",
                          "arguments": [
                            {
                              "key": "includes",
                              "value": {
                                "isLiteral": true,
                                "value": "performance-testsuite/target/terraformOutput.json"
                              }
                            }
                          ]
                        },
                        {
                          "name": "archive",
                          "arguments": [
                            {
                              "key": "includes",
                              "value": {
                                "isLiteral": true,
                                "value": "performance-testsuite/src/test/resources/application.conf"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  },
                  {
                    "condition": "failure",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "dir",
                          "arguments": {
                            "isLiteral": true,
                            "value": "performance-testsuite"
                          },
                          "children": [
                            {
                              "name": "sh",
                              "arguments": [
                                {
                                  "key": "script",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "terraform destroy --force"
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  }
                ]
              }
            },
            {
              "name": "Simulation",
              "branches": [
                {
                  "name": "gatling",
                  "steps": [
                    {
                      "name": "withMaven",
                      "arguments": [
                        {
                          "key": "options",
                          "value": {
                            "isLiteral": false,
                            "value": "${[ artifactsPublisher(disabled: true) ]}"
                          }
                        }
                      ],
                      "children": [
                        {
                          "name": "dir",
                          "arguments": {
                            "isLiteral": true,
                            "value": "performance-testsuite"
                          },
                          "children": [
                            {
                              "name": "sh",
                              "arguments": [
                                {
                                  "key": "script",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "./wait-for.sh"
                                  }
                                }
                              ]
                            },
                            {
                              "name": "sh",
                              "arguments": [
                                {
                                  "key": "script",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "mvn package verify -P gatling"
                                  }
                                }
                              ]
                            },
                            {
                              "name": "sh",
                              "arguments": [
                                {
                                  "key": "script",
                                  "value": {
                                    "isLiteral": false,
                                    "value": "\"OUTPUT=\\$(ls -t target/gatling/results/ | head -1) && mv target/gatling/results/\\$OUTPUT target/gatling/results/${env.BUILD_TAG}\""
                                  }
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "name": "publishHTML",
                          "arguments": [
                            {
                              "key": "target",
                              "value": {
                                "isLiteral": false,
                                "value": "[\n                        allowMissing: false,\n                        alwaysLinkToLastBuild: false,\n                        keepAll: true,\n                        reportDir: \"performance-testsuite/target/gatling/results/${env.BUILD_TAG}\",\n                        reportFiles: 'index.html',\n                        reportName: \"Gatling Report\"\n                    ]"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "manipulator",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "ready to manipulate while simulation is running"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "post": {
                "conditions": [
                  {
                    "condition": "always",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "dir",
                          "arguments": {
                            "isLiteral": true,
                            "value": "performance-testsuite"
                          },
                          "children": [
                            {
                              "name": "sh",
                              "arguments": [
                                {
                                  "key": "script",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "./fetch-state.sh"
                                  }
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "name": "archive",
                          "arguments": [
                            {
                              "key": "includes",
                              "value": {
                                "isLiteral": true,
                                "value": "performance-testsuite/target/log/**/*"
                              }
                            }
                          ]
                        },
                        {
                          "name": "dir",
                          "arguments": {
                            "isLiteral": true,
                            "value": "performance-testsuite"
                          },
                          "children": [
                            {
                              "name": "sh",
                              "arguments": [
                                {
                                  "key": "script",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "terraform destroy --force"
                                  }
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "name": "junit",
                          "arguments": [
                            {
                              "key": "testResults",
                              "value": {
                                "isLiteral": true,
                                "value": "performance-testsuite/target/gatling/**/assertions.xml"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  },
                  {
                    "condition": "success",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "dir",
                          "arguments": {
                            "isLiteral": true,
                            "value": "performance-testsuite"
                          },
                          "children": [
                            {
                              "name": "sh",
                              "arguments": [
                                {
                                  "key": "script",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "./check-state.sh"
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  }
                ]
              }
            }
          ],
          "environment": [
            {
              "key": "TF_VAR_build_key",
              "value": {
                "isLiteral": false,
                "value": "\"${env.BUILD_TAG}\""
              }
            },
            {
              "key": "TF_VAR_java_min_heap",
              "value": {
                "isLiteral": false,
                "value": "\"${params.java_min_mem}\""
              }
            },
            {
              "key": "TF_VAR_java_max_heap",
              "value": {
                "isLiteral": false,
                "value": "\"${params.java_max_mem}\""
              }
            },
            {
              "key": "TF_VAR_java_max_direct_memory",
              "value": {
                "isLiteral": false,
                "value": "\"${params.java_direct_mem}\""
              }
            },
            {
              "key": "TF_VAR_data_volume_size",
              "value": {
                "isLiteral": false,
                "value": "\"${params.workdir_volumesize}\""
              }
            },
            {
              "key": "TF_VAR_data_volume_type",
              "value": {
                "isLiteral": false,
                "value": "\"${params.workdir_volumetype}\""
              }
            },
            {
              "key": "TF_VAR_data_volume_iops",
              "value": {
                "isLiteral": false,
                "value": "\"${params.workdir_volumeiops}\""
              }
            },
            {
              "key": "TF_VAR_runner",
              "value": {
                "isLiteral": false,
                "value": "\"${OWNER}\""
              }
            }
          ],
          "agent": {
            "type": "any"
          }
        }
      }
    },
    {
      "full_repo_name": "yogireddy3/jenkin-project",
      "repo_url": "https://github.com/yogireddy3/jenkin-project",
      "html_url_jenkinsfile": "https://github.com/yogireddy3/jenkin-project/blob/f0dc8018216057a213281cc23abb24f95a4df925/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/129082127/git/blobs/f0a33547f6bd64bb96c71ac8f2f65daa563750da",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Build with unit testing",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "echo 'Pulling...' + env.BRANCH_NAME\n                    def mvnHome = tool 'Maven 3.3.9'\n                    if (isUnix()) {\n                        def targetVersion = getDevVersion()\n                        print 'target build version...'\n                        print targetVersion\n                        sh \"'${mvnHome}/bin/mvn' -Dintegration-tests.skip=true -Dbuild.number=${targetVersion} clean package\"\n                        def pom = readMavenPom file: 'pom.xml'\n                        // get the current development version\n                        developmentArtifactVersion = \"${pom.version}-${targetVersion}\"\n                        print pom.version\n                        // execute the unit testing and collect the reports\n                        junit '**//*target/surefire-reports/TEST-*.xml'\n                        archive 'target*//*.jar'\n                    } else {\n                        bat(/\"${mvnHome}\\bin\\mvn\" -Dintegration-tests.skip=true clean package/)\n                        def pom = readMavenPom file: 'pom.xml'\n                        print pom.version\n                        junit '**//*target/surefire-reports/TEST-*.xml'\n                        archive 'target*//*.jar'\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Integration tests",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def mvnHome = tool 'Maven 3.3.9'\n                    if (isUnix()) {\n                        // just to trigger the integration test without unit testing\n                        sh \"'${mvnHome}/bin/mvn'  verify -Dunit-tests.skip=true\"\n                    } else {\n                        bat(/\"${mvnHome}\\bin\\mvn\" verify -Dunit-tests.skip=true/)\n                    }"
                          }
                        }
                      ]
                    },
                    {
                      "name": "cucumber",
                      "arguments": [
                        {
                          "key": "buildStatus",
                          "value": {
                            "isLiteral": true,
                            "value": null
                          }
                        },
                        {
                          "key": "fileIncludePattern",
                          "value": {
                            "isLiteral": true,
                            "value": "**/cucumber.json"
                          }
                        },
                        {
                          "key": "jsonReportDirectory",
                          "value": {
                            "isLiteral": true,
                            "value": "target"
                          }
                        },
                        {
                          "key": "sortingMethod",
                          "value": {
                            "isLiteral": true,
                            "value": "ALPHABETICAL"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Sonar scan execution",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def mvnHome = tool 'Maven 3.3.9'\n                    withSonarQubeEnv {\n\n                        sh \"'${mvnHome}/bin/mvn'  verify sonar:sonar -Dintegration-tests.skip=true -Dmaven.test.failure.ignore=true\"\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Sonar scan result check",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "timeout",
                      "arguments": [
                        {
                          "key": "time",
                          "value": {
                            "isLiteral": true,
                            "value": 2
                          }
                        },
                        {
                          "key": "unit",
                          "value": {
                            "isLiteral": true,
                            "value": "MINUTES"
                          }
                        }
                      ],
                      "children": [
                        {
                          "name": "retry",
                          "arguments": {
                            "isLiteral": true,
                            "value": 3
                          },
                          "children": [
                            {
                              "name": "script",
                              "arguments": [
                                {
                                  "key": "scriptBlock",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "def qg = waitForQualityGate()\n                            if (qg.status != 'OK') {\n                                error \"Pipeline aborted due to quality gate failure: ${qg.status}\"\n                            }"
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Development deploy approval and deployment",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "if (currentBuild.result == null || currentBuild.result == 'SUCCESS') {\n                        timeout(time: 3, unit: 'MINUTES') {\n                            // you can use the commented line if u have specific user group who CAN ONLY approve\n                            //input message:'Approve deployment?', submitter: 'it-ops'\n                            input message: 'Approve deployment?'\n                        }\n                        timeout(time: 2, unit: 'MINUTES') {\n                            //\n                            if (developmentArtifactVersion != null && !developmentArtifactVersion.isEmpty()) {\n                                // replace it with your application name or make it easily loaded from pom.xml\n                                def jarName = \"application-${developmentArtifactVersion}.jar\"\n                                echo \"the application is deploying ${jarName}\"\n                                // NOTE : CREATE your deployemnt JOB, where it can take parameters whoch is the jar name to fetch from jenkins workspace\n                                build job: 'ApplicationToDev', parameters: [[$class: 'StringParameterValue', name: 'jarName', value: jarName]]\n                                echo 'the application is deployed !'\n                            } else {\n                                error 'the application is not  deployed as development version is null!'\n                            }\n\n                        }\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "DEV sanity check",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sleep",
                      "arguments": [
                        {
                          "key": "time",
                          "value": {
                            "isLiteral": true,
                            "value": 45
                          }
                        }
                      ]
                    },
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "if (currentBuild.result == null || currentBuild.result == 'SUCCESS') {\n                        timeout(time: 1, unit: 'MINUTES') {\n                            script {\n                                def mvnHome = tool 'Maven 3.3.9'\n                                //NOTE : if u change the sanity test class name , change it here as well\n                                sh \"'${mvnHome}/bin/mvn' -Dtest=ApplicationSanityCheck_ITT surefire:test\"\n                            }\n\n                        }\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Release and publish artifact",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def mvnHome = tool 'Maven 3.3.9' //\n                    if (currentBuild.result == null || currentBuild.result == 'SUCCESS') {\n                        def v = getReleaseVersion()\n                        releasedVersion = v;\n                        if (v) {\n                            echo \"Building version ${v} - so released version is ${releasedVersion}\"\n                        }\n                        // jenkins user credentials ID which is transparent to the user and password change\n                        sshagent(['0000000-3b5a-454e-a8e6-c6b6114d36000']) {\n                            sh \"git tag -f v${v}\"\n                            sh \"git push -f --tags\"\n                        }\n                        sh \"'${mvnHome}/bin/mvn' -Dmaven.test.skip=true  versions:set  -DgenerateBackupPoms=false -DnewVersion=${v}\"\n                        sh \"'${mvnHome}/bin/mvn' -Dmaven.test.skip=true clean deploy\"\n\n                    } else {\n                        error \"Release is not possible. as build is not successful\"\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "branch",
                    "arguments": {
                      "isLiteral": true,
                      "value": "master"
                    }
                  }
                ]
              }
            },
            {
              "name": "Deploy to Acceptance",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "if (currentBuild.result == null || currentBuild.result == 'SUCCESS') {\n                        timeout(time: 3, unit: 'MINUTES') {\n                            //input message:'Approve deployment?', submitter: 'it-ops'\n                            input message: 'Approve deployment to UAT?'\n                        }\n                        timeout(time: 3, unit: 'MINUTES') {\n                            //  deployment job which will take the relasesed version\n                            if (releasedVersion != null && !releasedVersion.isEmpty()) {\n                                // make the applciation name for the jar configurable\n                                def jarName = \"application-${releasedVersion}.jar\"\n                                echo \"the application is deploying ${jarName}\"\n                                // NOTE : DO NOT FORGET to create your UAT deployment jar , check Job AlertManagerToUAT in Jenkins for reference\n                                // the deployemnt should be based into Nexus repo\n                                build job: 'AApplicationToACC', parameters: [[$class: 'StringParameterValue', name: 'jarName', value: jarName], [$class: 'StringParameterValue', name: 'appVersion', value: releasedVersion]]\n                                echo 'the application is deployed !'\n                            } else {\n                                error 'the application is not  deployed as released version is null!'\n                            }\n\n                        }\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "branch",
                    "arguments": {
                      "isLiteral": true,
                      "value": "master"
                    }
                  }
                ]
              }
            },
            {
              "name": "ACC E2E tests",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sleep",
                      "arguments": [
                        {
                          "key": "time",
                          "value": {
                            "isLiteral": true,
                            "value": 45
                          }
                        }
                      ]
                    },
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "if (currentBuild.result == null || currentBuild.result == 'SUCCESS') {\n                        timeout(time: 1, unit: 'MINUTES') {\n\n                            script {\n                                def mvnHome = tool 'Maven 3.3.9'\n                                // NOTE : if you change the test class name change it here as well\n                                sh \"'${mvnHome}/bin/mvn' -Dtest=ApplicationE2E surefire:test\"\n                            }\n\n                        }\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "branch",
                    "arguments": {
                      "isLiteral": true,
                      "value": "master"
                    }
                  }
                ]
              }
            }
          ],
          "post": {
            "conditions": [
              {
                "condition": "always",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "deleteDir",
                      "arguments": []
                    }
                  ]
                }
              },
              {
                "condition": "success",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sendEmail",
                      "arguments": {
                        "isLiteral": true,
                        "value": "Successful"
                      }
                    }
                  ]
                }
              },
              {
                "condition": "unstable",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sendEmail",
                      "arguments": {
                        "isLiteral": true,
                        "value": "Unstable"
                      }
                    }
                  ]
                }
              },
              {
                "condition": "failure",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sendEmail",
                      "arguments": {
                        "isLiteral": true,
                        "value": "Failed"
                      }
                    }
                  ]
                }
              }
            ]
          },
          "environment": [
            {
              "key": "EMAIL_RECIPIENTS",
              "value": {
                "isLiteral": true,
                "value": "mahmoud.romeh@test.com"
              }
            }
          ],
          "agent": {
            "type": "label",
            "argument": {
              "isLiteral": true,
              "value": "java8"
            }
          },
          "options": {
            "options": [
              {
                "name": "buildDiscarder",
                "arguments": [
                  {
                    "name": "logRotator",
                    "arguments": [
                      {
                        "key": "numToKeepStr",
                        "value": {
                          "isLiteral": true,
                          "value": "5"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "name": "timeout",
                "arguments": [
                  {
                    "key": "time",
                    "value": {
                      "isLiteral": true,
                      "value": 25
                    }
                  },
                  {
                    "key": "unit",
                    "value": {
                      "isLiteral": true,
                      "value": "MINUTES"
                    }
                  }
                ]
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "italiangrid/storm-webdav",
      "repo_url": "https://github.com/italiangrid/storm-webdav",
      "html_url_jenkinsfile": "https://github.com/italiangrid/storm-webdav/blob/cf3082490c5955de2cae80d2240478768441be1c/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/23537821/git/blobs/52d521f7d205b0c59e61aae46cf247a85539144c",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "build",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "container",
                      "arguments": {
                        "isLiteral": true,
                        "value": "maven-runner"
                      },
                      "children": [
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "mvn -B clean compile"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "test",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "container",
                      "arguments": {
                        "isLiteral": true,
                        "value": "maven-runner"
                      },
                      "children": [
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "mvn -B clean test"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ],
              "post": {
                "conditions": [
                  {
                    "condition": "always",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "container",
                          "arguments": {
                            "isLiteral": true,
                            "value": "maven-runner"
                          },
                          "children": [
                            {
                              "name": "junit",
                              "arguments": [
                                {
                                  "key": "testResults",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "**/target/surefire-reports/TEST-*.xml"
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  }
                ]
              }
            },
            {
              "name": "PR analysis",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "container",
                      "arguments": {
                        "isLiteral": true,
                        "value": "maven-runner"
                      },
                      "children": [
                        {
                          "name": "script",
                          "arguments": [
                            {
                              "key": "scriptBlock",
                              "value": {
                                "isLiteral": true,
                                "value": "def tokens = \"${env.CHANGE_URL}\".tokenize('/')\n            def organization = tokens[tokens.size()-4]\n            def repo = tokens[tokens.size()-3]\n\n            withCredentials([string(credentialsId: '630f8e6c-0d31-4f96-8d82-a1ef536ef059', variable: 'GITHUB_ACCESS_TOKEN')]) {\n              withSonarQubeEnv{\n                sh \"\"\"\n                  mvn -B -U clean compile sonar:sonar \\\\\n                    -Dsonar.analysis.mode=preview \\\\\n                    -Dsonar.github.pullRequest=${env.CHANGE_ID} \\\\\n                    -Dsonar.github.repository=${organization}/${repo} \\\\\n                    -Dsonar.github.oauth=${GITHUB_ACCESS_TOKEN} \\\\\n                    -Dsonar.host.url=${SONAR_HOST_URL} \\\\\n                    -Dsonar.login=${SONAR_AUTH_TOKEN}\n                \"\"\"\n              }\n            }"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "not",
                    "children": [
                      {
                        "name": "environment",
                        "arguments": [
                          {
                            "key": "name",
                            "value": {
                              "isLiteral": true,
                              "value": "CHANGE_URL"
                            }
                          },
                          {
                            "key": "value",
                            "value": {
                              "isLiteral": true,
                              "value": ""
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            },
            {
              "name": "analysis",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "container",
                      "arguments": {
                        "isLiteral": true,
                        "value": "maven-runner"
                      },
                      "children": [
                        {
                          "name": "script",
                          "arguments": [
                            {
                              "key": "scriptBlock",
                              "value": {
                                "isLiteral": true,
                                "value": "def opts = '-Dmaven.test.failure.ignore -DfailIfNoTests=false'\n            def checkstyle_opts = 'checkstyle:check -Dcheckstyle.config.location=google_checks.xml'\n\n            withSonarQubeEnv{\n              sh \"mvn clean compile -U ${opts} ${checkstyle_opts} ${SONAR_MAVEN_GOAL} -Dsonar.host.url=${SONAR_HOST_URL} -Dsonar.login=${SONAR_AUTH_TOKEN}\"\n            }"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "anyOf",
                    "children": [
                      {
                        "name": "branch",
                        "arguments": {
                          "isLiteral": true,
                          "value": "master"
                        }
                      },
                      {
                        "name": "branch",
                        "arguments": {
                          "isLiteral": true,
                          "value": "develop"
                        }
                      }
                    ]
                  },
                  {
                    "name": "environment",
                    "arguments": [
                      {
                        "key": "name",
                        "value": {
                          "isLiteral": true,
                          "value": "CHANGE_URL"
                        }
                      },
                      {
                        "key": "value",
                        "value": {
                          "isLiteral": true,
                          "value": ""
                        }
                      }
                    ]
                  }
                ]
              }
            },
            {
              "name": "package",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "container",
                      "arguments": {
                        "isLiteral": true,
                        "value": "maven-runner"
                      },
                      "children": [
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "mvn -B -DskipTests=true clean package"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "result",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "currentBuild.result = 'SUCCESS'"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "post": {
            "conditions": [
              {
                "condition": "failure",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "slackSend",
                      "arguments": [
                        {
                          "key": "color",
                          "value": {
                            "isLiteral": true,
                            "value": "danger"
                          }
                        },
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": false,
                            "value": "\"${env.JOB_NAME} - #${env.BUILD_NUMBER} Failure (<${env.BUILD_URL}|Open>)\""
                          }
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "condition": "unstable",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "slackSend",
                      "arguments": [
                        {
                          "key": "color",
                          "value": {
                            "isLiteral": true,
                            "value": "warning"
                          }
                        },
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": false,
                            "value": "\"${env.JOB_NAME} - #${env.BUILD_NUMBER} Unstable (<${env.BUILD_URL}|Open>)\""
                          }
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "condition": "changed",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "if('SUCCESS'.equals(currentBuild.result)) {\n          slackSend color: 'good', message: \"${env.JOB_NAME} - #${env.BUILD_NUMBER} Back to normal (<${env.BUILD_URL}|Open>)\"\n        }"
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          },
          "agent": {
            "type": "label",
            "argument": {
              "isLiteral": true,
              "value": "maven"
            }
          },
          "options": {
            "options": [
              {
                "name": "buildDiscarder",
                "arguments": [
                  {
                    "name": "logRotator",
                    "arguments": [
                      {
                        "key": "numToKeepStr",
                        "value": {
                          "isLiteral": true,
                          "value": "5"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "name": "timeout",
                "arguments": [
                  {
                    "key": "time",
                    "value": {
                      "isLiteral": true,
                      "value": 2
                    }
                  },
                  {
                    "key": "unit",
                    "value": {
                      "isLiteral": true,
                      "value": "HOURS"
                    }
                  }
                ]
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "kstateome/lti-attendance",
      "repo_url": "https://github.com/kstateome/lti-attendance",
      "html_url_jenkinsfile": "https://github.com/kstateome/lti-attendance/blob/7c01ac5d88b402a81f087c452d09a8967aa6b1d4/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/56523179/git/blobs/f600be03c89ae805d8dd7de8c5bfd568d5ecef80",
      "jenkins_pipeline": [
        {
          "error": [
            "Tool type \"maven\" does not have an install of \"Maven 3.5\" configured - did you mean \"Jenkins_maven\"? @ line 26, column 15.",
            "Tool type \"jdk\" does not have an install of \"Java 8\" configured - did you mean \"null\"? @ line 27, column 13."
          ]
        }
      ]
    },
    {
      "full_repo_name": "Romeh/spring-boot-quickstart-archtype",
      "repo_url": "https://github.com/Romeh/spring-boot-quickstart-archtype",
      "html_url_jenkinsfile": "https://github.com/Romeh/spring-boot-quickstart-archtype/blob/08d3387ba3634f91e4ca531ed3acf0fb4847fc63/src/main/resources/archetype-resources/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/112929218/git/blobs/f0a33547f6bd64bb96c71ac8f2f65daa563750da",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Build with unit testing",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "echo 'Pulling...' + env.BRANCH_NAME\n                    def mvnHome = tool 'Maven 3.3.9'\n                    if (isUnix()) {\n                        def targetVersion = getDevVersion()\n                        print 'target build version...'\n                        print targetVersion\n                        sh \"'${mvnHome}/bin/mvn' -Dintegration-tests.skip=true -Dbuild.number=${targetVersion} clean package\"\n                        def pom = readMavenPom file: 'pom.xml'\n                        // get the current development version\n                        developmentArtifactVersion = \"${pom.version}-${targetVersion}\"\n                        print pom.version\n                        // execute the unit testing and collect the reports\n                        junit '**//*target/surefire-reports/TEST-*.xml'\n                        archive 'target*//*.jar'\n                    } else {\n                        bat(/\"${mvnHome}\\bin\\mvn\" -Dintegration-tests.skip=true clean package/)\n                        def pom = readMavenPom file: 'pom.xml'\n                        print pom.version\n                        junit '**//*target/surefire-reports/TEST-*.xml'\n                        archive 'target*//*.jar'\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Integration tests",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def mvnHome = tool 'Maven 3.3.9'\n                    if (isUnix()) {\n                        // just to trigger the integration test without unit testing\n                        sh \"'${mvnHome}/bin/mvn'  verify -Dunit-tests.skip=true\"\n                    } else {\n                        bat(/\"${mvnHome}\\bin\\mvn\" verify -Dunit-tests.skip=true/)\n                    }"
                          }
                        }
                      ]
                    },
                    {
                      "name": "cucumber",
                      "arguments": [
                        {
                          "key": "buildStatus",
                          "value": {
                            "isLiteral": true,
                            "value": null
                          }
                        },
                        {
                          "key": "fileIncludePattern",
                          "value": {
                            "isLiteral": true,
                            "value": "**/cucumber.json"
                          }
                        },
                        {
                          "key": "jsonReportDirectory",
                          "value": {
                            "isLiteral": true,
                            "value": "target"
                          }
                        },
                        {
                          "key": "sortingMethod",
                          "value": {
                            "isLiteral": true,
                            "value": "ALPHABETICAL"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Sonar scan execution",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def mvnHome = tool 'Maven 3.3.9'\n                    withSonarQubeEnv {\n\n                        sh \"'${mvnHome}/bin/mvn'  verify sonar:sonar -Dintegration-tests.skip=true -Dmaven.test.failure.ignore=true\"\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Sonar scan result check",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "timeout",
                      "arguments": [
                        {
                          "key": "time",
                          "value": {
                            "isLiteral": true,
                            "value": 2
                          }
                        },
                        {
                          "key": "unit",
                          "value": {
                            "isLiteral": true,
                            "value": "MINUTES"
                          }
                        }
                      ],
                      "children": [
                        {
                          "name": "retry",
                          "arguments": {
                            "isLiteral": true,
                            "value": 3
                          },
                          "children": [
                            {
                              "name": "script",
                              "arguments": [
                                {
                                  "key": "scriptBlock",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "def qg = waitForQualityGate()\n                            if (qg.status != 'OK') {\n                                error \"Pipeline aborted due to quality gate failure: ${qg.status}\"\n                            }"
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Development deploy approval and deployment",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "if (currentBuild.result == null || currentBuild.result == 'SUCCESS') {\n                        timeout(time: 3, unit: 'MINUTES') {\n                            // you can use the commented line if u have specific user group who CAN ONLY approve\n                            //input message:'Approve deployment?', submitter: 'it-ops'\n                            input message: 'Approve deployment?'\n                        }\n                        timeout(time: 2, unit: 'MINUTES') {\n                            //\n                            if (developmentArtifactVersion != null && !developmentArtifactVersion.isEmpty()) {\n                                // replace it with your application name or make it easily loaded from pom.xml\n                                def jarName = \"application-${developmentArtifactVersion}.jar\"\n                                echo \"the application is deploying ${jarName}\"\n                                // NOTE : CREATE your deployemnt JOB, where it can take parameters whoch is the jar name to fetch from jenkins workspace\n                                build job: 'ApplicationToDev', parameters: [[$class: 'StringParameterValue', name: 'jarName', value: jarName]]\n                                echo 'the application is deployed !'\n                            } else {\n                                error 'the application is not  deployed as development version is null!'\n                            }\n\n                        }\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "DEV sanity check",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sleep",
                      "arguments": [
                        {
                          "key": "time",
                          "value": {
                            "isLiteral": true,
                            "value": 45
                          }
                        }
                      ]
                    },
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "if (currentBuild.result == null || currentBuild.result == 'SUCCESS') {\n                        timeout(time: 1, unit: 'MINUTES') {\n                            script {\n                                def mvnHome = tool 'Maven 3.3.9'\n                                //NOTE : if u change the sanity test class name , change it here as well\n                                sh \"'${mvnHome}/bin/mvn' -Dtest=ApplicationSanityCheck_ITT surefire:test\"\n                            }\n\n                        }\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Release and publish artifact",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def mvnHome = tool 'Maven 3.3.9' //\n                    if (currentBuild.result == null || currentBuild.result == 'SUCCESS') {\n                        def v = getReleaseVersion()\n                        releasedVersion = v;\n                        if (v) {\n                            echo \"Building version ${v} - so released version is ${releasedVersion}\"\n                        }\n                        // jenkins user credentials ID which is transparent to the user and password change\n                        sshagent(['0000000-3b5a-454e-a8e6-c6b6114d36000']) {\n                            sh \"git tag -f v${v}\"\n                            sh \"git push -f --tags\"\n                        }\n                        sh \"'${mvnHome}/bin/mvn' -Dmaven.test.skip=true  versions:set  -DgenerateBackupPoms=false -DnewVersion=${v}\"\n                        sh \"'${mvnHome}/bin/mvn' -Dmaven.test.skip=true clean deploy\"\n\n                    } else {\n                        error \"Release is not possible. as build is not successful\"\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "branch",
                    "arguments": {
                      "isLiteral": true,
                      "value": "master"
                    }
                  }
                ]
              }
            },
            {
              "name": "Deploy to Acceptance",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "if (currentBuild.result == null || currentBuild.result == 'SUCCESS') {\n                        timeout(time: 3, unit: 'MINUTES') {\n                            //input message:'Approve deployment?', submitter: 'it-ops'\n                            input message: 'Approve deployment to UAT?'\n                        }\n                        timeout(time: 3, unit: 'MINUTES') {\n                            //  deployment job which will take the relasesed version\n                            if (releasedVersion != null && !releasedVersion.isEmpty()) {\n                                // make the applciation name for the jar configurable\n                                def jarName = \"application-${releasedVersion}.jar\"\n                                echo \"the application is deploying ${jarName}\"\n                                // NOTE : DO NOT FORGET to create your UAT deployment jar , check Job AlertManagerToUAT in Jenkins for reference\n                                // the deployemnt should be based into Nexus repo\n                                build job: 'AApplicationToACC', parameters: [[$class: 'StringParameterValue', name: 'jarName', value: jarName], [$class: 'StringParameterValue', name: 'appVersion', value: releasedVersion]]\n                                echo 'the application is deployed !'\n                            } else {\n                                error 'the application is not  deployed as released version is null!'\n                            }\n\n                        }\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "branch",
                    "arguments": {
                      "isLiteral": true,
                      "value": "master"
                    }
                  }
                ]
              }
            },
            {
              "name": "ACC E2E tests",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sleep",
                      "arguments": [
                        {
                          "key": "time",
                          "value": {
                            "isLiteral": true,
                            "value": 45
                          }
                        }
                      ]
                    },
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "if (currentBuild.result == null || currentBuild.result == 'SUCCESS') {\n                        timeout(time: 1, unit: 'MINUTES') {\n\n                            script {\n                                def mvnHome = tool 'Maven 3.3.9'\n                                // NOTE : if you change the test class name change it here as well\n                                sh \"'${mvnHome}/bin/mvn' -Dtest=ApplicationE2E surefire:test\"\n                            }\n\n                        }\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "branch",
                    "arguments": {
                      "isLiteral": true,
                      "value": "master"
                    }
                  }
                ]
              }
            }
          ],
          "post": {
            "conditions": [
              {
                "condition": "always",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "deleteDir",
                      "arguments": []
                    }
                  ]
                }
              },
              {
                "condition": "success",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sendEmail",
                      "arguments": {
                        "isLiteral": true,
                        "value": "Successful"
                      }
                    }
                  ]
                }
              },
              {
                "condition": "unstable",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sendEmail",
                      "arguments": {
                        "isLiteral": true,
                        "value": "Unstable"
                      }
                    }
                  ]
                }
              },
              {
                "condition": "failure",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sendEmail",
                      "arguments": {
                        "isLiteral": true,
                        "value": "Failed"
                      }
                    }
                  ]
                }
              }
            ]
          },
          "environment": [
            {
              "key": "EMAIL_RECIPIENTS",
              "value": {
                "isLiteral": true,
                "value": "mahmoud.romeh@test.com"
              }
            }
          ],
          "agent": {
            "type": "label",
            "argument": {
              "isLiteral": true,
              "value": "java8"
            }
          },
          "options": {
            "options": [
              {
                "name": "buildDiscarder",
                "arguments": [
                  {
                    "name": "logRotator",
                    "arguments": [
                      {
                        "key": "numToKeepStr",
                        "value": {
                          "isLiteral": true,
                          "value": "5"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "name": "timeout",
                "arguments": [
                  {
                    "key": "time",
                    "value": {
                      "isLiteral": true,
                      "value": 25
                    }
                  },
                  {
                    "key": "unit",
                    "value": {
                      "isLiteral": true,
                      "value": "MINUTES"
                    }
                  }
                ]
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "jaegertracing/jaeger-performance",
      "repo_url": "https://github.com/jaegertracing/jaeger-performance",
      "html_url_jenkinsfile": "https://github.com/jaegertracing/jaeger-performance/blob/3393315f16b073009cd0712cb57f1aed9a4be3ba/standalone/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/123000213/git/blobs/fcc07a015c9a2277400271666a5c82a5413cab48",
      "jenkins_pipeline": [
        {
          "error": [
            "Tool type \"maven\" does not have an install of \"maven-3.5.3\" configured - did you mean \"Jenkins_maven\"? @ line 4, column 15.",
            "Tool type \"jdk\" does not have an install of \"jdk8\" configured - did you mean \"null\"? @ line 5, column 13."
          ]
        }
      ]
    },
    {
      "full_repo_name": "ocpadm/MongoDB",
      "repo_url": "https://github.com/ocpadm/MongoDB",
      "html_url_jenkinsfile": "https://github.com/ocpadm/MongoDB/blob/66e400123c04bb141eb8e2af2903aa65d73b7071/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/101965859/git/blobs/81c5e9fe47c8a2b90138c906593c5eb171c0cb76",
      "jenkins_pipeline": [
        {
          "error": [
            "Tool type \"maven\" does not have an install of \"maven-3.3.9\" configured - did you mean \"Jenkins_maven\"? @ line 4, column 15.",
            "Tool type \"jdk\" does not have an install of \"jdk1.8.0_20\" configured - did you mean \"null\"? @ line 5, column 13."
          ]
        }
      ]
    },
    {
      "full_repo_name": "zhangcl2002/cicd3.1",
      "repo_url": "https://github.com/zhangcl2002/cicd3.1",
      "html_url_jenkinsfile": "https://github.com/zhangcl2002/cicd3.1/blob/773dea3849f6cea02d6b359a0c675ace146cfc89/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/113588210/git/blobs/d230a021bfe319944d27b0aefabab59edfc61518",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "clean work space",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "cleanWs",
                      "arguments": []
                    }
                  ]
                }
              ]
            },
            {
              "name": "Check Out Code",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "checkout",
                      "arguments": [
                        {
                          "key": "scm",
                          "value": {
                            "isLiteral": false,
                            "value": "[$class: 'GitSCM', branches: [[name: \"*/${env.branch}\"]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'gitlab-user', url: env.scm_url]]]"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Sonarqube Scan",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "withSonarQubeEnv",
                      "arguments": {
                        "isLiteral": true,
                        "value": "sonarqube"
                      },
                      "children": [
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "mvn org.sonarsource.scanner.maven:sonar-maven-plugin:3.2:sonar"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Compile&Package",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "mvn package"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Unit Test",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "unit test"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Generate Docker Image",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "dir",
                      "arguments": {
                        "isLiteral": true,
                        "value": "docker"
                      },
                      "children": [
                        {
                          "name": "checkout",
                          "arguments": [
                            {
                              "key": "scm",
                              "value": {
                                "isLiteral": false,
                                "value": "[$class: 'GitSCM', branches: [[name: \"*/${env.dockerfile_branch}\"]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'gitlab-user', url: env.dockerfile_loc_url]]]"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": false,
                            "value": "${'sed -i \\'s@$application@\\'\\\"'+env.application_name+'\\\"\\'@g\\' docker/'+env.deploy_type+'-dockerfile'}"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": false,
                            "value": "${'sed -i \\'s@$image_template@\\'\\\"'+env.image_template+'\\\"\\'@g\\' docker/'+env.deploy_type+'-dockerfile'}"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": false,
                            "value": "${'sed -i \\'s@$log4j_stdout@\\'\\\"'+env.log4j_stdout+'\\\"\\'@g\\' docker/'+env.deploy_type+'-dockerfile'}"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": false,
                            "value": "${'sed -i \\'s@$elk_server@\\'\\\"'+env.elk_server+'\\\"\\'@g\\' docker/'+env.deploy_type+'-dockerfile'}"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": false,
                            "value": "${'sed -i \\'s@$imagelibrary@\\'\\\"'+env.image_library+'\\\"\\'@g\\' docker/'+env.deploy_type+'-dockerfile'}"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": false,
                            "value": "${'sed -i \\'s@$baseimage@\\'\\\"'+env.baseimage+'\\\"\\'@g\\' docker/'+env.deploy_type+'-dockerfile'}"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": false,
                            "value": "${'sed -i \\'s@$java_opts@\\'\\\"'+env.java_opts+'\\\"\\'@g\\' docker/'+env.deploy_type+'-dockerfile'}"
                          }
                        }
                      ]
                    },
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "docker.withRegistry(env.docker_registry,'registry-user'){\n                          docker.withServer(env.docker_server) {\n                             sh 'docker login -u admin -p Harbor123456'\n                             docker.build(env.image_library+'/'+env.application_name,'-f docker/'+env.deploy_type+'-dockerfile .').push(env.docker_tag)\n                          }                                \n                      }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "K8s Deploy",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def targetClusters\n                      def branches = [:]\n                      \n                      if (env.targetK8sCluster == 'allPrivateCloudCluster'){\n                         targetClusters= [\"k8s-dev-primary\",\"k8s-dev-backup\"]\n                      }\n                      else if (env.targetK8sCluster == 'onlyPrimaryCluster'){\n                         targetClusters= [\"k8s-dev-primary\"]\n                      }\n                      else if (env.targetK8sCluster == 'onlyBackupCluster'){\n                         targetClusters= [\"k8s-dev-backup\"]\n                      }  \n                     else if (env.targetK8sCluster == 'aliCluster'){\n                        targetClusters= [\"ali-k8s-dev\"]\n                     }\n                     else if (env.targetK8sCluster == 'fijiZone'){\n                        targetClusters= [\"fiji-k8s-master\"]\n                     }\n                     else if (env.targetK8sCluster == 'balticZone'){\n                        targetClusters= [\"baltic-k8s-master\"]\n                     }                     \n                      \n                      dir('docker'){\n                         sh 'git clone '+env.ingress_scm_url\n                      }\n                      \n                      for (int i = 0; i <  targetClusters.size(); i++) {\n                          def index = i // fresh variable per iteration; i will be mutated\n                          branches[targetClusters.get(index)] = {\n                            dir('docker'){\n                               sh 'chmod +x k8s-deploy.sh'                      \n                               sh './k8s-deploy.sh ${image_library} ${application_name} ${replicas} ${configmap} ${storage} ${expose_service} ${domain_name} ${context_path} ${docker_tag} ${probe_path} '+targetClusters.get(index)+' ${ingress_scm_url} '\n                            }     \n                          }\n                      }                  \n                      branches.failFast = true\n                      parallel  branches  \n                      \n                      \n                      dir('docker/k8s-dev-ingress'){\n                         sh 'pwd && git add . && if git status | grep nothing > /dev/null; then echo \\'no change\\'; else git commit -m \\'update ingress yaml\\' && git push origin master; fi '\n                      }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Notify & Over",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "notify"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "post": {
            "conditions": [
              {
                "condition": "success",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "emailext",
                      "arguments": [
                        {
                          "key": "subject",
                          "value": {
                            "isLiteral": false,
                            "value": "\"Jenkins Job Success: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'\""
                          }
                        },
                        {
                          "key": "body",
                          "value": {
                            "isLiteral": false,
                            "value": "\"\"\"<p>Success: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>  <p>You Can check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>\"\"\""
                          }
                        },
                        {
                          "key": "recipientProviders",
                          "value": {
                            "isLiteral": false,
                            "value": "${[[$class: 'DevelopersRecipientProvider'],[$class: 'RequesterRecipientProvider'], [$class: 'UpstreamComitterRecipientProvider'], [$class: 'FailingTestSuspectsRecipientProvider'], [$class: 'FirstFailingBuildSuspectsRecipientProvider']]}"
                          }
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "condition": "failure",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "emailext",
                      "arguments": [
                        {
                          "key": "subject",
                          "value": {
                            "isLiteral": false,
                            "value": "\"FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'\""
                          }
                        },
                        {
                          "key": "body",
                          "value": {
                            "isLiteral": false,
                            "value": "\"\"\"<p>FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>  <p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>\"\"\""
                          }
                        },
                        {
                          "key": "recipientProviders",
                          "value": {
                            "isLiteral": false,
                            "value": "${[[$class: 'DevelopersRecipientProvider'],[$class: 'RequesterRecipientProvider'], [$class: 'UpstreamComitterRecipientProvider'], [$class: 'FailingTestSuspectsRecipientProvider'], [$class: 'FirstFailingBuildSuspectsRecipientProvider']]}"
                          }
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "condition": "unstable",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "This will run only if the run was marked as unstable"
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          },
          "environment": [
            {
              "key": "application_name",
              "value": {
                "isLiteral": true,
                "value": "appName"
              }
            },
            {
              "key": "scm_url",
              "value": {
                "isLiteral": false,
                "value": "\"http://gitlab.aegonthtf.com/research/${env.application_name}.git\""
              }
            },
            {
              "key": "branch",
              "value": {
                "isLiteral": false,
                "value": "\"${params.BRANCH}\""
              }
            },
            {
              "key": "replicas",
              "value": {
                "isLiteral": true,
                "value": 2
              }
            },
            {
              "key": "deploy_type",
              "value": {
                "isLiteral": true,
                "value": "traditional"
              }
            },
            {
              "key": "java_opts",
              "value": {
                "isLiteral": true,
                "value": "-server -Dfile.encoding=UTF-8 -Duser.timezone=Asia/Shanghai"
              }
            },
            {
              "key": "baseimage",
              "value": {
                "isLiteral": true,
                "value": "tomcat:7.0-oracle-jre7"
              }
            },
            {
              "key": "expose_service",
              "value": {
                "isLiteral": true,
                "value": "false"
              }
            },
            {
              "key": "domain_name",
              "value": {
                "isLiteral": true,
                "value": "domainName.aegonthtf.com"
              }
            },
            {
              "key": "context_path",
              "value": {
                "isLiteral": true,
                "value": "/"
              }
            },
            {
              "key": "probe_path",
              "value": {
                "isLiteral": false,
                "value": "${env.context_path}health"
              }
            },
            {
              "key": "configmap",
              "value": {
                "isLiteral": true,
                "value": "default-tomcat-config"
              }
            },
            {
              "key": "storage",
              "value": {
                "isLiteral": true,
                "value": "false"
              }
            },
            {
              "key": "image_template",
              "value": {
                "isLiteral": true,
                "value": "template-dev"
              }
            },
            {
              "key": "image_library",
              "value": {
                "isLiteral": true,
                "value": "aegonthtf-dev"
              }
            },
            {
              "key": "elk_server",
              "value": {
                "isLiteral": true,
                "value": "logcenter-dev.aegonthtf.com"
              }
            },
            {
              "key": "log4j_stdout",
              "value": {
                "isLiteral": true,
                "value": "ELK"
              }
            },
            {
              "key": "targetK8sCluster",
              "value": {
                "isLiteral": true,
                "value": "designated zone"
              }
            },
            {
              "key": "docker_registry",
              "value": {
                "isLiteral": true,
                "value": "https://registry.aegonthtf.com/"
              }
            },
            {
              "key": "docker_server",
              "value": {
                "isLiteral": true,
                "value": "tcp://10.72.241.179:2376"
              }
            },
            {
              "key": "dockerfile_loc_url",
              "value": {
                "isLiteral": true,
                "value": "http://itoadmin@gitlab.aegonthtf.com/dev/aegonthtf-tomcat-cicd-factory.git"
              }
            },
            {
              "key": "dockerfile_branch",
              "value": {
                "isLiteral": false,
                "value": "\"${env.application_name}\""
              }
            },
            {
              "key": "ingress_scm_url",
              "value": {
                "isLiteral": true,
                "value": "http://itoadmin@gitlab.aegonthtf.com/dev/k8s-dev-ingress.git"
              }
            },
            {
              "key": "docker_tag",
              "value": {
                "isLiteral": false,
                "value": "\"${BUILD_NUMBER}\""
              }
            }
          ],
          "agent": {
            "type": "any"
          },
          "parameters": {
            "parameters": [
              {
                "name": "string",
                "arguments": [
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "BRANCH"
                    }
                  },
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": true,
                      "value": "master"
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "è¯·è¾å¥å¾é¨ç½²çåæ¯ææ ç­¾"
                    }
                  }
                ]
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "thoth-station/result-api",
      "repo_url": "https://github.com/thoth-station/result-api",
      "html_url_jenkinsfile": "https://github.com/thoth-station/result-api/blob/98856e9890f9d1e247348087cbfc6e050d21d57f/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/118431279/git/blobs/2df42af643fd3f66b598b3f2d567197501f3cb24",
      "jenkins_pipeline": [
        {
          "error": "Invalid agent type \"kubernetes\" specified. Must be one of [docker, dockerfile, label, any, none] @ line 62, column 9."
        }
      ]
    },
    {
      "full_repo_name": "thoth-station/dependency-monkey",
      "repo_url": "https://github.com/thoth-station/dependency-monkey",
      "html_url_jenkinsfile": "https://github.com/thoth-station/dependency-monkey/blob/6a09629c80ce28449294b65e08bf4c7174ad4649/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/122620723/git/blobs/2f5cc1f8b93a04f7823cdac794632fe9fc92827b",
      "jenkins_pipeline": [
        {
          "error": "Invalid agent type \"kubernetes\" specified. Must be one of [docker, dockerfile, label, any, none] @ line 57, column 9."
        }
      ]
    },
    {
      "full_repo_name": "Catrobat/Catroid",
      "repo_url": "https://github.com/Catrobat/Catroid",
      "html_url_jenkinsfile": "https://github.com/Catrobat/Catroid/blob/d4790c11f84c6c15eb51faa2db3cf744cb2ca4e9/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/4475999/git/blobs/f2fc2e05cc05cfe8ea4668ee251d52be102c29b7",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Setup Android SDK",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "lock",
                      "arguments": {
                        "isLiteral": false,
                        "value": "\"update-android-sdk-on-${env.NODE_NAME}\""
                      },
                      "children": [
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": false,
                                "value": "\"jenkins_android_sdk_installer -g '${WORKSPACE}/${env.GRADLE_PROJECT_MODULE_NAME}/build.gradle' -s '${ANDROID_EMULATOR_IMAGE}'\""
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Static Analysis",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "./gradlew pmd checkstyle lint"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "post": {
                "conditions": [
                  {
                    "condition": "always",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "pmd",
                          "arguments": [
                            {
                              "key": "canComputeNew",
                              "value": {
                                "isLiteral": true,
                                "value": false
                              }
                            },
                            {
                              "key": "canRunOnFailed",
                              "value": {
                                "isLiteral": true,
                                "value": true
                              }
                            },
                            {
                              "key": "defaultEncoding",
                              "value": {
                                "isLiteral": true,
                                "value": ""
                              }
                            },
                            {
                              "key": "healthy",
                              "value": {
                                "isLiteral": true,
                                "value": ""
                              }
                            },
                            {
                              "key": "pattern",
                              "value": {
                                "isLiteral": false,
                                "value": "\"${env.GRADLE_PROJECT_MODULE_NAME}/build/reports/pmd.xml\""
                              }
                            },
                            {
                              "key": "unHealthy",
                              "value": {
                                "isLiteral": true,
                                "value": ""
                              }
                            },
                            {
                              "key": "unstableTotalAll",
                              "value": {
                                "isLiteral": true,
                                "value": "0"
                              }
                            }
                          ]
                        },
                        {
                          "name": "checkstyle",
                          "arguments": [
                            {
                              "key": "canComputeNew",
                              "value": {
                                "isLiteral": true,
                                "value": false
                              }
                            },
                            {
                              "key": "canRunOnFailed",
                              "value": {
                                "isLiteral": true,
                                "value": true
                              }
                            },
                            {
                              "key": "defaultEncoding",
                              "value": {
                                "isLiteral": true,
                                "value": ""
                              }
                            },
                            {
                              "key": "healthy",
                              "value": {
                                "isLiteral": true,
                                "value": ""
                              }
                            },
                            {
                              "key": "pattern",
                              "value": {
                                "isLiteral": false,
                                "value": "\"${env.GRADLE_PROJECT_MODULE_NAME}/build/reports/checkstyle.xml\""
                              }
                            },
                            {
                              "key": "unHealthy",
                              "value": {
                                "isLiteral": true,
                                "value": ""
                              }
                            },
                            {
                              "key": "unstableTotalAll",
                              "value": {
                                "isLiteral": true,
                                "value": "0"
                              }
                            }
                          ]
                        },
                        {
                          "name": "androidLint",
                          "arguments": [
                            {
                              "key": "canComputeNew",
                              "value": {
                                "isLiteral": true,
                                "value": false
                              }
                            },
                            {
                              "key": "canRunOnFailed",
                              "value": {
                                "isLiteral": true,
                                "value": true
                              }
                            },
                            {
                              "key": "defaultEncoding",
                              "value": {
                                "isLiteral": true,
                                "value": ""
                              }
                            },
                            {
                              "key": "healthy",
                              "value": {
                                "isLiteral": true,
                                "value": ""
                              }
                            },
                            {
                              "key": "pattern",
                              "value": {
                                "isLiteral": false,
                                "value": "\"${env.GRADLE_PROJECT_MODULE_NAME}/build/reports/lint*.xml\""
                              }
                            },
                            {
                              "key": "unHealthy",
                              "value": {
                                "isLiteral": true,
                                "value": ""
                              }
                            },
                            {
                              "key": "unstableTotalAll",
                              "value": {
                                "isLiteral": true,
                                "value": "0"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  }
                ]
              }
            },
            {
              "name": "Unit and Device tests",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": false,
                            "value": "\"jenkins_android_emulator_helper -C -P 'hw.camera:yes' -P 'hw.ramSize:800' -P 'hw.gpu.enabled:yes' -P 'hw.camera.front:emulated' -P 'hw.camera.back:emulated' -P 'hw.gps:yes' -i '${ANDROID_EMULATOR_IMAGE}' -s xhdpi\""
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "jenkins_android_emulator_helper -S -r 768x1280 -l en_US -c '-gpu swiftshader_indirect -no-boot-anim -noaudio'"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "jenkins_android_emulator_helper -W"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "jenkins_android_cmd_wrapper -I ./gradlew test connectedCatroidDebugAndroidTest -Pandroid.testInstrumentationRunnerArguments.package=org.catrobat.catroid.test"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": false,
                            "value": "\"mv ${env.GRADLE_PROJECT_MODULE_NAME}/build/outputs/androidTest-results ${env.GRADLE_PROJECT_MODULE_NAME}/build/outputs/androidTest-results1\""
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "jenkins_android_cmd_wrapper -I ./gradlew test connectedCatroidDebugAndroidTest -Pandroid.testInstrumentationRunnerArguments.class=org.catrobat.catroid.uiespresso.testsuites.PullRequestTriggerSuite"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "jenkins_android_emulator_helper -K"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "post": {
                "conditions": [
                  {
                    "condition": "always",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "junit",
                          "arguments": [
                            {
                              "key": "testResults",
                              "value": {
                                "isLiteral": true,
                                "value": "**/*TEST*.xml"
                              }
                            }
                          ]
                        },
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "jenkins_android_emulator_helper -K"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  }
                ]
              }
            },
            {
              "name": "Standalone-APK",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "./gradlew assembleStandaloneDebug -Pdownload='https://pocketcode.org/download/817.catrobat' -Papk_generator_enabled=true -Psuffix='generated821'"
                          }
                        }
                      ]
                    },
                    {
                      "name": "archiveArtifacts",
                      "arguments": [
                        {
                          "key": "artifacts",
                          "value": {
                            "isLiteral": false,
                            "value": "\"${env.APK_LOCATION_STANDALONE}\""
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Independent-APK",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": false,
                            "value": "\"./gradlew assembleCatroidDebug -Pindependent='Code Nightly #${BUILD_NUMBER}'\""
                          }
                        }
                      ]
                    },
                    {
                      "name": "stash",
                      "arguments": [
                        {
                          "key": "name",
                          "value": {
                            "isLiteral": true,
                            "value": "apk-independent"
                          }
                        },
                        {
                          "key": "includes",
                          "value": {
                            "isLiteral": false,
                            "value": "\"${env.APK_LOCATION_DEBUG}\""
                          }
                        }
                      ]
                    },
                    {
                      "name": "archiveArtifacts",
                      "arguments": [
                        {
                          "key": "artifacts",
                          "value": {
                            "isLiteral": false,
                            "value": "\"${env.APK_LOCATION_DEBUG}\""
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Upload to share",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "unstash",
                      "arguments": [
                        {
                          "key": "name",
                          "value": {
                            "isLiteral": true,
                            "value": "apk-independent"
                          }
                        }
                      ]
                    },
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "uploadFileToShare \"${env.APK_LOCATION_DEBUG}\", \"${env.CATROBAT_SHARE_APK_NAME}\""
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "branch",
                    "arguments": {
                      "isLiteral": false,
                      "value": "\"${env.CATROBAT_SHARE_UPLOAD_BRANCH}\""
                    }
                  }
                ]
              }
            }
          ],
          "post": {
            "conditions": [
              {
                "condition": "always",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "sendNotifications false"
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          },
          "environment": [
            {
              "key": "ANDROID_SDK_ROOT",
              "value": {
                "isLiteral": true,
                "value": "/usr/local/android-sdk"
              }
            },
            {
              "key": "ANDROID_SDK_HOME",
              "value": {
                "isLiteral": true,
                "value": "/"
              }
            },
            {
              "key": "GRADLE_USER_HOME",
              "value": {
                "isLiteral": false,
                "value": "\"/.gradle/${env.EXECUTOR_NUMBER}\""
              }
            },
            {
              "key": "JAVA_TOOL_OPTIONS",
              "value": {
                "isLiteral": true,
                "value": "-Duser.home=/tmp/"
              }
            },
            {
              "key": "ANDROID_EMULATOR_IMAGE",
              "value": {
                "isLiteral": true,
                "value": "system-images;android-24;default;x86_64"
              }
            },
            {
              "key": "GRADLE_PROJECT_MODULE_NAME",
              "value": {
                "isLiteral": true,
                "value": "catroid"
              }
            },
            {
              "key": "APK_LOCATION_DEBUG",
              "value": {
                "isLiteral": false,
                "value": "\"${env.GRADLE_PROJECT_MODULE_NAME}/build/outputs/apk/catroid/debug/catroid-catroid-debug.apk\""
              }
            },
            {
              "key": "APK_LOCATION_STANDALONE",
              "value": {
                "isLiteral": false,
                "value": "\"${env.GRADLE_PROJECT_MODULE_NAME}/build/outputs/apk/standalone/debug/catroid-standalone-debug.apk\""
              }
            },
            {
              "key": "CATROBAT_SHARE_UPLOAD_BRANCH",
              "value": {
                "isLiteral": true,
                "value": "develop"
              }
            },
            {
              "key": "CATROBAT_SHARE_APK_NAME",
              "value": {
                "isLiteral": false,
                "value": "\"org.catrobat.catroid_debug_${env.CATROBAT_SHARE_UPLOAD_BRANCH}_latest.apk\""
              }
            },
            {
              "key": "ANDROID_EMULATOR_HELPER_DEBUG",
              "value": {
                "isLiteral": true,
                "value": ""
              }
            },
            {
              "key": "ANDROID_HOME",
              "value": {
                "isLiteral": true,
                "value": "/usr/local/android-sdk"
              }
            },
            {
              "key": "ANDROID_SDK_LOCATION",
              "value": {
                "isLiteral": true,
                "value": "/usr/local/android-sdk"
              }
            },
            {
              "key": "ANDROID_NDK",
              "value": {
                "isLiteral": true,
                "value": ""
              }
            }
          ],
          "agent": {
            "type": "docker",
            "arguments": [
              {
                "key": "image",
                "value": {
                  "isLiteral": true,
                  "value": "redeamer/jenkins-android-helper:latest"
                }
              },
              {
                "key": "args",
                "value": {
                  "isLiteral": true,
                  "value": "--device /dev/kvm:/dev/kvm -v /var/local/container_shared/gradle/:/.gradle -v /var/local/container_shared/android-sdk:/usr/local/android-sdk -v /var/local/container_shared/android-home:/.android -v /var/local/container_shared/emulator_console_auth_token:/.emulator_console_auth_token -v /var/local/container_shared/analytics.settings:/analytics.settings -v /var/local/container_shared/analytics.settings:/analytics.settings"
                }
              }
            ]
          },
          "options": {
            "options": [
              {
                "name": "timeout",
                "arguments": [
                  {
                    "key": "time",
                    "value": {
                      "isLiteral": true,
                      "value": 2
                    }
                  },
                  {
                    "key": "unit",
                    "value": {
                      "isLiteral": true,
                      "value": "HOURS"
                    }
                  }
                ]
              },
              {
                "name": "timestamps",
                "arguments": []
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "bateau84/alpine_openjdk",
      "repo_url": "https://github.com/bateau84/alpine_openjdk",
      "html_url_jenkinsfile": "https://github.com/bateau84/alpine_openjdk/blob/4e56f520bbec351ccdfd11b30f4b0b59f7f17c87/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/55673908/git/blobs/7786c63b7882cae9f16f3d2728ce0ec90523fbb6",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Prepare",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "Preparing the build environment"
                          }
                        }
                      ]
                    },
                    {
                      "name": "checkout",
                      "arguments": [
                        {
                          "key": "scm",
                          "value": {
                            "isLiteral": false,
                            "value": "${scm}"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Branch Build",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def baseimage = docker.build(\"${env.DOCKER_REGISTRY}${env.DOCKER_REPOSITORY}/${env.DOCKER_IMAGE_NAME}:${env.GIT_BRANCH}-${env.GIT_COMMIT_ID}\", \"${env.DOCKER_ARGS}.\")\n                    baseimage.push()\n                    env.imageName = baseimage.imageName()"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "not",
                    "children": [
                      {
                        "name": "branch",
                        "arguments": {
                          "isLiteral": true,
                          "value": "master"
                        }
                      }
                    ]
                  }
                ]
              }
            },
            {
              "name": "Master Build",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def LINES = new File(env.WORKSPACE, env.RELEASE_FILE).readLines()\n                    for(int i = 0; i < LINES.size(); i++) {    \n                        echo \"[ \"+LINES[i]+\" ]\"\n\n                        def baseimage = docker.build(\"${env.DOCKER_REGISTRY}${env.DOCKER_REPOSITORY}/${env.DOCKER_IMAGE_NAME}:${LINES[i]}\", \"--build-arg OPENJDK_VERSION=${LINES[i]} ${env.DOCKER_ARGS}.\")\n                        baseimage.push()\n\n                        if (i == 0){\n                            baseimage.push(\"latest\")\n                        }\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "branch",
                    "arguments": {
                      "isLiteral": true,
                      "value": "master"
                    }
                  }
                ]
              }
            }
          ],
          "post": {
            "conditions": [
              {
                "condition": "always",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "deleteDir",
                      "arguments": []
                    }
                  ]
                }
              }
            ]
          },
          "environment": [
            {
              "key": "DOCKER_REGISTRY",
              "value": {
                "isLiteral": true,
                "value": "index.docker.io/"
              }
            },
            {
              "key": "DOCKER_REPOSITORY",
              "value": {
                "isLiteral": true,
                "value": "bateau"
              }
            },
            {
              "key": "DOCKER_IMAGE_NAME",
              "value": {
                "isLiteral": true,
                "value": "alpine_openjdk"
              }
            },
            {
              "key": "DOCKER_ARGS",
              "value": {
                "isLiteral": true,
                "value": "--no-cache --squash "
              }
            },
            {
              "key": "RELEASE_FILE",
              "value": {
                "isLiteral": true,
                "value": "releases"
              }
            },
            {
              "key": "GIT_COMMIT_ID",
              "value": {
                "isLiteral": false,
                "value": "${sh(returnStdout: true, script: \"git rev-parse --short HEAD\").trim()}"
              }
            },
            {
              "key": "GIT_BRANCH",
              "value": {
                "isLiteral": false,
                "value": "${sh(returnStdout: true, script: \"git rev-parse --abbrev-ref HEAD\").replace(\" \", \"-\").replace(\"/\", \"-\").replace(\".\", \"-\")}"
              }
            }
          ],
          "agent": {
            "type": "any"
          },
          "triggers": {
            "triggers": [
              {
                "name": "cron",
                "arguments": [
                  {
                    "isLiteral": true,
                    "value": "H H 1,15,30 1-11 *"
                  }
                ]
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "scaleway/image-tools",
      "repo_url": "https://github.com/scaleway/image-tools",
      "html_url_jenkinsfile": "https://github.com/scaleway/image-tools/blob/5898b654742e719b08b0ce0a09edfcd45918d8a0/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/25816353/git/blobs/14df344c0af39361a46a8f58291d08c7e42b529d",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Pull image source",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "dir",
                      "arguments": {
                        "isLiteral": true,
                        "value": "image"
                      },
                      "children": [
                        {
                          "name": "deleteDir",
                          "arguments": []
                        },
                        {
                          "name": "checkout",
                          "arguments": [
                            {
                              "key": "scm",
                              "value": {
                                "isLiteral": false,
                                "value": "[\n            $class: 'GitSCM',\n            poll: false,\n            branches: [[name: env.IMAGE_GIT_BRANCH ?: 'master' ]],\n            userRemoteConfigs: [[url: env.IMAGE_GIT_SOURCE]]\n          ]"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Set environment",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "manifest = readFile(\"${env.IMAGE_DIR_BASE}/manifest.json\")\n          manifest_data = new groovy.json.JsonSlurperClassic().parseText(manifest)\n          image_version = manifest_data['images'][env.IMAGE_VERSION]\n          env.IMAGE_DIR = env.IMAGE_DIR_BASE + '/' + image_version['directory']\n          env.MARKETPLACE_IMAGE_NAME = image_version['marketplace-name']\n          env.IMAGE_DISK_SIZE = \"50G\"\n          if (image_version.containsKey('options')) {\n            if (image_version['options'].containsKey('disk-size')) {\n              env.IMAGE_DISK_SIZE = image_version['options']['disk-size']\n            }\n          }\n          env.BUILD_OPTS = \"--pull\"\n          env.LOG_LEVEL = params.logLevel"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Log into Scaleway",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "withCredentials",
                      "arguments": {
                        "isLiteral": false,
                        "value": "${[usernamePassword(credentialsId: 'scw-test-orga-token', usernameVariable: 'SCW_ORGANIZATION', passwordVariable: 'SCW_TOKEN')]}"
                      },
                      "children": [
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "scw login -o \"$SCW_ORGANIZATION\" -t \"$SCW_TOKEN\" -s >/dev/null 2>&1"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Create image on Scaleway",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "for (String arch in image_version['architectures']) {\n            echo \"Creating image for $arch\"\n            sh \"make ARCH=$arch IMAGE_DIR=${env.IMAGE_DIR} EXPORT_DIR=${env.EXPORT_DIR_BASE}/$arch BUILD_OPTS='${env.BUILD_OPTS}' scaleway_image\"\n            script {\n              imageId = readFile(\"${env.EXPORT_DIR_BASE}/$arch/image_id\").trim()\n              docker_tags = readFile(\"${env.EXPORT_DIR_BASE}/$arch/docker_tags\").trim().split('\\n')\n              images.add([\n                arch: arch,\n                id: imageId,\n                docker_tags: docker_tags\n              ])\n            }\n          }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Test the images",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "for (Map image : images) {\n            sh \"make tests IMAGE_DIR=${env.IMAGE_DIR} EXPORT_DIR=${env.EXPORT_DIR_BASE}/${image['arch']} ARCH=${image['arch']} IMAGE_ID=${image['id']} TESTS_DIR=${env.IMAGE_DIR}/tests NO_CLEANUP=${params.needAdminApproval}\"\n          }\n          if (env.needsAdminApproval) {\n            input \"Confirm that the images are stable ?\"\n          }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "expression",
                    "arguments": [
                      {
                        "key": "scriptBlock",
                        "value": {
                          "isLiteral": true,
                          "value": "params.test == true"
                        }
                      }
                    ]
                  }
                ]
              },
              "post": {
                "conditions": [
                  {
                    "condition": "always",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "script",
                          "arguments": [
                            {
                              "key": "scriptBlock",
                              "value": {
                                "isLiteral": true,
                                "value": "if (env.needsAdminApproval) {\n              for (Map image : images) {\n                sh \"scripts/test_images.sh stop ${env.EXPORT_DIR_BASE}/${image['arch']}/${image['id']}.servers\"\n              }\n            }"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  }
                ]
              }
            },
            {
              "name": "Release the image",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'DOCKERHUB_USER', passwordVariable: 'DOCKERHUB_PASSWD')]) {\n            sh 'echo -n \"$DOCKERHUB_PASSWD\" | docker login -u \"$DOCKERHUB_USER\" --password-stdin'\n          }\n          for (image in images) {\n            for (tag in image['docker_tags']) {\n              sh \"docker push ${tag}\"\n            }\n            removable_tags.add(image['docker_tags'][-1])\n            image.remove('docker_tags')\n          }\n          message = groovy.json.JsonOutput.toJson([\n            type: \"image\",\n            data: [\n              marketplace_id: image_version['marketplace-id'],\n              versions: images\n            ]\n          ])\n          versionId = input(\n            message: \"${message}\",\n            parameters: [string(name: 'image_id', description: 'ID of the new image version')]\n          )"
                          }
                        }
                      ]
                    },
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": false,
                            "value": "\"Created new marketplace version of image: ${versionId}\""
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "expression",
                    "arguments": [
                      {
                        "key": "scriptBlock",
                        "value": {
                          "isLiteral": true,
                          "value": "params.release == true"
                        }
                      }
                    ]
                  }
                ]
              }
            }
          ],
          "post": {
            "conditions": [
              {
                "condition": "always",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "deleteDir",
                      "arguments": []
                    },
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "sh \"docker image rm ${removable_tags.join(' ')} && docker system prune -f\""
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          },
          "environment": [
            {
              "key": "SSH_KEY_FILE",
              "value": {
                "isLiteral": false,
                "value": "\"${env.HOME}/.ssh/id_worker\""
              }
            },
            {
              "key": "IMAGE_DIR_BASE",
              "value": {
                "isLiteral": false,
                "value": "\"${env.WORKSPACE}/image\""
              }
            },
            {
              "key": "EXPORT_DIR_BASE",
              "value": {
                "isLiteral": false,
                "value": "\"${env.WORKSPACE}/export\""
              }
            }
          ],
          "agent": {
            "type": "label",
            "argument": {
              "isLiteral": true,
              "value": "worker&&docker"
            }
          },
          "options": {
            "options": [
              {
                "name": "buildDiscarder",
                "arguments": [
                  {
                    "name": "logRotator",
                    "arguments": [
                      {
                        "key": "numToKeepStr",
                        "value": {
                          "isLiteral": true,
                          "value": "1"
                        }
                      }
                    ]
                  }
                ]
              }
            ]
          },
          "parameters": {
            "parameters": [
              {
                "name": "booleanParam",
                "arguments": [
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "test"
                    }
                  },
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": true,
                      "value": true
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "Test the image"
                    }
                  }
                ]
              },
              {
                "name": "booleanParam",
                "arguments": [
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "needAdminApproval"
                    }
                  },
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": true,
                      "value": false
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "Wait for admin approval after testing"
                    }
                  }
                ]
              },
              {
                "name": "booleanParam",
                "arguments": [
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "release"
                    }
                  },
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": true,
                      "value": true
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "Release the image"
                    }
                  }
                ]
              },
              {
                "name": "string",
                "arguments": [
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "logLevel"
                    }
                  },
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": true,
                      "value": "3"
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "Log level"
                    }
                  }
                ]
              }
            ]
          },
          "triggers": {
            "triggers": [
              {
                "name": "pollSCM",
                "arguments": [
                  {
                    "isLiteral": true,
                    "value": "H */2 * * *"
                  }
                ]
              },
              {
                "name": "cron",
                "arguments": [
                  {
                    "isLiteral": true,
                    "value": "H H H * *"
                  }
                ]
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "prashant2402/gs-spring-boot",
      "repo_url": "https://github.com/prashant2402/gs-spring-boot",
      "html_url_jenkinsfile": "https://github.com/prashant2402/gs-spring-boot/blob/a81020042b8f62f00e7377b00272acc9d2a6f7bf/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/119062110/git/blobs/430a5366ac5b6da66a260290a0b822647a47b8f3",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Checkout from GIT",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "checkout",
                      "arguments": [
                        {
                          "key": "scm",
                          "value": {
                            "isLiteral": false,
                            "value": "${scm}"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Setup CI/CD Environment",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": false,
                            "value": "\"GIT Branch is ${env.BRANCH_NAME}\""
                          }
                        }
                      ]
                    },
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "if (env.BRANCH_NAME.contains(\"tags\")) {\n                        hlSetEnv('IMAGE_TAG', hlCreateTagName('pom:version'))\n                        hlSetEnv('APP_NAME', 'gs-spring-boot')\n                        hlSetEnv('CONFIG_LABEL', 'master')\n                    } else {\n                        hlSetEnv('IMAGE_TAG', 'latest')\n                        hlSetEnv('APP_NAME', 'gs-spring-boot')\n                        hlSetEnv('CONFIG_LABEL', 'master')\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Build source",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "\n                mvn -B clean install -DskipTests -DargLine=\"-Xmx256m\"\n                "
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "environment": [
                {
                  "key": "MAVEN_OPTS",
                  "value": {
                    "isLiteral": true,
                    "value": "-Xmx256m"
                  }
                }
              ]
            },
            {
              "name": "Docker Build",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "unstash",
                      "arguments": [
                        {
                          "key": "name",
                          "value": {
                            "isLiteral": true,
                            "value": "app"
                          }
                        }
                      ]
                    },
                    {
                      "name": "hlBuildImage",
                      "arguments": [
                        {
                          "isLiteral": true,
                          "value": "JavaSECorporateImage"
                        },
                        {
                          "isLiteral": false,
                          "value": "[\n                    registry: '172.30.1.1:5000',\n                    project: 'cicd-pipeline-uk-reference-dev',\n                    appName: APP_NAME,\n                    dockerCredentialId: \"builder\",\n                    buildUsingDocker: true\n                ]"
                        }
                      ]
                    }
                  ]
                }
              ],
              "agent": {
                "type": "label",
                "argument": {
                  "isLiteral": true,
                  "value": "docker"
                }
              }
            },
            {
              "name": "Deploy Image to Docker",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "hlDeployImage",
                      "arguments": [
                        {
                          "isLiteral": true,
                          "value": "JavaSECorporateImage"
                        },
                        {
                          "isLiteral": false,
                          "value": "[\n                    registry: '172.30.1.1:5000',\n                    project: 'myproject',\n                    appName: APP_NAME,\n                    imagePullPolicy: \"Always\",\n                    livenessProbe:[httpGet:[path:\"/\",port:8080,scheme:\"HTTP\"],initialDelaySeconds:30,timeoutSeconds:10,periodSeconds:10,successThreshold:1,failureThreshold:3],\n                    readinessProbe:[httpGet:[path:\"/\",port:8080,scheme:\"HTTP\"],initialDelaySeconds:30,timeoutSeconds:10,periodSeconds:10,successThreshold:1,failureThreshold:3],\n                ]"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Verify Service",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "openshiftVerifyService",
                      "arguments": [
                        {
                          "key": "svcName",
                          "value": {
                            "isLiteral": false,
                            "value": "${APP_NAME}"
                          }
                        },
                        {
                          "key": "verbose",
                          "value": {
                            "isLiteral": true,
                            "value": "false"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "post": {
            "conditions": [
              {
                "condition": "always",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "echo \"All stages finished running\""
                          }
                        }
                      ]
                    },
                    {
                      "name": "junit",
                      "arguments": [
                        {
                          "key": "testResults",
                          "value": {
                            "isLiteral": true,
                            "value": "**/target/surefire-reports/*.xml"
                          }
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "condition": "success",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "echo 'Job finished successfully'"
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          },
          "agent": {
            "type": "label",
            "argument": {
              "isLiteral": true,
              "value": "maven"
            }
          },
          "options": {
            "options": [
              {
                "name": "skipDefaultCheckout",
                "arguments": []
              },
              {
                "name": "disableConcurrentBuilds",
                "arguments": []
              },
              {
                "name": "timeout",
                "arguments": [
                  {
                    "key": "time",
                    "value": {
                      "isLiteral": true,
                      "value": 1
                    }
                  },
                  {
                    "key": "unit",
                    "value": {
                      "isLiteral": true,
                      "value": "HOURS"
                    }
                  }
                ]
              },
              {
                "name": "buildDiscarder",
                "arguments": [
                  {
                    "name": "logRotator",
                    "arguments": [
                      {
                        "key": "daysToKeepStr",
                        "value": {
                          "isLiteral": true,
                          "value": "2"
                        }
                      }
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "openshift/release",
      "repo_url": "https://github.com/openshift/release",
      "html_url_jenkinsfile": "https://github.com/openshift/release/blob/421ec1999a33ee18b24168b3e564564e3773e0e0/cluster/ci/origin/pipelines/test-build/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/75224144/git/blobs/8a5257ee7ef9a367ab4fdf23b3710659d9d671dc",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Configure Variables",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "this._buildName = buildName(this)\n          this._pushSecret = dockerCfgSecret(this, \"builder\")\n          this._jobId = \"test-build-${this._buildName}-${env.BUILD_NUMBER}\""
                          }
                        }
                      ]
                    },
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": false,
                            "value": "\"Build name is ${this._buildName}\""
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Create ImageStream",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "ensureImageStream",
                      "arguments": [
                        {
                          "isLiteral": false,
                          "value": "${this}"
                        },
                        {
                          "isLiteral": false,
                          "value": "\"${this._buildName}\""
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Clone",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "jitter(this, 0,30)\n          def activeBuilds = filterObjects(this, \"builds\", [\"build\":\"${this._buildName}\"], { obj ->\n            if (obj.metadata.labels != null && obj.metadata.labels[\"template\"] == \"clone-source\") {\n              if (obj.status.phase == \"New\" || obj.status.phase == \"Pending\" || obj.status.phase == \"Running\") {\n                return true\n              }\n            }\n            return false\n          })\n          if (activeBuilds.size() == 0) {\n            runAndWaitForBuild(this, \"\", {\n              return createTemplate(this, \"${templateBase}/clone-source.yaml\",\n                \"PUSH_SECRET_NAME=${this._pushSecret}\",\n                \"BUILD_NAME=${this._buildName}\",\n                \"PULL_REFS=${params.PULL_REFS}\",\n                \"PULL_NUMBER=${params.PULL_NUMBER}\",\n                \"BUILD_NUMBER=${env.BUILD_NUMBER}\",\n                \"REPO_OWNER=${params.REPO_OWNER}\",\n                \"REPO_NAME=${params.REPO_NAME}\",\n                \"JOB_ID=${this._jobId}\")\n            })\n          } else {\n            echo \"Skipping source build for ${this._buildName}. Another build is already running: ${activeBuilds[0].metadata.name}\"\n          }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "not",
                    "children": [
                      {
                        "name": "expression",
                        "arguments": [
                          {
                            "key": "scriptBlock",
                            "value": {
                              "isLiteral": true,
                              "value": "return imageStreamTagExists(this, \"${this._buildName}\", \"src\")"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            },
            {
              "name": "Compile",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "jitter(this, 0,30)\n          def activeBuilds = filterObjects(this, \"builds\", [\"build\":\"${this._buildName}\"], { obj ->\n            if (obj.metadata.labels != null && obj.metadata.labels[\"template\"] == \"test-compile\") {\n              if (obj.status.phase == \"New\" || obj.status.phase == \"Pending\" || obj.status.phase == \"Running\") {\n                return true\n              }\n            }\n            return false\n          })\n          if (activeBuilds.size() == 0) {\n            runAndWaitForBuild(this, \"\", {\n              return createTemplate(this, \"${templateBase}/test-compile.yaml\",\n                \"PUSH_SECRET_NAME=${this._pushSecret}\",\n                \"PULL_NUMBER=${params.PULL_NUMBER}\",\n                \"BUILD_NUMBER=${env.BUILD_NUMBER}\",\n                \"BUILD_NAME=${this._buildName}\",\n                \"JOB_ID=${this._jobId}\")\n            })\n          } else {\n            echo \"Skipping compile build for ${this._buildName}. Another build is already running: ${activeBuilds[0].metadata.name}\"\n          }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "not",
                    "children": [
                      {
                        "name": "expression",
                        "arguments": [
                          {
                            "key": "scriptBlock",
                            "value": {
                              "isLiteral": true,
                              "value": "return imageStreamTagExists(this, \"${this._buildName}\", \"test-binaries\")"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            }
          ],
          "post": {
            "conditions": [
              {
                "condition": "always",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "cleanupArtifacts",
                      "arguments": [
                        {
                          "isLiteral": false,
                          "value": "${this}"
                        },
                        {
                          "isLiteral": false,
                          "value": "[\"job-id\": \"${this._jobId}\"]"
                        }
                      ]
                    },
                    {
                      "name": "deleteWorkspace",
                      "arguments": {
                        "isLiteral": false,
                        "value": "${this}"
                      }
                    }
                  ]
                }
              }
            ]
          },
          "agent": {
            "type": "any"
          },
          "parameters": {
            "parameters": [
              {
                "name": "booleanParam",
                "arguments": [
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": false,
                      "value": "${env.BUILD_IMAGES==\"true\"||env.BUILD_IMAGES==\"yes\"}"
                    }
                  },
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "BUILD_IMAGES"
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "Set to 'true' if you wish to build images"
                    }
                  }
                ]
              },
              {
                "name": "string",
                "arguments": [
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": false,
                      "value": "\"${env.BUILD_ID}\""
                    }
                  },
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "buildId"
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "isLiteral": true,
                      "value": "The ID that prow sets on a Jenkins job in order to correlate it with a ProwJob"
                    }
                  }
                ]
              },
              {
                "name": "string",
                "arguments": [
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "REPO_OWNER"
                    }
                  },
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": false,
                      "value": "\"${env.REPO_OWNER ?: 'openshift'}\""
                    }
                  }
                ]
              },
              {
                "name": "string",
                "arguments": [
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "REPO_NAME"
                    }
                  },
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": false,
                      "value": "\"${env.REPO_NAME ?: 'origin'}\""
                    }
                  }
                ]
              },
              {
                "name": "string",
                "arguments": [
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "PULL_BASE_REF"
                    }
                  },
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": false,
                      "value": "\"${env.PULL_BASE_REF ?: ''}\""
                    }
                  }
                ]
              },
              {
                "name": "string",
                "arguments": [
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "PULL_BASE_SHA"
                    }
                  },
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": false,
                      "value": "\"${env.PULL_BASE_SHA ?: ''}\""
                    }
                  }
                ]
              },
              {
                "name": "string",
                "arguments": [
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "PULL_REFS"
                    }
                  },
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": false,
                      "value": "\"${env.PULL_REFS ?: 'master'}\""
                    }
                  }
                ]
              },
              {
                "name": "string",
                "arguments": [
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "PULL_NUMBER"
                    }
                  },
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": false,
                      "value": "\"${env.PULL_NUMBER ?: ''}\""
                    }
                  }
                ]
              },
              {
                "name": "string",
                "arguments": [
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "PULL_PULL_SHA"
                    }
                  },
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": false,
                      "value": "\"${env.PULL_PULL_SHA ?: ''}\""
                    }
                  }
                ]
              },
              {
                "name": "string",
                "arguments": [
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "RELEASE_SRC_URL"
                    }
                  },
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": false,
                      "value": "\"${env.RELEASE_SRC_URL ?: 'https://github.com/openshift/release.git'}\""
                    }
                  }
                ]
              },
              {
                "name": "string",
                "arguments": [
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "RELEASE_SRC_REF"
                    }
                  },
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": false,
                      "value": "\"${env.RELEASE_SRC_REF ?: 'master'}\""
                    }
                  }
                ]
              },
              {
                "name": "string",
                "arguments": [
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "RELEASE_LIBRARY_URL"
                    }
                  },
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": false,
                      "value": "\"${library_url}\""
                    }
                  }
                ]
              },
              {
                "name": "string",
                "arguments": [
                  {
                    "key": "name",
                    "value": {
                      "isLiteral": true,
                      "value": "RELEASE_LIBRARY_REF"
                    }
                  },
                  {
                    "key": "defaultValue",
                    "value": {
                      "isLiteral": false,
                      "value": "\"${library_ref}\""
                    }
                  }
                ]
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "thoth-station/naming-service",
      "repo_url": "https://github.com/thoth-station/naming-service",
      "html_url_jenkinsfile": "https://github.com/thoth-station/naming-service/blob/2a4ed635d207d23462031d034c34f3251d6b0347/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/130750070/git/blobs/4236378adc8b7ee611acb51a4c7c2648018ca9b2",
      "jenkins_pipeline": [
        {
          "error": "Invalid agent type \"kubernetes\" specified. Must be one of [docker, dockerfile, label, any, none] @ line 63, column 9."
        }
      ]
    },
    {
      "full_repo_name": "hyperledger/iroha",
      "repo_url": "https://github.com/hyperledger/iroha",
      "html_url_jenkinsfile": "https://github.com/hyperledger/iroha/blob/ed665deb84aba285e2dfc217188bba8a9cc5ce2e/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/67340575/git/blobs/6a6d71bf16041b310189147d56e174a5ba4db63d",
      "jenkins_pipeline": [
        {
          "error": "Invalid trigger type \"parameterizedCron\". Valid trigger types: [upstream, cron, bitbucketPush, gitlab, snapshotDependencies, githubPush, pollSCM] @ line 46, column 9."
        }
      ]
    },
    {
      "full_repo_name": "tyvision/iroha-feature-tests",
      "repo_url": "https://github.com/tyvision/iroha-feature-tests",
      "html_url_jenkinsfile": "https://github.com/tyvision/iroha-feature-tests/blob/48277278d4164c031b46c1229a870800e16d5505/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/118324276/git/blobs/7d854347142ece7602bd2cdcc626f42f14b0ba89",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Build Debug",
              "parallel": [
                {
                  "name": "Linux",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "script",
                          "arguments": [
                            {
                              "key": "scriptBlock",
                              "value": {
                                "isLiteral": true,
                                "value": "sh \"docker network create ${env.IROHA_NETWORK}\"\n\n                            def p_c = docker.image('postgres:9.5').run(\"\"\n                                + \" -e POSTGRES_USER=${env.IROHA_POSTGRES_USER}\"\n                                + \" -e POSTGRES_PASSWORD=${env.IROHA_POSTGRES_PASSWORD}\"\n                                + \" --name ${env.IROHA_POSTGRES_HOST}\"\n                                + \" --network=${env.IROHA_NETWORK}\")\n\n                            def r_c = docker.image('redis:3.2.8').run(\"\"\n                                + \" --name ${env.IROHA_REDIS_HOST}\"\n                                + \" --network=${env.IROHA_NETWORK}\")\n\n                            docker.image(\"${env.DOCKER_IMAGE}\").inside(\"\"\n                                + \" -e IROHA_POSTGRES_HOST=${env.IROHA_POSTGRES_HOST}\"\n                                + \" -e IROHA_POSTGRES_PORT=${env.IROHA_POSTGRES_PORT}\" \n                                + \" -e IROHA_POSTGRES_USER=${env.IROHA_POSTGRES_USER}\" \n                                + \" -e IROHA_POSTGRES_PASSWORD=${env.IROHA_POSTGRES_PASSWORD}\"\n                                + \" -e IROHA_REDIS_HOST=${env.IROHA_REDIS_HOST}\" \n                                + \" -e IROHA_REDIS_PORT=${env.IROHA_REDIS_PORT}\" \n                                + \" --network=${env.IROHA_NETWORK}\") {\n\n                                def scmVars = checkout scm\n                                env.IROHA_VERSION = \"0x${scmVars.GIT_COMMIT}\"\n                                env.IROHA_HOME = \"/opt/iroha\"\n                                env.IROHA_BUILD = \"/opt/iroha/build\"\n                                env.IROHA_RELEASE = \"${env.IROHA_HOME}/docker/release\"\n\n                                sh \"\"\"\n                                    ccache --version\n                                    ccache --show-stats\n                                    ccache --zero-stats\n                                    ccache --max-size=1G\n                                \"\"\"\n                                sh \"\"\"\n                                    cmake \\\n                                      -DCOVERAGE=ON \\\n                                      -DTESTING=ON \\\n                                      -H. \\\n                                      -Bbuild \\\n                                      -DCMAKE_BUILD_TYPE=${params.BUILD_TYPE} \\\n                                      -DIROHA_VERSION=${env.IROHA_VERSION}\n                                \"\"\"\n                                sh \"cmake --build build -- -j${params.PARALLELISM}\"\n                                sh \"ccache --cleanup\"\n                                sh \"ccache --show-stats\"\n\n                                sh \"cmake --build build --target test\"\n                                sh \"cmake --build build --target gcovr\"\n                                sh \"cmake --build build --target cppcheck\"\n\n                                // Dockerize\n                                \n                                def dockerize = load \".jenkinsci/dockerize.groovy\"\n                                dockerize.doDockerize()\n                                \n                                // Codecov\n                                sh \"bash <(curl -s https://codecov.io/bash) -f build/reports/gcovr.xml -t ${CODECOV_TOKEN} || echo 'Codecov did not collect coverage reports'\"\n\n                                // Sonar\n                                if (env.CHANGE_ID != null) {\n                                    sh \"\"\"\n                                        sonar-scanner \\\n                                            -Dsonar.github.disableInlineComments \\\n                                            -Dsonar.github.repository='hyperledger/iroha' \\\n                                            -Dsonar.analysis.mode=preview \\\n                                            -Dsonar.login=${SONAR_TOKEN} \\\n                                            -Dsonar.projectVersion=${BUILD_TAG} \\\n                                            -Dsonar.github.oauth=${SORABOT_TOKEN} \\\n                                            -Dsonar.github.pullRequest=${CHANGE_ID}\n                                    \"\"\"\n                                }\n\n                                //stash(allowEmpty: true, includes: 'build/compile_commands.json', name: 'Compile commands')\n                                //stash(allowEmpty: true, includes: 'build/reports/', name: 'Reports')\n                                archive(includes: 'build/bin/,compile_commands.json')\n                            }"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ],
                  "when": {
                    "conditions": [
                      {
                        "name": "expression",
                        "arguments": [
                          {
                            "key": "scriptBlock",
                            "value": {
                              "isLiteral": true,
                              "value": "return params.Linux"
                            }
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "name": "ARM",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "echo ARM build will be running there"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ],
                  "when": {
                    "conditions": [
                      {
                        "name": "expression",
                        "arguments": [
                          {
                            "key": "scriptBlock",
                            "value": {
                              "isLiteral": true,
                              "value": "return params.ARM"
                            }
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "name": "MacOS",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "MacOS build will be running there"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ],
                  "when": {
                    "conditions": [
                      {
                        "name": "expression",
                        "arguments": [
                          {
                            "key": "scriptBlock",
                            "value": {
                              "isLiteral": true,
                              "value": "return  params.MacOS"
                            }
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "expression",
                    "arguments": [
                      {
                        "key": "scriptBlock",
                        "value": {
                          "isLiteral": true,
                          "value": "params.BUILD_TYPE == 'Debug'"
                        }
                      }
                    ]
                  }
                ]
              }
            },
            {
              "name": "Build Release",
              "parallel": [
                {
                  "name": "Linux",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "script",
                          "arguments": [
                            {
                              "key": "scriptBlock",
                              "value": {
                                "isLiteral": true,
                                "value": "def scmVars = checkout scm\n                            env.IROHA_VERSION = \"0x${scmVars.GIT_COMMIT}\""
                              }
                            }
                          ]
                        },
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "\n                            ccache --version\n                            ccache --show-stats\n                            ccache --zero-stats\n                            ccache --max-size=1G\n                        "
                              }
                            }
                          ]
                        },
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": false,
                                "value": "\"\"\"\n                            cmake \\\n                              -DCOVERAGE=OFF \\\n                              -DTESTING=OFF \\\n                              -H. \\\n                              -Bbuild \\\n                              -DCMAKE_BUILD_TYPE=${params.BUILD_TYPE} \\\n                              -DPACKAGE_DEB=ON \\\n                              -DPACKAGE_TGZ=ON \\\n                              -DIROHA_VERSION=${IROHA_VERSION}\n                        \"\"\""
                              }
                            }
                          ]
                        },
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": false,
                                "value": "\"cmake --build build -- -j${params.PARALLELISM}\""
                              }
                            }
                          ]
                        },
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "ccache --cleanup"
                              }
                            }
                          ]
                        },
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "ccache --show-stats"
                              }
                            }
                          ]
                        },
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": false,
                                "value": "\"\"\"\n                        mv build/iroha-{*,linux}.deb && mv build/iroha-{*,linux}.tar.gz\n                        echo ${IROHA_VERSION} > version.txt\n                        \"\"\""
                              }
                            }
                          ]
                        },
                        {
                          "name": "archive",
                          "arguments": [
                            {
                              "key": "includes",
                              "value": {
                                "isLiteral": true,
                                "value": "build/iroha-linux.deb,build/iroha-linux.tar.gz,build/version.txt"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ],
                  "when": {
                    "conditions": [
                      {
                        "name": "expression",
                        "arguments": [
                          {
                            "key": "scriptBlock",
                            "value": {
                              "isLiteral": true,
                              "value": "return params.Linux"
                            }
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "name": "ARM",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "echo ARM build will be running there"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ],
                  "when": {
                    "conditions": [
                      {
                        "name": "expression",
                        "arguments": [
                          {
                            "key": "scriptBlock",
                            "value": {
                              "isLiteral": true,
                              "value": "return params.ARM"
                            }
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "name": "MacOS",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "MacOS build will be running there"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ],
                  "when": {
                    "conditions": [
                      {
                        "name": "expression",
                        "arguments": [
                          {
                            "key": "scriptBlock",
                            "value": {
                              "isLiteral": true,
                              "value": "return params.MacOS"
                            }
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "expression",
                    "arguments": [
                      {
                        "key": "scriptBlock",
                        "value": {
                          "isLiteral": true,
                          "value": "params.BUILD_TYPE == 'Release'"
                        }
                      }
                    ]
                  }
                ]
              }
            },
            {
              "name": "SonarQube",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": false,
                            "value": "\"\"\"\n                    if [ -n ${SONAR_TOKEN} ] && \\\n                      [ -n ${BUILD_TAG} ] && \\\n                      [ -n ${BRANCH_NAME} ]; then\n                      sonar-scanner \\\n                        -Dsonar.login=${SONAR_TOKEN} \\\n                        -Dsonar.projectVersion=${BUILD_TAG} \\\n                        -Dsonar.branch=${BRANCH_NAME}\n                    else\n                      echo 'required env vars not found'\n                    fi\n                \"\"\""
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "expression",
                    "arguments": [
                      {
                        "key": "scriptBlock",
                        "value": {
                          "isLiteral": true,
                          "value": "params.BUILD_TYPE == 'Release'"
                        }
                      }
                    ]
                  }
                ]
              }
            }
          ],
          "post": {
            "conditions": [
              {
                "condition": "always",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "sh \"\"\"\n                  docker stop $IROHA_POSTGRES_HOST $IROHA_REDIS_HOST\n                  docker rm $IROHA_POSTGRES_HOST $IROHA_REDIS_HOST\n                  docker network rm $IROHA_NETWORK\n                \"\"\""
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          },
          "environment": [
            {
              "key": "SORABOT_TOKEN",
              "value": {
                "name": "credentials",
                "arguments": [
                  {
                    "isLiteral": true,
                    "value": "SORABOT_TOKEN"
                  }
                ]
              }
            },
            {
              "key": "SONAR_TOKEN",
              "value": {
                "name": "credentials",
                "arguments": [
                  {
                    "isLiteral": true,
                    "value": "SONAR_TOKEN"
                  }
                ]
              }
            },
            {
              "key": "CODECOV_TOKEN",
              "value": {
                "name": "credentials",
                "arguments": [
                  {
                    "isLiteral": true,
                    "value": "CODECOV_TOKEN"
                  }
                ]
              }
            },
            {
              "key": "DOCKERHUB",
              "value": {
                "name": "credentials",
                "arguments": [
                  {
                    "isLiteral": true,
                    "value": "DOCKERHUB"
                  }
                ]
              }
            },
            {
              "key": "DOCKER_IMAGE",
              "value": {
                "isLiteral": true,
                "value": "hyperledger/iroha-docker-develop:v1"
              }
            },
            {
              "key": "IROHA_NETWORK",
              "value": {
                "isLiteral": false,
                "value": "\"iroha-${GIT_COMMIT}\""
              }
            },
            {
              "key": "IROHA_POSTGRES_HOST",
              "value": {
                "isLiteral": false,
                "value": "\"pg-${GIT_COMMIT}\""
              }
            },
            {
              "key": "IROHA_POSTGRES_USER",
              "value": {
                "isLiteral": false,
                "value": "\"pg-user-${GIT_COMMIT}\""
              }
            },
            {
              "key": "IROHA_POSTGRES_PASSWORD",
              "value": {
                "isLiteral": false,
                "value": "\"${GIT_COMMIT}\""
              }
            },
            {
              "key": "IROHA_REDIS_HOST",
              "value": {
                "isLiteral": false,
                "value": "\"redis-${GIT_COMMIT}\""
              }
            },
            {
              "key": "IROHA_POSTGRES_PORT",
              "value": {
                "isLiteral": true,
                "value": 5432
              }
            },
            {
              "key": "IROHA_REDIS_PORT",
              "value": {
                "isLiteral": true,
                "value": 6379
              }
            }
          ],
          "agent": {
            "type": "label",
            "argument": {
              "isLiteral": true,
              "value": "docker_1"
            }
          }
        }
      }
    },
    {
      "full_repo_name": "qorrect/shmenkins",
      "repo_url": "https://github.com/qorrect/shmenkins",
      "html_url_jenkinsfile": "https://github.com/qorrect/shmenkins/blob/5c2e475e508277021118855ae4f08e6816637362/Shmenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/115368783/git/blobs/5c8dbd0b625ab65ba7302eb169eaf2cbc12ed0c6",
      "jenkins_pipeline": [
        {
          "error": "Jenkinsfile content '#!/usr/bin/env groovy\n/**\n   From the Shmenkins project -> https://github.com/qorrect/shmenkins\n **/\n\nGroovyShell shell = new GroovyShell()\ndef Jenkinsfile = shell.parse(new File(\"Jenkinsfile\"))\n\n// SECTION TO CUSTOMIZE\n// Set required variables here\nJenkinsfile.MAVEN_SETTINGS = \"~/.m2/settings.xml\"\nJenkinsfile.env = [ BRANCH_NAME : \"test\"]\nJenkinsfile.params = [ DEPLOY_TARGET : \"Do not deploy\" ]\nJenkinsfile.currentBuild = [ number : 1  ]\n// End SECTION TO CUSTOMIZE\n\ndef expando(keys,v)\n{\n  if ( keys.size() == 0 ) { return v } \n  else if (keys.size() == 1 ) {\n    def k = keys.pop()\n    def x = new Expando()\n    x.setProperty(k,v)\n    return x \n  }\n  else {\n    def k = keys.pop()\n    def x = new Expando()\n    x.setProperty(k,expando(keys,v))\n    return x\n  }\n}\n\nargs.each { arg ->\n  def splits = arg.split(\"=\") as List \n  def k = splits[0], v=splits[1]\n  def keys = new ArrayDeque(k.split(\"\\\\.\") as List)\n  def firstKey = keys.pop()\n  Jenkinsfile.setProperty(firstKey,expando(keys,v))  \n}\n\n\n@Grab(group='org.apache.maven', module='maven-model', version='3.0.2')\n\nimport groovy.json.JsonSlurper;\nimport org.apache.maven.model.io.xpp3.MavenXpp3Reader\n\npublic class Shmenkins {\n\n  static def CURRENT_DIRECTORY = \"./\"\n  \n  static def configFile (Map o){}\n  static def configFileProvider (List l,Closure body){\n    body()\n  }  \n  static def fileLoader = new fileLoader()\n  static def scm = \"\"\n  static def containerTemplate(Map options ) {}\n  static def hostPathVolume(Map options ) {} \n  static def disableConcurrentBuilds() {}\n  static def choice (Map o){}\n  static def step (Map o){}\n  static def parameters (List l){}\n  static def booleanParam(Map m){}\n  static def writeFile(Map m){\n    new File(m[\"file\"]).write(m[\"text\"])\n  }\n  static def archiveArtifacts(Map m){}\n  static def string(Map m){}\n  static def git (Map o){}\n  static def checkout(String s) {}\n  static def junit(String s) {}\n  static def readFile(String s) {\n    return new File(s).text\n  }\n  static def readMavenPom(Map m) {\n    return new MavenXpp3Reader().read(new FileInputStream(new File(this.CURRENT_DIRECTORY,m[\"file\"])))\n  }\n  static def cron (String s){}\n  static def pipelineTriggers (List l){}\n  static def properties (List l){}\n  static def node (String n = \"\",Closure body)  {body()}\n  static def agent(String n = \"\",Closure body)  {body()}\n  static def stages(String n = \"\",Closure body)  {body()}\n  static def post(String n = \"\",Closure body)  {body()}\n  static def podTemplate(Map options, Closure body) {body() }\n  static def container(String s, Closure body){println(\"Container ${s}\");body() }\n  static def stage(String s, Closure body){println(\"Stage ${s}\");    body() }\n  static def stage(String s){println(\"Stage ${s}\")}\n  static def withCredentials(List l, Closure body) {println(\"WithCredentials ${l}\");    body() }\n  static def echo (String s) {println(s);}\n  static def sh(Map m) { return sh(m['script'] ) }\n  static def dir(String d,Closure f) {\n    this.CURRENT_DIRECTORY=d\n    f()\n    this.CURRENT_DIRECTORY=\"./\"\n  }\n  static def sh(String s) {\n      print(\"Executing cd ${this.CURRENT_DIRECTORY} && ${s}\\n(Waiting)\\n\")\n      def p = ['/bin/bash','-c',\"cd ${this.CURRENT_DIRECTORY} && ${s}\"].execute()\n      p.waitFor()\n      def ret = p.text\n      println ret\n      return ret\n  }\n}\n\nclass fileLoader {\n  static def fromGit(String libPath, String repository, String branch=\"\", String credentailsId=\"\", String labelExpression=\"\") {\n    GroovyShell shell = new GroovyShell()\n    def script = shell.evaluate(new File(libPath))\n\n    script.sh = { def s ->\n      if ((s instanceof Map)) {\n\ts = s[\"script\"]\n      }\n      print(\"Executing ${s}\\n\")\n      def p = ['/bin/bash','-c',s].execute()\n      p.waitFor()\n      def ret = p.text\n      println ret\n      return ret \n    }\n\n    // def script = shell.parse(new File(libPath))\n    return script\n    \n  }\n}\n\nJenkinsfile.metaClass.mixin Shmenkins\nJenkinsfile.run()\n' did not contain the 'pipeline' step"
        }
      ]
    },
    {
      "full_repo_name": "job-lukasz/test",
      "repo_url": "https://github.com/job-lukasz/test",
      "html_url_jenkinsfile": "https://github.com/job-lukasz/test/blob/992857ba2b86280e2051627afbefd45b304ecd15/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/101045311/git/blobs/aa1ceaa3b8d8d5e05b889810bd3235b3865ee462",
      "jenkins_pipeline": [
        {
          "error": [
            "unable to resolve class com.silvair.jenkinsci.Helpers.JSONWriter\n @ line 4, column 1.",
            "unable to resolve class com.silvair.jenkinsci.GitWrapper\n @ line 1, column 1.",
            "unable to resolve class com.silvair.jenkinsci.Helpers.LogLevel\n @ line 3, column 1."
          ]
        }
      ]
    },
    {
      "full_repo_name": "kangaroo-server/kangaroo-documentation",
      "repo_url": "https://github.com/kangaroo-server/kangaroo-documentation",
      "html_url_jenkinsfile": "https://github.com/kangaroo-server/kangaroo-documentation/blob/6812cfeadc7c7a5bb0fd09941da7bf81eead990c/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/110166383/git/blobs/30891cc96dd1e5d6a7817d161a3593039eb67bbe",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Stat",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "sh('''\n                        env\n                        /snap/bin/hugo version\n                        pygmentize -V\n                    ''')"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Build",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "/snap/bin/hugo"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Publish",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": false,
                            "value": "\"\"\"\n                    # Go To Public folder\n                    cd public\n\n                    # Add changes to git.\n                    git checkout master\n                    git add .\n\n                    # Commit changes.\n                    git commit -m \"Jenkins: Rebuilding site #${env.BUILD_NUMBER}\"\n\n                    # Push source and build repos.\n                    git push https://${GITHUB_USR}:${GITHUB_PSW}@github.com/kangaroo-server/kangaroo-server.github.io.git master\n                \"\"\""
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "expression",
                    "arguments": [
                      {
                        "key": "scriptBlock",
                        "value": {
                          "isLiteral": true,
                          "value": "env.BRANCH_NAME == 'master'"
                        }
                      }
                    ]
                  }
                ]
              },
              "environment": [
                {
                  "key": "GITHUB",
                  "value": {
                    "name": "credentials",
                    "arguments": [
                      {
                        "isLiteral": true,
                        "value": "krotscheck_jenkins_github_credentials"
                      }
                    ]
                  }
                }
              ]
            }
          ],
          "post": {
            "conditions": [
              {
                "condition": "changed",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def buildStatus = currentBuild.currentResult\n                def url = env.BUILD_URL, message, color\n\n                if (env.CHANGE_URL && buildStatus == 'SUCCESS') {\n                    url = env.CHANGE_URL\n                }\n\n                switch (buildStatus) {\n                    case 'FAILURE':\n                        message = \"Build <${url}|${env.JOB_NAME}> failed.\"\n                        color = '#AA0000'\n                        break\n                    case 'SUCCESS':\n                        message = \"Build <${url}|${env.JOB_NAME}> passed.\"\n                        color = '#00AA00'\n                        break\n                    case 'UNSTABLE':\n                    default:\n                        message = \"Build <${url}|${env.JOB_NAME}> unstable.\"\n                        color = '#FFAA00'\n                }\n\n                slackSend(\n                        channel: '#build-notifications',\n                        tokenCredentialId: 'kangaroo-server-slack-id',\n                        teamDomain: 'kangaroo-server',\n                        color: color,\n                        message: message\n                )"
                          }
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "condition": "always",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "cleanWs",
                      "arguments": [
                        {
                          "key": "deleteDirs",
                          "value": {
                            "isLiteral": true,
                            "value": true
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          },
          "agent": {
            "type": "label",
            "argument": {
              "isLiteral": true,
              "value": "worker"
            }
          },
          "options": {
            "options": [
              {
                "name": "timeout",
                "arguments": [
                  {
                    "key": "time",
                    "value": {
                      "isLiteral": true,
                      "value": 30
                    }
                  },
                  {
                    "key": "unit",
                    "value": {
                      "isLiteral": true,
                      "value": "MINUTES"
                    }
                  }
                ]
              },
              {
                "name": "buildDiscarder",
                "arguments": [
                  {
                    "name": "logRotator",
                    "arguments": [
                      {
                        "key": "numToKeepStr",
                        "value": {
                          "isLiteral": true,
                          "value": "5"
                        }
                      }
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "Amsterdam/atlas",
      "repo_url": "https://github.com/Amsterdam/atlas",
      "html_url_jenkinsfile": "https://github.com/Amsterdam/atlas/blob/d3b6880efb11256c7b67c8ad080fb3bd2c7968ab/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/60016458/git/blobs/5e45e82b3d41c02a019c2b87ac8a0bc332642460",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Deploy Bakkie",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": false,
                            "value": "\"scripts/bakkie.sh ${BRANCH_NAME}\""
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "not",
                    "children": [
                      {
                        "name": "branch",
                        "arguments": {
                          "isLiteral": true,
                          "value": "master"
                        }
                      }
                    ]
                  }
                ]
              },
              "options": {
                "options": [
                  {
                    "name": "timeout",
                    "arguments": [
                      {
                        "key": "time",
                        "value": {
                          "isLiteral": true,
                          "value": 5
                        }
                      },
                      {
                        "key": "unit",
                        "value": {
                          "isLiteral": true,
                          "value": "MINUTES"
                        }
                      }
                    ]
                  }
                ]
              }
            },
            {
              "name": "Linting",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": false,
                            "value": "\"docker-compose -p ${PROJECT} up --build --exit-code-from test-lint test-lint\""
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "post": {
                "conditions": [
                  {
                    "condition": "always",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": false,
                                "value": "\"docker-compose -p ${PROJECT} down -v || true\""
                              }
                            }
                          ]
                        }
                      ]
                    }
                  }
                ]
              },
              "environment": [
                {
                  "key": "PROJECT",
                  "value": {
                    "isLiteral": false,
                    "value": "\"${PROJECT_PREFIX}lint\""
                  }
                }
              ],
              "options": {
                "options": [
                  {
                    "name": "timeout",
                    "arguments": [
                      {
                        "key": "time",
                        "value": {
                          "isLiteral": true,
                          "value": 10
                        }
                      },
                      {
                        "key": "unit",
                        "value": {
                          "isLiteral": true,
                          "value": "MINUTES"
                        }
                      }
                    ]
                  }
                ]
              }
            },
            {
              "name": "Unit",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": false,
                            "value": "\"docker-compose -p ${PROJECT} up --build --exit-code-from test-unit test-unit\""
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "post": {
                "conditions": [
                  {
                    "condition": "always",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": false,
                                "value": "\"docker-compose -p ${PROJECT} down -v || true\""
                              }
                            }
                          ]
                        }
                      ]
                    }
                  }
                ]
              },
              "environment": [
                {
                  "key": "PROJECT",
                  "value": {
                    "isLiteral": false,
                    "value": "\"${PROJECT_PREFIX}unit\""
                  }
                }
              ],
              "options": {
                "options": [
                  {
                    "name": "timeout",
                    "arguments": [
                      {
                        "key": "time",
                        "value": {
                          "isLiteral": true,
                          "value": 10
                        }
                      },
                      {
                        "key": "unit",
                        "value": {
                          "isLiteral": true,
                          "value": "MINUTES"
                        }
                      }
                    ]
                  }
                ]
              }
            },
            {
              "name": "Functional E2E",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": false,
                            "value": "\"docker-compose -p ${PROJECT} up --build --exit-code-from test-e2e-functional test-e2e-functional\""
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "post": {
                "conditions": [
                  {
                    "condition": "always",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": false,
                                "value": "\"docker-compose -p ${PROJECT} down -v || true\""
                              }
                            }
                          ]
                        }
                      ]
                    }
                  }
                ]
              },
              "environment": [
                {
                  "key": "PROJECT",
                  "value": {
                    "isLiteral": false,
                    "value": "\"${PROJECT_PREFIX}e2e-functional\""
                  }
                },
                {
                  "key": "USERNAME_EMPLOYEE",
                  "value": {
                    "isLiteral": true,
                    "value": "atlas.employee@amsterdam.nl"
                  }
                },
                {
                  "key": "USERNAME_EMPLOYEE_PLUS",
                  "value": {
                    "isLiteral": true,
                    "value": "atlas.employee.plus@amsterdam.nl"
                  }
                },
                {
                  "key": "PASSWORD_EMPLOYEE",
                  "value": {
                    "name": "credentials",
                    "arguments": [
                      {
                        "isLiteral": true,
                        "value": "PASSWORD_EMPLOYEE"
                      }
                    ]
                  }
                },
                {
                  "key": "PASSWORD_EMPLOYEE_PLUS",
                  "value": {
                    "name": "credentials",
                    "arguments": [
                      {
                        "isLiteral": true,
                        "value": "PASSWORD_EMPLOYEE_PLUS"
                      }
                    ]
                  }
                }
              ],
              "options": {
                "options": [
                  {
                    "name": "timeout",
                    "arguments": [
                      {
                        "key": "time",
                        "value": {
                          "isLiteral": true,
                          "value": 30
                        }
                      },
                      {
                        "key": "unit",
                        "value": {
                          "isLiteral": true,
                          "value": "MINUTES"
                        }
                      }
                    ]
                  }
                ]
              }
            },
            {
              "name": "Aria E2E",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": false,
                            "value": "\"docker-compose -p ${PROJECT} up --build --exit-code-from test-e2e-aria test-e2e-aria\""
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "post": {
                "conditions": [
                  {
                    "condition": "always",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": false,
                                "value": "\"docker-compose -p ${PROJECT} down -v || true\""
                              }
                            }
                          ]
                        }
                      ]
                    }
                  }
                ]
              },
              "environment": [
                {
                  "key": "PROJECT",
                  "value": {
                    "isLiteral": false,
                    "value": "\"${PROJECT_PREFIX}e2e-aria\""
                  }
                }
              ],
              "options": {
                "options": [
                  {
                    "name": "timeout",
                    "arguments": [
                      {
                        "key": "time",
                        "value": {
                          "isLiteral": true,
                          "value": 20
                        }
                      },
                      {
                        "key": "unit",
                        "value": {
                          "isLiteral": true,
                          "value": "MINUTES"
                        }
                      }
                    ]
                  }
                ]
              }
            },
            {
              "name": "Build A",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": false,
                            "value": "${\"docker build -t ${IMAGE_BUILD} \"+\"--shm-size 1G \"+\"--build-arg BUILD_ENV=acc \"+\".\"}"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": false,
                            "value": "\"docker push ${IMAGE_BUILD}\""
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "branch",
                    "arguments": {
                      "isLiteral": true,
                      "value": "master"
                    }
                  }
                ]
              },
              "options": {
                "options": [
                  {
                    "name": "timeout",
                    "arguments": [
                      {
                        "key": "time",
                        "value": {
                          "isLiteral": true,
                          "value": 30
                        }
                      },
                      {
                        "key": "unit",
                        "value": {
                          "isLiteral": true,
                          "value": "MINUTES"
                        }
                      }
                    ]
                  }
                ]
              }
            },
            {
              "name": "Deploy A (Master)",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": false,
                            "value": "\"docker pull ${IMAGE_BUILD}\""
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": false,
                            "value": "\"docker tag ${IMAGE_BUILD} ${IMAGE_ACCEPTANCE}\""
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": false,
                            "value": "\"docker push ${IMAGE_ACCEPTANCE}\""
                          }
                        }
                      ]
                    },
                    {
                      "name": "build",
                      "arguments": [
                        {
                          "key": "job",
                          "value": {
                            "isLiteral": true,
                            "value": "Subtask_Openstack_Playbook"
                          }
                        },
                        {
                          "key": "parameters",
                          "value": {
                            "isLiteral": false,
                            "value": "${[\n          [$class: 'StringParameterValue', name: 'INVENTORY', value: 'acceptance'],\n          [$class: 'StringParameterValue', name: 'PLAYBOOK', value: 'deploy-client.yml']\n        ]}"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "branch",
                    "arguments": {
                      "isLiteral": true,
                      "value": "master"
                    }
                  }
                ]
              },
              "options": {
                "options": [
                  {
                    "name": "timeout",
                    "arguments": [
                      {
                        "key": "time",
                        "value": {
                          "isLiteral": true,
                          "value": 5
                        }
                      },
                      {
                        "key": "unit",
                        "value": {
                          "isLiteral": true,
                          "value": "MINUTES"
                        }
                      }
                    ]
                  }
                ]
              }
            },
            {
              "name": "Build P (Master)",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": false,
                            "value": "${\"docker build -t ${IMAGE_PRODUCTION} \"+\"--shm-size 1G \"+\".\"}"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": false,
                            "value": "\"docker tag ${IMAGE_PRODUCTION} ${IMAGE_LATEST}\""
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": false,
                            "value": "\"docker push ${IMAGE_PRODUCTION}\""
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": false,
                            "value": "\"docker push ${IMAGE_LATEST}\""
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "branch",
                    "arguments": {
                      "isLiteral": true,
                      "value": "master"
                    }
                  }
                ]
              },
              "options": {
                "options": [
                  {
                    "name": "timeout",
                    "arguments": [
                      {
                        "key": "time",
                        "value": {
                          "isLiteral": true,
                          "value": 30
                        }
                      },
                      {
                        "key": "unit",
                        "value": {
                          "isLiteral": true,
                          "value": "MINUTES"
                        }
                      }
                    ]
                  }
                ]
              }
            },
            {
              "name": "Deploy pre P (Master)",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "build",
                      "arguments": [
                        {
                          "key": "job",
                          "value": {
                            "isLiteral": true,
                            "value": "Subtask_Openstack_Playbook"
                          }
                        },
                        {
                          "key": "parameters",
                          "value": {
                            "isLiteral": false,
                            "value": "${[\n          [$class: 'StringParameterValue', name: 'INVENTORY', value: 'acceptance'],\n          [$class: 'StringParameterValue', name: 'PLAYBOOK', value: 'deploy-client-pre.yml']\n        ]}"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "branch",
                    "arguments": {
                      "isLiteral": true,
                      "value": "master"
                    }
                  }
                ]
              },
              "options": {
                "options": [
                  {
                    "name": "timeout",
                    "arguments": [
                      {
                        "key": "time",
                        "value": {
                          "isLiteral": true,
                          "value": 5
                        }
                      },
                      {
                        "key": "unit",
                        "value": {
                          "isLiteral": true,
                          "value": "MINUTES"
                        }
                      }
                    ]
                  }
                ]
              }
            },
            {
              "name": "Waiting for approval (Master)",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "input \"Deploy to Production?\"\n          echo \"Okay, moving on\""
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "branch",
                    "arguments": {
                      "isLiteral": true,
                      "value": "master"
                    }
                  }
                ]
              }
            },
            {
              "name": "Deploy P (Master)",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "build",
                      "arguments": [
                        {
                          "key": "job",
                          "value": {
                            "isLiteral": true,
                            "value": "Subtask_Openstack_Playbook"
                          }
                        },
                        {
                          "key": "parameters",
                          "value": {
                            "isLiteral": false,
                            "value": "${[\n          [$class: 'StringParameterValue', name: 'INVENTORY', value: 'production'],\n          [$class: 'StringParameterValue', name: 'PLAYBOOK', value: 'deploy-client.yml']\n        ]}"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "branch",
                    "arguments": {
                      "isLiteral": true,
                      "value": "master"
                    }
                  }
                ]
              },
              "options": {
                "options": [
                  {
                    "name": "timeout",
                    "arguments": [
                      {
                        "key": "time",
                        "value": {
                          "isLiteral": true,
                          "value": 5
                        }
                      },
                      {
                        "key": "unit",
                        "value": {
                          "isLiteral": true,
                          "value": "MINUTES"
                        }
                      }
                    ]
                  }
                ]
              }
            }
          ],
          "post": {
            "conditions": [
              {
                "condition": "success",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "Pipeline success"
                          }
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "condition": "failure",
                "branch": {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "Something went wrong while running pipeline"
                          }
                        }
                      ]
                    },
                    {
                      "name": "slackSend",
                      "arguments": [
                        {
                          "key": "channel",
                          "value": {
                            "isLiteral": true,
                            "value": "ci-channel"
                          }
                        },
                        {
                          "key": "color",
                          "value": {
                            "isLiteral": true,
                            "value": "danger"
                          }
                        },
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": false,
                            "value": "\"${JOB_NAME}: failure ${BUILD_URL}\""
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          },
          "environment": [
            {
              "key": "COMMIT_HASH",
              "value": {
                "isLiteral": false,
                "value": "${GIT_COMMIT.substring(0, 8)}"
              }
            },
            {
              "key": "PROJECT_PREFIX",
              "value": {
                "isLiteral": false,
                "value": "\"${BRANCH_NAME}_${COMMIT_HASH}_${BUILD_NUMBER}_\""
              }
            },
            {
              "key": "IMAGE_BASE",
              "value": {
                "isLiteral": true,
                "value": "build.datapunt.amsterdam.nl:5000/atlas/app"
              }
            },
            {
              "key": "IMAGE_BUILD",
              "value": {
                "isLiteral": false,
                "value": "\"${IMAGE_BASE}:${BUILD_NUMBER}\""
              }
            },
            {
              "key": "IMAGE_ACCEPTANCE",
              "value": {
                "isLiteral": false,
                "value": "\"${IMAGE_BASE}:acceptance\""
              }
            },
            {
              "key": "IMAGE_PRODUCTION",
              "value": {
                "isLiteral": false,
                "value": "\"${IMAGE_BASE}:production\""
              }
            },
            {
              "key": "IMAGE_LATEST",
              "value": {
                "isLiteral": false,
                "value": "\"${IMAGE_BASE}:latest\""
              }
            }
          ],
          "agent": {
            "type": "any"
          },
          "options": {
            "options": [
              {
                "name": "timeout",
                "arguments": [
                  {
                    "key": "time",
                    "value": {
                      "isLiteral": true,
                      "value": 5
                    }
                  },
                  {
                    "key": "unit",
                    "value": {
                      "isLiteral": true,
                      "value": "DAYS"
                    }
                  }
                ]
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "nemerosa/ontrack",
      "repo_url": "https://github.com/nemerosa/ontrack",
      "html_url_jenkinsfile": "https://github.com/nemerosa/ontrack/blob/48fe5c708dff48a0d67625a046d4ed9b014ca2b9/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/19351480/git/blobs/7e83b1adaa725f12d32d09da64f5f0490e8e5dc9",
      "jenkins_pipeline": {
        "pipeline": {
          "stages": [
            {
              "name": "Setup",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "branchName = ontrackBranchName(BRANCH_NAME)\n                    echo \"Ontrack branch name = ${branchName}\"\n                    pr = BRANCH_NAME ==~ 'PR-.*'"
                          }
                        }
                      ]
                    },
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "if (pr) {\n                        echo \"No Ontrack setup for PR.\"\n                    } else {\n                        echo \"Ontrack setup for ${branchName}\"\n                        ontrackBranchSetup(project: projectName, branch: branchName, script: \"\"\"\n                            branch.config {\n                                gitBranch '${branchName}', [\n                                    buildCommitLink: [\n                                        id: 'git-commit-property'\n                                    ]\n                                ]\n                            }\n                        \"\"\")\n                    }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "agent": {
                "type": "dockerfile",
                "arguments": [
                  {
                    "key": "label",
                    "value": {
                      "isLiteral": true,
                      "value": "docker"
                    }
                  },
                  {
                    "key": "args",
                    "value": {
                      "isLiteral": true,
                      "value": "--volume /var/run/docker.sock:/var/run/docker.sock"
                    }
                  }
                ]
              }
            },
            {
              "name": "Build",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "git checkout -B ${BRANCH_NAME}\ngit clean -xfd\n"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "./gradlew \\\n    clean \\\n    versionDisplay \\\n    versionFile \\\n    test \\\n    build \\\n    integrationTest \\\n    publishToMavenLocal \\\n    osPackages \\\n    dockerLatest \\\n    -Pdocumentation \\\n    -PbowerOptions='--allow-root' \\\n    -Dorg.gradle.jvmargs=-Xmx2048m \\\n    --stacktrace \\\n    --profile \\\n    --parallel \\\n    --console plain\n"
                          }
                        }
                      ]
                    },
                    {
                      "name": "script",
                      "arguments": [
                        {
                          "key": "scriptBlock",
                          "value": {
                            "isLiteral": true,
                            "value": "def props = readProperties(file: 'build/version.properties')\n                    version = props.VERSION_DISPLAY\n                    gitCommit = props.VERSION_COMMIT"
                          }
                        }
                      ]
                    },
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": false,
                            "value": "\"Version = ${version}\""
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": false,
                            "value": "\"\"\"\\\necho \"(*) Building the test extension...\"\ncd ontrack-extension-test\n./gradlew \\\\\n    clean \\\\\n    build \\\\\n    -PontrackVersion=${version} \\\\\n    -PbowerOptions='--allow-root' \\\\\n    -Dorg.gradle.jvmargs=-Xmx2048m \\\\\n    --stacktrace \\\\\n    --profile \\\\\n    --console plain\n\"\"\""
                          }
                        }
                      ]
                    },
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "Pushing image to registry..."
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": false,
                            "value": "\"\"\"\\\necho \\${DOCKER_REGISTRY_CREDENTIALS_PSW} | docker login docker.nemerosa.net --username \\${DOCKER_REGISTRY_CREDENTIALS_USR} --password-stdin\n\ndocker tag nemerosa/ontrack:${version} docker.nemerosa.net/nemerosa/ontrack:${version}\ndocker tag nemerosa/ontrack-acceptance:${version} docker.nemerosa.net/nemerosa/ontrack-acceptance:${version}\ndocker tag nemerosa/ontrack-extension-test:${version} docker.nemerosa.net/nemerosa/ontrack-extension-test:${version}\n\ndocker push docker.nemerosa.net/nemerosa/ontrack:${version}\ndocker push docker.nemerosa.net/nemerosa/ontrack-acceptance:${version}\ndocker push docker.nemerosa.net/nemerosa/ontrack-extension-test:${version}\n\"\"\""
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "agent": {
                "type": "dockerfile",
                "arguments": [
                  {
                    "key": "label",
                    "value": {
                      "isLiteral": true,
                      "value": "docker"
                    }
                  },
                  {
                    "key": "args",
                    "value": {
                      "isLiteral": true,
                      "value": "--volume /var/run/docker.sock:/var/run/docker.sock"
                    }
                  }
                ]
              },
              "post": {
                "conditions": [
                  {
                    "condition": "always",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "junit",
                          "arguments": [
                            {
                              "key": "testResults",
                              "value": {
                                "isLiteral": true,
                                "value": "**/build/test-results/**/*.xml"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  },
                  {
                    "condition": "success",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "script",
                          "arguments": [
                            {
                              "key": "scriptBlock",
                              "value": {
                                "isLiteral": true,
                                "value": "if (!pr) {\n                            ontrackBuild(project: projectName, branch: branchName, build: version, gitCommit: gitCommit)\n                        }"
                              }
                            }
                          ]
                        },
                        {
                          "name": "stash",
                          "arguments": [
                            {
                              "key": "name",
                              "value": {
                                "isLiteral": true,
                                "value": "delivery"
                              }
                            },
                            {
                              "key": "includes",
                              "value": {
                                "isLiteral": true,
                                "value": "build/distributions/ontrack-*-delivery.zip"
                              }
                            }
                          ]
                        },
                        {
                          "name": "stash",
                          "arguments": [
                            {
                              "key": "name",
                              "value": {
                                "isLiteral": true,
                                "value": "rpm"
                              }
                            },
                            {
                              "key": "includes",
                              "value": {
                                "isLiteral": true,
                                "value": "build/distributions/*.rpm"
                              }
                            }
                          ]
                        },
                        {
                          "name": "stash",
                          "arguments": [
                            {
                              "key": "name",
                              "value": {
                                "isLiteral": true,
                                "value": "debian"
                              }
                            },
                            {
                              "key": "includes",
                              "value": {
                                "isLiteral": true,
                                "value": "build/distributions/*.deb"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  }
                ]
              }
            },
            {
              "name": "Local acceptance tests",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "timeout",
                      "arguments": [
                        {
                          "key": "time",
                          "value": {
                            "isLiteral": true,
                            "value": 25
                          }
                        },
                        {
                          "key": "unit",
                          "value": {
                            "isLiteral": true,
                            "value": "MINUTES"
                          }
                        }
                      ],
                      "children": [
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "#!/bin/bash\nset -e\n\necho ${DOCKER_REGISTRY_CREDENTIALS_PSW} | docker login docker.nemerosa.net --username ${DOCKER_REGISTRY_CREDENTIALS_USR} --password-stdin\n\necho \"Launching tests...\"\ncd ontrack-acceptance/src/main/compose\ndocker-compose --project-name local up --exit-code-from ontrack_acceptance\n"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ],
              "agent": {
                "type": "dockerfile",
                "arguments": [
                  {
                    "key": "label",
                    "value": {
                      "isLiteral": true,
                      "value": "docker"
                    }
                  },
                  {
                    "key": "args",
                    "value": {
                      "isLiteral": true,
                      "value": "--volume /var/run/docker.sock:/var/run/docker.sock"
                    }
                  }
                ]
              },
              "post": {
                "conditions": [
                  {
                    "condition": "always",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "#!/bin/bash\nset -e\necho \"Cleanup...\"\nmkdir -p build\ncp -r ontrack-acceptance/src/main/compose/build build/acceptance\ncd ontrack-acceptance/src/main/compose\ndocker-compose --project-name local down --volumes\n"
                              }
                            }
                          ]
                        },
                        {
                          "name": "junit",
                          "arguments": [
                            {
                              "key": "testResults",
                              "value": {
                                "isLiteral": true,
                                "value": "build/acceptance/*.xml"
                              }
                            }
                          ]
                        },
                        {
                          "name": "script",
                          "arguments": [
                            {
                              "key": "scriptBlock",
                              "value": {
                                "isLiteral": true,
                                "value": "if (!pr) {\n                            ontrackValidate(\n                                    project: projectName,\n                                    branch: branchName,\n                                    build: version,\n                                    validationStamp: 'ACCEPTANCE',\n                                    buildResult: currentBuild.result,\n                            )\n                        }"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  }
                ]
              },
              "environment": [
                {
                  "key": "ONTRACK_VERSION",
                  "value": {
                    "isLiteral": false,
                    "value": "\"${version}\""
                  }
                }
              ]
            },
            {
              "name": "Platform tests",
              "parallel": [
                {
                  "name": "CentOS7",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "unstash",
                          "arguments": [
                            {
                              "key": "name",
                              "value": {
                                "isLiteral": true,
                                "value": "rpm"
                              }
                            }
                          ]
                        },
                        {
                          "name": "timeout",
                          "arguments": [
                            {
                              "key": "time",
                              "value": {
                                "isLiteral": true,
                                "value": 25
                              }
                            },
                            {
                              "key": "unit",
                              "value": {
                                "isLiteral": true,
                                "value": "MINUTES"
                              }
                            }
                          ],
                          "children": [
                            {
                              "name": "sh",
                              "arguments": [
                                {
                                  "key": "script",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "#!/bin/bash\nset -e\n\necho ${DOCKER_REGISTRY_CREDENTIALS_PSW} | docker login docker.nemerosa.net --username ${DOCKER_REGISTRY_CREDENTIALS_USR} --password-stdin\n\necho \"Preparing environment...\"\nDOCKER_DIR=ontrack-acceptance/src/main/compose/os/centos/7/docker\nrm -f ${DOCKER_DIR}/*.rpm\ncp build/distributions/*rpm ${DOCKER_DIR}/ontrack.rpm\n\necho \"Launching test environment...\"\ncd ontrack-acceptance/src/main/compose\ndocker-compose --project-name centos --file docker-compose-centos-7.yml up --build -d ontrack\n\necho \"Launching Ontrack in CentOS environment...\"\nCONTAINER=`docker-compose --project-name centos --file docker-compose-centos-7.yml ps -q ontrack`\necho \"... for container ${CONTAINER}\"\ndocker container exec ${CONTAINER} /etc/init.d/ontrack start\n\necho \"Launching tests...\"\ndocker-compose --project-name centos --file docker-compose-centos-7.yml up --exit-code-from ontrack_acceptance ontrack_acceptance\n"
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ],
                  "agent": {
                    "type": "dockerfile",
                    "arguments": [
                      {
                        "key": "label",
                        "value": {
                          "isLiteral": true,
                          "value": "docker"
                        }
                      },
                      {
                        "key": "args",
                        "value": {
                          "isLiteral": true,
                          "value": "--volume /var/run/docker.sock:/var/run/docker.sock"
                        }
                      }
                    ]
                  },
                  "post": {
                    "conditions": [
                      {
                        "condition": "always",
                        "branch": {
                          "name": "default",
                          "steps": [
                            {
                              "name": "sh",
                              "arguments": [
                                {
                                  "key": "script",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "#!/bin/bash\nset -e\necho \"Cleanup...\"\nmkdir -p build\ncp -r ontrack-acceptance/src/main/compose/build build/centos\ncd ontrack-acceptance/src/main/compose\ndocker-compose --project-name centos --file docker-compose-centos-7.yml down --volumes\n"
                                  }
                                }
                              ]
                            },
                            {
                              "name": "junit",
                              "arguments": [
                                {
                                  "key": "testResults",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "build/centos/*.xml"
                                  }
                                }
                              ]
                            },
                            {
                              "name": "ontrackValidate",
                              "arguments": [
                                {
                                  "key": "project",
                                  "value": {
                                    "isLiteral": false,
                                    "value": "${projectName}"
                                  }
                                },
                                {
                                  "key": "branch",
                                  "value": {
                                    "isLiteral": false,
                                    "value": "${branchName}"
                                  }
                                },
                                {
                                  "key": "build",
                                  "value": {
                                    "isLiteral": false,
                                    "value": "${version}"
                                  }
                                },
                                {
                                  "key": "validationStamp",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "ACCEPTANCE.CENTOS.7"
                                  }
                                },
                                {
                                  "key": "buildResult",
                                  "value": {
                                    "isLiteral": false,
                                    "value": "${currentBuild.result}"
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "Debian",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "unstash",
                          "arguments": [
                            {
                              "key": "name",
                              "value": {
                                "isLiteral": true,
                                "value": "debian"
                              }
                            }
                          ]
                        },
                        {
                          "name": "timeout",
                          "arguments": [
                            {
                              "key": "time",
                              "value": {
                                "isLiteral": true,
                                "value": 25
                              }
                            },
                            {
                              "key": "unit",
                              "value": {
                                "isLiteral": true,
                                "value": "MINUTES"
                              }
                            }
                          ],
                          "children": [
                            {
                              "name": "sh",
                              "arguments": [
                                {
                                  "key": "script",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "#!/bin/bash\nset -e\n\necho ${DOCKER_REGISTRY_CREDENTIALS_PSW} | docker login docker.nemerosa.net --username ${DOCKER_REGISTRY_CREDENTIALS_USR} --password-stdin\n\necho \"Preparing environment...\"\nDOCKER_DIR=ontrack-acceptance/src/main/compose/os/debian/docker\nrm -f ${DOCKER_DIR}/*.deb\ncp build/distributions/*.deb ${DOCKER_DIR}/ontrack.deb\n\necho \"Launching test environment...\"\ncd ontrack-acceptance/src/main/compose\ndocker-compose --project-name debian --file docker-compose-debian.yml up --build -d ontrack\n\necho \"Launching Ontrack in Debian environment...\"\nCONTAINER=`docker-compose --project-name debian --file docker-compose-debian.yml ps -q ontrack`\necho \"... for container ${CONTAINER}\"\ndocker container exec ${CONTAINER} /etc/init.d/ontrack start\n\necho \"Launching tests...\"\ndocker-compose --project-name debian --file docker-compose-debian.yml up --build --exit-code-from ontrack_acceptance ontrack_acceptance\n"
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ],
                  "agent": {
                    "type": "dockerfile",
                    "arguments": [
                      {
                        "key": "label",
                        "value": {
                          "isLiteral": true,
                          "value": "docker"
                        }
                      },
                      {
                        "key": "args",
                        "value": {
                          "isLiteral": true,
                          "value": "--volume /var/run/docker.sock:/var/run/docker.sock"
                        }
                      }
                    ]
                  },
                  "post": {
                    "conditions": [
                      {
                        "condition": "always",
                        "branch": {
                          "name": "default",
                          "steps": [
                            {
                              "name": "sh",
                              "arguments": [
                                {
                                  "key": "script",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "#!/bin/bash\nset -e\necho \"Cleanup...\"\nmkdir -p build/debian\ncp -r ontrack-acceptance/src/main/compose/build/* build/debian/\ncd ontrack-acceptance/src/main/compose\ndocker-compose --project-name debian --file docker-compose-debian.yml down --volumes\n"
                                  }
                                }
                              ]
                            },
                            {
                              "name": "junit",
                              "arguments": [
                                {
                                  "key": "testResults",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "build/debian/*.xml"
                                  }
                                }
                              ]
                            },
                            {
                              "name": "ontrackValidate",
                              "arguments": [
                                {
                                  "key": "project",
                                  "value": {
                                    "isLiteral": false,
                                    "value": "${projectName}"
                                  }
                                },
                                {
                                  "key": "branch",
                                  "value": {
                                    "isLiteral": false,
                                    "value": "${branchName}"
                                  }
                                },
                                {
                                  "key": "build",
                                  "value": {
                                    "isLiteral": false,
                                    "value": "${version}"
                                  }
                                },
                                {
                                  "key": "validationStamp",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "ACCEPTANCE.DEBIAN"
                                  }
                                },
                                {
                                  "key": "buildResult",
                                  "value": {
                                    "isLiteral": false,
                                    "value": "${currentBuild.result}"
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "Local extension tests",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "timeout",
                          "arguments": [
                            {
                              "key": "time",
                              "value": {
                                "isLiteral": true,
                                "value": 25
                              }
                            },
                            {
                              "key": "unit",
                              "value": {
                                "isLiteral": true,
                                "value": "MINUTES"
                              }
                            }
                          ],
                          "children": [
                            {
                              "name": "sh",
                              "arguments": [
                                {
                                  "key": "script",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "rm -rf ontrack-acceptance/src/main/compose/build\n"
                                  }
                                }
                              ]
                            },
                            {
                              "name": "sh",
                              "arguments": [
                                {
                                  "key": "script",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "#!/bin/bash\nset -e\n\necho ${DOCKER_REGISTRY_CREDENTIALS_PSW} | docker login docker.nemerosa.net --username ${DOCKER_REGISTRY_CREDENTIALS_USR} --password-stdin\n\necho \"Launching tests...\"\ncd ontrack-acceptance/src/main/compose\ndocker-compose --project-name ext --file docker-compose-ext.yml up --exit-code-from ontrack_acceptance\n"
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ],
                  "agent": {
                    "type": "dockerfile",
                    "arguments": [
                      {
                        "key": "label",
                        "value": {
                          "isLiteral": true,
                          "value": "docker"
                        }
                      },
                      {
                        "key": "args",
                        "value": {
                          "isLiteral": true,
                          "value": "--volume /var/run/docker.sock:/var/run/docker.sock"
                        }
                      }
                    ]
                  },
                  "post": {
                    "conditions": [
                      {
                        "condition": "always",
                        "branch": {
                          "name": "default",
                          "steps": [
                            {
                              "name": "sh",
                              "arguments": [
                                {
                                  "key": "script",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "echo \"Cleanup...\"\nmkdir -p build\nrm -rf build/extension\ncp -r ontrack-acceptance/src/main/compose/build build/extension\ncd ontrack-acceptance/src/main/compose\ndocker-compose --project-name ext --file docker-compose-ext.yml down --volumes\n"
                                  }
                                }
                              ]
                            },
                            {
                              "name": "junit",
                              "arguments": [
                                {
                                  "key": "testResults",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "build/extension/*.xml"
                                  }
                                }
                              ]
                            },
                            {
                              "name": "ontrackValidate",
                              "arguments": [
                                {
                                  "key": "project",
                                  "value": {
                                    "isLiteral": false,
                                    "value": "${projectName}"
                                  }
                                },
                                {
                                  "key": "branch",
                                  "value": {
                                    "isLiteral": false,
                                    "value": "${branchName}"
                                  }
                                },
                                {
                                  "key": "build",
                                  "value": {
                                    "isLiteral": false,
                                    "value": "${version}"
                                  }
                                },
                                {
                                  "key": "validationStamp",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "EXTENSIONS"
                                  }
                                },
                                {
                                  "key": "buildResult",
                                  "value": {
                                    "isLiteral": false,
                                    "value": "${currentBuild.result}"
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "Digital Ocean",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "timeout",
                          "arguments": [
                            {
                              "key": "time",
                              "value": {
                                "isLiteral": true,
                                "value": 60
                              }
                            },
                            {
                              "key": "unit",
                              "value": {
                                "isLiteral": true,
                                "value": "MINUTES"
                              }
                            }
                          ],
                          "children": [
                            {
                              "name": "sh",
                              "arguments": [
                                {
                                  "key": "script",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "#!/bin/bash\n\necho \"(*) Cleanup...\"\nrm -rf ontrack-acceptance/src/main/compose/build\n\necho \"(*) Removing any previous machine: ${DROPLET_NAME}...\"\ndocker-machine rm --force ${DROPLET_NAME} > /dev/null\n\n# Failing on first error from now on\nset -e\n\necho \"(*) Creating ${DROPLET_NAME} droplet...\"\ndocker-machine create \\\n    --driver=digitalocean \\\n    --digitalocean-access-token=${DO_TOKEN} \\\n    --digitalocean-image=docker \\\n    --digitalocean-region=fra1 \\\n    --digitalocean-size=1gb \\\n    --digitalocean-backups=false \\\n    ${DROPLET_NAME}\n\necho \"(*) Gets ${DROPLET_NAME} droplet IP...\"\nDROPLET_IP=`docker-machine ip ${DROPLET_NAME}`\necho \"Droplet IP = ${DROPLET_IP}\"\n\necho \"(*) Target Ontrack application...\"\nexport ONTRACK_ACCEPTANCE_TARGET_URL=\"http://${DROPLET_IP}:8080\"\n\necho \"(*) Launching the remote Ontrack ecosystem...\"\neval $(docker-machine env --shell bash ${DROPLET_NAME})\necho ${DOCKER_REGISTRY_CREDENTIALS_PSW} | docker login docker.nemerosa.net --username ${DOCKER_REGISTRY_CREDENTIALS_USR} --password-stdin\ndocker-compose \\\n    --file ontrack-acceptance/src/main/compose/docker-compose-do-server.yml \\\n    --project-name ontrack \\\n    up -d\n\necho \"(*) Running the tests...\"\neval $(docker-machine env --shell bash --unset)\necho ${DOCKER_REGISTRY_CREDENTIALS_PSW} | docker login docker.nemerosa.net --username ${DOCKER_REGISTRY_CREDENTIALS_USR} --password-stdin\ndocker-compose \\\n    --file ontrack-acceptance/src/main/compose/docker-compose-do-client.yml \\\n    --project-name do \\\n    up --exit-code-from ontrack_acceptance\n\n"
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ],
                  "agent": {
                    "type": "dockerfile",
                    "arguments": [
                      {
                        "key": "label",
                        "value": {
                          "isLiteral": true,
                          "value": "docker"
                        }
                      },
                      {
                        "key": "args",
                        "value": {
                          "isLiteral": true,
                          "value": "--volume /var/run/docker.sock:/var/run/docker.sock"
                        }
                      }
                    ]
                  },
                  "post": {
                    "conditions": [
                      {
                        "condition": "always",
                        "branch": {
                          "name": "default",
                          "steps": [
                            {
                              "name": "sh",
                              "arguments": [
                                {
                                  "key": "script",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "#!/bin/bash\n\necho \"(*) Copying the test results...\"\nmkdir -p build\nrm -rf build/do\ncp -r ontrack-acceptance/src/main/compose/build build/do\n\necho \"(*) Removing the test environment...\"\ndocker-compose \\\n    --file ontrack-acceptance/src/main/compose/docker-compose-do-client.yml \\\n    --project-name do \\\n    down\n\necho \"(*) Removing any previous machine: ${DROPLET_NAME}...\"\ndocker-machine rm --force ${DROPLET_NAME}\n"
                                  }
                                }
                              ]
                            },
                            {
                              "name": "junit",
                              "arguments": [
                                {
                                  "key": "testResults",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "build/do/*.xml"
                                  }
                                }
                              ]
                            },
                            {
                              "name": "ontrackValidate",
                              "arguments": [
                                {
                                  "key": "project",
                                  "value": {
                                    "isLiteral": false,
                                    "value": "${projectName}"
                                  }
                                },
                                {
                                  "key": "branch",
                                  "value": {
                                    "isLiteral": false,
                                    "value": "${branchName}"
                                  }
                                },
                                {
                                  "key": "build",
                                  "value": {
                                    "isLiteral": false,
                                    "value": "${version}"
                                  }
                                },
                                {
                                  "key": "validationStamp",
                                  "value": {
                                    "isLiteral": true,
                                    "value": "ACCEPTANCE.DO"
                                  }
                                },
                                {
                                  "key": "buildResult",
                                  "value": {
                                    "isLiteral": false,
                                    "value": "${currentBuild.result}"
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "environment": [
                    {
                      "key": "DROPLET_NAME",
                      "value": {
                        "isLiteral": false,
                        "value": "\"ontrack-acceptance-${version}\""
                      }
                    },
                    {
                      "key": "DO_TOKEN",
                      "value": {
                        "name": "credentials",
                        "arguments": [
                          {
                            "isLiteral": true,
                            "value": "DO_NEMEROSA_JENKINS2_BUILD"
                          }
                        ]
                      }
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "branch",
                    "arguments": {
                      "isLiteral": true,
                      "value": "release/*"
                    }
                  }
                ]
              },
              "environment": [
                {
                  "key": "ONTRACK_VERSION",
                  "value": {
                    "isLiteral": false,
                    "value": "\"${version}\""
                  }
                }
              ]
            },
            {
              "name": "Publication",
              "parallel": [
                {
                  "name": "Docker Hub",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "echo",
                          "arguments": [
                            {
                              "key": "message",
                              "value": {
                                "isLiteral": true,
                                "value": "Docker push"
                              }
                            }
                          ]
                        },
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "#!/bin/bash\nset -e\n\necho \"Making sure the images are available on this node...\"\n\necho ${DOCKER_REGISTRY_CREDENTIALS_PSW} | docker login docker.nemerosa.net --username ${DOCKER_REGISTRY_CREDENTIALS_USR} --password-stdin\ndocker image pull docker.nemerosa.net/nemerosa/ontrack:${ONTRACK_VERSION}\n\necho \"Publishing in Docker Hub...\"\n\necho ${DOCKER_HUB_PSW} | docker login --username ${DOCKER_HUB_USR} --password-stdin\n\ndocker image tag docker.nemerosa.net/nemerosa/ontrack:${ONTRACK_VERSION} nemerosa/ontrack:${ONTRACK_VERSION}\ndocker image tag docker.nemerosa.net/nemerosa/ontrack:${ONTRACK_VERSION} nemerosa/ontrack:2\ndocker image tag docker.nemerosa.net/nemerosa/ontrack:${ONTRACK_VERSION} nemerosa/ontrack:latest\n\ndocker image push nemerosa/ontrack:${ONTRACK_VERSION}\ndocker image push nemerosa/ontrack:2\ndocker image push nemerosa/ontrack:latest\n"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ],
                  "agent": {
                    "type": "dockerfile",
                    "arguments": [
                      {
                        "key": "label",
                        "value": {
                          "isLiteral": true,
                          "value": "docker"
                        }
                      },
                      {
                        "key": "args",
                        "value": {
                          "isLiteral": true,
                          "value": "--volume /var/run/docker.sock:/var/run/docker.sock"
                        }
                      }
                    ]
                  },
                  "environment": [
                    {
                      "key": "DOCKER_HUB",
                      "value": {
                        "name": "credentials",
                        "arguments": [
                          {
                            "isLiteral": true,
                            "value": "DOCKER_HUB"
                          }
                        ]
                      }
                    }
                  ]
                },
                {
                  "name": "Maven publication",
                  "branches": [
                    {
                      "name": "default",
                      "steps": [
                        {
                          "name": "echo",
                          "arguments": [
                            {
                              "key": "message",
                              "value": {
                                "isLiteral": true,
                                "value": "Maven publication"
                              }
                            }
                          ]
                        },
                        {
                          "name": "unstash",
                          "arguments": [
                            {
                              "key": "name",
                              "value": {
                                "isLiteral": true,
                                "value": "delivery"
                              }
                            }
                          ]
                        },
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "#!/bin/bash\nset -e\nunzip -n build/distributions/ontrack-${ONTRACK_VERSION}-delivery.zip -d ${WORKSPACE}\nunzip -n ${WORKSPACE}/ontrack-publication.zip -d publication\n"
                              }
                            }
                          ]
                        },
                        {
                          "name": "sh",
                          "arguments": [
                            {
                              "key": "script",
                              "value": {
                                "isLiteral": true,
                                "value": "#!/bin/bash\nset -e\n\n./gradlew \\\n    --build-file publication.gradle \\\n    --info \\\n    --profile \\\n    --console plain \\\n    --stacktrace \\\n    -PontrackVersion=${ONTRACK_VERSION} \\\n    -PontrackVersionCommit=${ONTRACK_COMMIT} \\\n    -PontrackReleaseBranch=${ONTRACK_BRANCH} \\\n    -Psigning.keyId=${GPG_KEY_USR} \\\n    -Psigning.password=${GPG_KEY_PSW} \\\n    -Psigning.secretKeyRingFile=${GPG_KEY_RING} \\\n    -PossrhUser=${OSSRH_USR} \\\n    -PossrhPassword=${OSSRH_PSW} \\\n    publicationMaven\n"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ],
                  "agent": {
                    "type": "dockerfile",
                    "arguments": [
                      {
                        "key": "label",
                        "value": {
                          "isLiteral": true,
                          "value": "docker"
                        }
                      },
                      {
                        "key": "args",
                        "value": {
                          "isLiteral": true,
                          "value": "--volume /var/run/docker.sock:/var/run/docker.sock"
                        }
                      }
                    ]
                  },
                  "environment": [
                    {
                      "key": "ONTRACK_COMMIT",
                      "value": {
                        "isLiteral": false,
                        "value": "\"${gitCommit}\""
                      }
                    },
                    {
                      "key": "ONTRACK_BRANCH",
                      "value": {
                        "isLiteral": false,
                        "value": "\"${branchName}\""
                      }
                    },
                    {
                      "key": "GPG_KEY",
                      "value": {
                        "name": "credentials",
                        "arguments": [
                          {
                            "isLiteral": true,
                            "value": "GPG_KEY"
                          }
                        ]
                      }
                    },
                    {
                      "key": "GPG_KEY_RING",
                      "value": {
                        "name": "credentials",
                        "arguments": [
                          {
                            "isLiteral": true,
                            "value": "GPG_KEY_RING"
                          }
                        ]
                      }
                    },
                    {
                      "key": "OSSRH",
                      "value": {
                        "name": "credentials",
                        "arguments": [
                          {
                            "isLiteral": true,
                            "value": "OSSRH"
                          }
                        ]
                      }
                    }
                  ]
                }
              ],
              "when": {
                "conditions": [
                  {
                    "name": "branch",
                    "arguments": {
                      "isLiteral": true,
                      "value": "release/*"
                    }
                  }
                ]
              },
              "environment": [
                {
                  "key": "ONTRACK_VERSION",
                  "value": {
                    "isLiteral": false,
                    "value": "\"${version}\""
                  }
                }
              ]
            },
            {
              "name": "Release",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "Release"
                          }
                        }
                      ]
                    },
                    {
                      "name": "unstash",
                      "arguments": [
                        {
                          "key": "name",
                          "value": {
                            "isLiteral": true,
                            "value": "delivery"
                          }
                        }
                      ]
                    },
                    {
                      "name": "unstash",
                      "arguments": [
                        {
                          "key": "name",
                          "value": {
                            "isLiteral": true,
                            "value": "rpm"
                          }
                        }
                      ]
                    },
                    {
                      "name": "unstash",
                      "arguments": [
                        {
                          "key": "name",
                          "value": {
                            "isLiteral": true,
                            "value": "debian"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "#!/bin/bash\nset -e\nunzip -n build/distributions/ontrack-${ONTRACK_VERSION}-delivery.zip -d ${WORKSPACE}\nunzip -n ${WORKSPACE}/ontrack-publication.zip -d publication\n"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "#!/bin/bash\nset -e\n\n./gradlew \\\n    --build-file publication.gradle \\\n    --info \\\n    --profile \\\n    --console plain \\\n    --stacktrace \\\n    -PontrackVersion=${ONTRACK_VERSION} \\\n    -PontrackVersionCommit=${ONTRACK_COMMIT} \\\n    -PontrackReleaseBranch=${ONTRACK_BRANCH} \\\n    -PgitHubUser=${GITHUB_USR} \\\n    -PgitHubPassword=${GITHUB_PSW} \\\n    publicationRelease\n"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "agent": {
                "type": "dockerfile",
                "arguments": [
                  {
                    "key": "label",
                    "value": {
                      "isLiteral": true,
                      "value": "docker"
                    }
                  },
                  {
                    "key": "args",
                    "value": {
                      "isLiteral": true,
                      "value": "--volume /var/run/docker.sock:/var/run/docker.sock"
                    }
                  }
                ]
              },
              "when": {
                "conditions": [
                  {
                    "name": "branch",
                    "arguments": {
                      "isLiteral": true,
                      "value": "release/*"
                    }
                  }
                ]
              },
              "post": {
                "conditions": [
                  {
                    "condition": "success",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "ontrackPromote",
                          "arguments": [
                            {
                              "key": "project",
                              "value": {
                                "isLiteral": false,
                                "value": "${projectName}"
                              }
                            },
                            {
                              "key": "branch",
                              "value": {
                                "isLiteral": false,
                                "value": "${branchName}"
                              }
                            },
                            {
                              "key": "build",
                              "value": {
                                "isLiteral": false,
                                "value": "${version}"
                              }
                            },
                            {
                              "key": "promotionLevel",
                              "value": {
                                "isLiteral": true,
                                "value": "RELEASE"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  }
                ]
              },
              "environment": [
                {
                  "key": "ONTRACK_VERSION",
                  "value": {
                    "isLiteral": false,
                    "value": "\"${version}\""
                  }
                },
                {
                  "key": "ONTRACK_COMMIT",
                  "value": {
                    "isLiteral": false,
                    "value": "\"${gitCommit}\""
                  }
                },
                {
                  "key": "ONTRACK_BRANCH",
                  "value": {
                    "isLiteral": false,
                    "value": "\"${branchName}\""
                  }
                },
                {
                  "key": "GITHUB",
                  "value": {
                    "name": "credentials",
                    "arguments": [
                      {
                        "isLiteral": true,
                        "value": "GITHUB_NEMEROSA_JENKINS2"
                      }
                    ]
                  }
                }
              ]
            },
            {
              "name": "Site",
              "branches": [
                {
                  "name": "default",
                  "steps": [
                    {
                      "name": "echo",
                      "arguments": [
                        {
                          "key": "message",
                          "value": {
                            "isLiteral": true,
                            "value": "Release"
                          }
                        }
                      ]
                    },
                    {
                      "name": "unstash",
                      "arguments": [
                        {
                          "key": "name",
                          "value": {
                            "isLiteral": true,
                            "value": "delivery"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "#!/bin/bash\nset -e\nunzip -n build/distributions/ontrack-${ONTRACK_VERSION}-delivery.zip -d ${WORKSPACE}\nunzip -n ${WORKSPACE}/ontrack-publication.zip -d publication\n"
                          }
                        }
                      ]
                    },
                    {
                      "name": "sh",
                      "arguments": [
                        {
                          "key": "script",
                          "value": {
                            "isLiteral": true,
                            "value": "#!/bin/bash\nset -e\n\nGITHUB_URI=`git config remote.origin.url`\n\n./gradlew \\\n    --build-file site.gradle \\\n    --info \\\n    --profile \\\n    --console plain \\\n    --stacktrace \\\n    -PontrackVersion=${ONTRACK_VERSION} \\\n    -PontrackGitHubUri=${GITHUB_URI} \\\n    -PontrackGitHubPages=gh-pages \\\n    -PontrackGitHubUser=${GITHUB_USR} \\\n    -PontrackGitHubPassword=${GITHUB_PSW} \\\n    site\n"
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "agent": {
                "type": "dockerfile",
                "arguments": [
                  {
                    "key": "label",
                    "value": {
                      "isLiteral": true,
                      "value": "docker"
                    }
                  },
                  {
                    "key": "args",
                    "value": {
                      "isLiteral": true,
                      "value": "--volume /var/run/docker.sock:/var/run/docker.sock"
                    }
                  }
                ]
              },
              "when": {
                "conditions": [
                  {
                    "name": "branch",
                    "arguments": {
                      "isLiteral": true,
                      "value": "release/*"
                    }
                  }
                ]
              },
              "post": {
                "conditions": [
                  {
                    "condition": "success",
                    "branch": {
                      "name": "default",
                      "steps": [
                        {
                          "name": "ontrackValidate",
                          "arguments": [
                            {
                              "key": "project",
                              "value": {
                                "isLiteral": false,
                                "value": "${projectName}"
                              }
                            },
                            {
                              "key": "branch",
                              "value": {
                                "isLiteral": false,
                                "value": "${branchName}"
                              }
                            },
                            {
                              "key": "build",
                              "value": {
                                "isLiteral": false,
                                "value": "${version}"
                              }
                            },
                            {
                              "key": "validationStamp",
                              "value": {
                                "isLiteral": true,
                                "value": "SITE"
                              }
                            },
                            {
                              "key": "buildResult",
                              "value": {
                                "isLiteral": false,
                                "value": "${currentBuild.result}"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  }
                ]
              },
              "environment": [
                {
                  "key": "ONTRACK_VERSION",
                  "value": {
                    "isLiteral": false,
                    "value": "\"${version}\""
                  }
                },
                {
                  "key": "GITHUB",
                  "value": {
                    "name": "credentials",
                    "arguments": [
                      {
                        "isLiteral": true,
                        "value": "GITHUB_NEMEROSA_JENKINS2"
                      }
                    ]
                  }
                }
              ]
            }
          ],
          "environment": [
            {
              "key": "DOCKER_REGISTRY_CREDENTIALS",
              "value": {
                "name": "credentials",
                "arguments": [
                  {
                    "isLiteral": true,
                    "value": "DOCKER_NEMEROSA"
                  }
                ]
              }
            }
          ],
          "agent": {
            "type": "none"
          },
          "options": {
            "options": [
              {
                "name": "buildDiscarder",
                "arguments": [
                  {
                    "name": "logRotator",
                    "arguments": [
                      {
                        "key": "numToKeepStr",
                        "value": {
                          "isLiteral": true,
                          "value": "40"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "name": "timestamps",
                "arguments": []
              },
              {
                "name": "durabilityHint",
                "arguments": [
                  {
                    "isLiteral": true,
                    "value": "PERFORMANCE_OPTIMIZED"
                  }
                ]
              }
            ]
          }
        }
      }
    },
    {
      "full_repo_name": "dequanchen/hbase-7129",
      "repo_url": "https://github.com/dequanchen/hbase-7129",
      "html_url_jenkinsfile": "https://github.com/dequanchen/hbase-7129/blob/64061f896fe21512504e3886a400759e88b519da/dev-support/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/126492499/git/blobs/e8bf8c9f80a848abecfefdeb57674f5d9ad80f55",
      "jenkins_pipeline": [
        {
          "error": [
            "Tool type \"maven\" does not have an install of \"Maven (latest)\" configured - did you mean \"Jenkins_maven\"? @ line 409, column 19.",
            "Tool type \"jdk\" does not have an install of \"JDK 1.8 (latest)\" configured - did you mean \"null\"? @ line 411, column 17."
          ]
        }
      ]
    },
    {
      "full_repo_name": "SUSE/scf",
      "repo_url": "https://github.com/SUSE/scf",
      "html_url_jenkinsfile": "https://github.com/SUSE/scf/blob/c7177c1f7a9eca97205e4374092874c434d00da6/Jenkinsfile",
      "api_url_jenkinsfile": "https://api.github.com/repositories/43776718/git/blobs/537f0347e6f8338dffa61228e210c5a0d6d662ed",
      "jenkins_pipeline": [
        {
          "error": "Invalid option type \"ansiColor\". Valid option types: [authorizationMatrix, buildDiscarder, catchError, checkoutToSubdirectory, disableConcurrentBuilds, disableResume, durabilityHint, gitLabConnection, gitlabBuilds, gitlabCommitStatus, overrideIndexTriggers, retry, script, skipDefaultCheckout, skipStagesAfterUnstable, timeout, timestamps, waitUntil, withContext, withCredentials, withEnv, ws] @ line 98, column 9."
        }
      ]
    }
  ]
}